var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"DCDC_Buck","ref":false,"files":[{"name":"DCDC_Buck.c","type":"source","group":"model","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * DCDC_Buck.c\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"DCDC_Buck.h\"\r\n#include \"DCDC_Buck_private.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_DCDC_Buck_T DCDC_Buck_B;\r\n\r\n/* Continuous states */\r\nX_DCDC_Buck_T DCDC_Buck_X;\r\n\r\n/* Block states (default storage) */\r\nDW_DCDC_Buck_T DCDC_Buck_DW;\r\n\r\n/* Mass Matrices */\r\nMassMatrix_DCDC_Buck_T DCDC_Buck_MassMatrix;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_DCDC_Buck_T DCDC_Buck_M_;\r\nRT_MODEL_DCDC_Buck_T *const DCDC_Buck_M = &DCDC_Buck_M_;\r\n\r\n/* ForcingFunction for root system: '<Root>' */\r\nvoid DCDC_Buck_forcingfunction(void)\r\n{\r\n  NeslSimulationData *simulationData;\r\n  NeuDiagnosticManager *diagnosticManager;\r\n  NeuDiagnosticTree *diagnosticTree;\r\n  XDot_DCDC_Buck_T *_rtXdot;\r\n  real_T tmp_1[16];\r\n  real_T time;\r\n  int32_T tmp_3;\r\n  int_T tmp_2[5];\r\n  boolean_T tmp;\r\n  boolean_T tmp_0;\r\n  _rtXdot = ((XDot_DCDC_Buck_T *) DCDC_Buck_M->derivs);\r\n\r\n  /* ForcingFunction for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n  simulationData = (NeslSimulationData *)DCDC_Buck_DW.STATE_1_SimData;\r\n  time = DCDC_Buck_M->Timing.t[0];\r\n  simulationData->mData->mTime.mN = 1;\r\n  simulationData->mData->mTime.mX = &time;\r\n  simulationData->mData->mContStates.mN = 31;\r\n  simulationData->mData->mContStates.mX =\r\n    &DCDC_Buck_X.DCDC_BuckDC_DC_Buck_PLANTDC_DC_[0];\r\n  simulationData->mData->mDiscStates.mN = 0;\r\n  simulationData->mData->mDiscStates.mX = &DCDC_Buck_DW.STATE_1_Discrete;\r\n  simulationData->mData->mModeVector.mN = 11;\r\n  simulationData->mData->mModeVector.mX = &DCDC_Buck_DW.STATE_1_Modes[0];\r\n  tmp = false;\r\n  simulationData->mData->mFoundZcEvents = tmp;\r\n  tmp = rtmIsMajorTimeStep(DCDC_Buck_M);\r\n  simulationData->mData->mIsMajorTimeStep = tmp;\r\n  tmp_0 = false;\r\n  simulationData->mData->mIsSolverAssertCheck = tmp_0;\r\n  simulationData->mData->mIsSolverCheckingCIC = false;\r\n  tmp_0 = rtsiIsSolverComputingJacobian(&DCDC_Buck_M->solverInfo);\r\n  simulationData->mData->mIsComputingJacobian = tmp_0;\r\n  simulationData->mData->mIsEvaluatingF0 = false;\r\n  simulationData->mData->mIsSolverRequestingReset = false;\r\n  simulationData->mData->mIsOkayToUpdateMode = tmp;\r\n  tmp_2[0] = 0;\r\n  tmp_1[0] = DCDC_Buck_B.INPUT_1_1_1[0];\r\n  tmp_1[1] = DCDC_Buck_B.INPUT_1_1_1[1];\r\n  tmp_1[2] = DCDC_Buck_B.INPUT_1_1_1[2];\r\n  tmp_1[3] = DCDC_Buck_B.INPUT_1_1_1[3];\r\n  tmp_2[1] = 4;\r\n  tmp_1[4] = DCDC_Buck_B.INPUT_3_1_1[0];\r\n  tmp_1[5] = DCDC_Buck_B.INPUT_3_1_1[1];\r\n  tmp_1[6] = DCDC_Buck_B.INPUT_3_1_1[2];\r\n  tmp_1[7] = DCDC_Buck_B.INPUT_3_1_1[3];\r\n  tmp_2[2] = 8;\r\n  tmp_1[8] = DCDC_Buck_B.INPUT_2_1_1[0];\r\n  tmp_1[9] = DCDC_Buck_B.INPUT_2_1_1[1];\r\n  tmp_1[10] = DCDC_Buck_B.INPUT_2_1_1[2];\r\n  tmp_1[11] = DCDC_Buck_B.INPUT_2_1_1[3];\r\n  tmp_2[3] = 12;\r\n  tmp_1[12] = DCDC_Buck_B.INPUT_4_1_1[0];\r\n  tmp_1[13] = DCDC_Buck_B.INPUT_4_1_1[1];\r\n  tmp_1[14] = DCDC_Buck_B.INPUT_4_1_1[2];\r\n  tmp_1[15] = DCDC_Buck_B.INPUT_4_1_1[3];\r\n  tmp_2[4] = 16;\r\n  simulationData->mData->mInputValues.mN = 16;\r\n  simulationData->mData->mInputValues.mX = &tmp_1[0];\r\n  simulationData->mData->mInputOffsets.mN = 5;\r\n  simulationData->mData->mInputOffsets.mX = &tmp_2[0];\r\n  simulationData->mData->mDx.mN = 31;\r\n  simulationData->mData->mDx.mX = &_rtXdot->DCDC_BuckDC_DC_Buck_PLANTDC_DC_[0];\r\n  diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.STATE_1_DiagMgr;\r\n  diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n  tmp_3 = ne_simulator_method((NeslSimulator *)DCDC_Buck_DW.STATE_1_Simulator,\r\n    NESL_SIM_FORCINGFUNCTION, simulationData, diagnosticManager);\r\n  if (tmp_3 != 0) {\r\n    tmp = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n    if (tmp) {\r\n      char *msg;\r\n      msg = rtw_diagnostics_msg(diagnosticTree);\r\n      rtmSetErrorStatus(DCDC_Buck_M, msg);\r\n    }\r\n  }\r\n\r\n  /* End of ForcingFunction for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n}\r\n\r\n/* MassMatrix for root system: '<Root>' */\r\nvoid DCDC_Buck_massmatrix(void)\r\n{\r\n  NeslSimulationData *simulationData;\r\n  NeuDiagnosticManager *diagnosticManager;\r\n  NeuDiagnosticTree *diagnosticTree;\r\n  real_T tmp_1[16];\r\n  real_T time;\r\n  real_T *tmp_3;\r\n  real_T *tmp_4;\r\n  int32_T tmp_5;\r\n  int_T tmp_2[5];\r\n  boolean_T tmp;\r\n  boolean_T tmp_0;\r\n\r\n  /* MassMatrix for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n  simulationData = (NeslSimulationData *)DCDC_Buck_DW.STATE_1_SimData;\r\n  time = DCDC_Buck_M->Timing.t[0];\r\n  simulationData->mData->mTime.mN = 1;\r\n  simulationData->mData->mTime.mX = &time;\r\n  simulationData->mData->mContStates.mN = 31;\r\n  simulationData->mData->mContStates.mX =\r\n    &DCDC_Buck_X.DCDC_BuckDC_DC_Buck_PLANTDC_DC_[0];\r\n  simulationData->mData->mDiscStates.mN = 0;\r\n  simulationData->mData->mDiscStates.mX = &DCDC_Buck_DW.STATE_1_Discrete;\r\n  simulationData->mData->mModeVector.mN = 11;\r\n  simulationData->mData->mModeVector.mX = &DCDC_Buck_DW.STATE_1_Modes[0];\r\n  tmp = false;\r\n  simulationData->mData->mFoundZcEvents = tmp;\r\n  tmp = rtmIsMajorTimeStep(DCDC_Buck_M);\r\n  simulationData->mData->mIsMajorTimeStep = tmp;\r\n  tmp_0 = false;\r\n  simulationData->mData->mIsSolverAssertCheck = tmp_0;\r\n  simulationData->mData->mIsSolverCheckingCIC = false;\r\n  tmp_0 = rtsiIsSolverComputingJacobian(&DCDC_Buck_M->solverInfo);\r\n  simulationData->mData->mIsComputingJacobian = tmp_0;\r\n  simulationData->mData->mIsEvaluatingF0 = false;\r\n  simulationData->mData->mIsSolverRequestingReset = false;\r\n  simulationData->mData->mIsOkayToUpdateMode = tmp;\r\n  tmp_2[0] = 0;\r\n  tmp_1[0] = DCDC_Buck_B.INPUT_1_1_1[0];\r\n  tmp_1[1] = DCDC_Buck_B.INPUT_1_1_1[1];\r\n  tmp_1[2] = DCDC_Buck_B.INPUT_1_1_1[2];\r\n  tmp_1[3] = DCDC_Buck_B.INPUT_1_1_1[3];\r\n  tmp_2[1] = 4;\r\n  tmp_1[4] = DCDC_Buck_B.INPUT_3_1_1[0];\r\n  tmp_1[5] = DCDC_Buck_B.INPUT_3_1_1[1];\r\n  tmp_1[6] = DCDC_Buck_B.INPUT_3_1_1[2];\r\n  tmp_1[7] = DCDC_Buck_B.INPUT_3_1_1[3];\r\n  tmp_2[2] = 8;\r\n  tmp_1[8] = DCDC_Buck_B.INPUT_2_1_1[0];\r\n  tmp_1[9] = DCDC_Buck_B.INPUT_2_1_1[1];\r\n  tmp_1[10] = DCDC_Buck_B.INPUT_2_1_1[2];\r\n  tmp_1[11] = DCDC_Buck_B.INPUT_2_1_1[3];\r\n  tmp_2[3] = 12;\r\n  tmp_1[12] = DCDC_Buck_B.INPUT_4_1_1[0];\r\n  tmp_1[13] = DCDC_Buck_B.INPUT_4_1_1[1];\r\n  tmp_1[14] = DCDC_Buck_B.INPUT_4_1_1[2];\r\n  tmp_1[15] = DCDC_Buck_B.INPUT_4_1_1[3];\r\n  tmp_2[4] = 16;\r\n  simulationData->mData->mInputValues.mN = 16;\r\n  simulationData->mData->mInputValues.mX = &tmp_1[0];\r\n  simulationData->mData->mInputOffsets.mN = 5;\r\n  simulationData->mData->mInputOffsets.mX = &tmp_2[0];\r\n  tmp_3 = DCDC_Buck_MassMatrix.pr;\r\n  tmp_4 = double_pointer_shift(tmp_3, DCDC_Buck_DW.STATE_1_MASS_MATRIX_PR);\r\n  simulationData->mData->mMassMatrixPr.mN = 13;\r\n  simulationData->mData->mMassMatrixPr.mX = tmp_4;\r\n  diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.STATE_1_DiagMgr;\r\n  diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n  tmp_5 = ne_simulator_method((NeslSimulator *)DCDC_Buck_DW.STATE_1_Simulator,\r\n    NESL_SIM_MASSMATRIX, simulationData, diagnosticManager);\r\n  if (tmp_5 != 0) {\r\n    tmp = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n    if (tmp) {\r\n      char *msg;\r\n      msg = rtw_diagnostics_msg(diagnosticTree);\r\n      rtmSetErrorStatus(DCDC_Buck_M, msg);\r\n    }\r\n  }\r\n\r\n  /* End of MassMatrix for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n}\r\n\r\nvoid local_evaluateMassMatrix(RTWSolverInfo *si, real_T *Mdest )\r\n{\r\n  /* Refresh global mass matrix */\r\n  DCDC_Buck_massmatrix();\r\n\r\n  /* Copy the mass matrix from system to the destination, if needed. */\r\n  if (Mdest != rtsiGetSolverMassMatrixPr(si)) {\r\n    real_T *Msrc = rtsiGetSolverMassMatrixPr(si);\r\n    int_T nzmax = rtsiGetSolverMassMatrixNzMax(si);\r\n    (void) memcpy(Mdest, Msrc,\r\n                  (uint_T)nzmax*sizeof(real_T));\r\n  }\r\n}\r\n\r\n/* Simplified version of numjac.cpp, for use with RTW. */\r\nvoid local_numjac( RTWSolverInfo *si, real_T *y, const real_T *Fty, real_T *fac,\r\n                  real_T *dFdy )\r\n{\r\n  /* constants */\r\n  real_T THRESH = 1e-6;\r\n  real_T EPS = 2.2e-16;                /* utGetEps(); */\r\n  real_T BL = pow(EPS, 0.75);\r\n  real_T BU = pow(EPS, 0.25);\r\n  real_T FACMIN = pow(EPS, 0.78);\r\n  real_T FACMAX = 0.1;\r\n  int_T nx = 31;\r\n  real_T *x = rtsiGetContStates(si);\r\n  real_T del;\r\n  real_T difmax;\r\n  real_T FdelRowmax;\r\n  real_T temp;\r\n  real_T Fdiff;\r\n  real_T maybe;\r\n  real_T xscale;\r\n  real_T fscale;\r\n  real_T *p;\r\n  int_T rowmax;\r\n  int_T i,j;\r\n  if (x != y)\r\n    (void) memcpy(x, y,\r\n                  (uint_T)nx*sizeof(real_T));\r\n  rtsiSetSolverComputingJacobian(si,true);\r\n  for (p = dFdy, j = 0; j < nx; j++, p += nx) {\r\n    /* Select an increment del for a difference approximation to\r\n       column j of dFdy.  The vector fac accounts for experience\r\n       gained in previous calls to numjac. */\r\n    xscale = fabs(x[j]);\r\n    if (xscale < THRESH)\r\n      xscale = THRESH;\r\n    temp = (x[j] + fac[j]*xscale);\r\n    del = temp - y[j];\r\n    while (del == 0.0) {\r\n      if (fac[j] < FACMAX) {\r\n        fac[j] *= 100.0;\r\n        if (fac[j] > FACMAX)\r\n          fac[j] = FACMAX;\r\n        temp = (x[j] + fac[j]*xscale);\r\n        del = temp - x[j];\r\n      } else {\r\n        del = THRESH;                  /* thresh is nonzero */\r\n        break;\r\n      }\r\n    }\r\n\r\n    /* Keep del pointing into region. */\r\n    if (Fty[j] >= 0.0)\r\n      del = fabs(del);\r\n    else\r\n      del = -fabs(del);\r\n\r\n    /* Form a difference approximation to column j of dFdy. */\r\n    temp = x[j];\r\n    x[j] += del;\r\n    DCDC_Buck_step();\r\n    rtsiSetdX(si,p);\r\n    DCDC_Buck_forcingfunction();\r\n    x[j] = temp;\r\n    difmax = 0.0;\r\n    rowmax = 0;\r\n    FdelRowmax = p[0];\r\n    temp = 1.0 / del;\r\n    for (i = 0; i < nx; i++) {\r\n      Fdiff = p[i] - Fty[i];\r\n      maybe = fabs(Fdiff);\r\n      if (maybe > difmax) {\r\n        difmax = maybe;\r\n        rowmax = i;\r\n        FdelRowmax = p[i];\r\n      }\r\n\r\n      p[i] = temp * Fdiff;\r\n    }\r\n\r\n    /* Adjust fac for next call to numjac. */\r\n    if (((FdelRowmax != 0.0) && (Fty[rowmax] != 0.0)) || (difmax == 0.0)) {\r\n      fscale = fabs(FdelRowmax);\r\n      if (fscale < fabs(Fty[rowmax]))\r\n        fscale = fabs(Fty[rowmax]);\r\n      if (difmax <= BL*fscale) {\r\n        /* The difference is small, so increase the increment. */\r\n        fac[j] *= 10.0;\r\n        if (fac[j] > FACMAX)\r\n          fac[j] = FACMAX;\r\n      } else if (difmax > BU*fscale) {\r\n        /* The difference is large, so reduce the increment. */\r\n        fac[j] *= 0.1;\r\n        if (fac[j] < FACMIN)\r\n          fac[j] = FACMIN;\r\n      }\r\n    }\r\n  }\r\n\r\n  rtsiSetSolverComputingJacobian(si,false);\r\n}                                      /* end local_numjac */\r\n\r\n/*\r\n * This function updates continuous states using the ODE14X fixed-step\r\n * solver algorithm\r\n */\r\nstatic void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\r\n{\r\n  /* Solver Matrices */\r\n  static int_T rt_ODE14x_N[4] = { 12, 8, 6, 4 };\r\n\r\n  time_T t0 = rtsiGetT(si);\r\n  time_T t1 = t0;\r\n  time_T h = rtsiGetStepSize(si);\r\n  real_T *x1 = rtsiGetContStates(si);\r\n  int_T order = rtsiGetSolverExtrapolationOrder(si);\r\n  int_T numIter = rtsiGetSolverNumberNewtonIterations(si);\r\n  ODE14X_IntgData *id = (ODE14X_IntgData *)rtsiGetSolverData(si);\r\n  real_T *x0 = id->x0;\r\n  real_T *f0 = id->f0;\r\n  real_T *x1start = id->x1start;\r\n  real_T *f1 = id->f1;\r\n  real_T *Delta = id->Delta;\r\n  real_T *E = id->E;\r\n  real_T *fac = id->fac;\r\n  real_T *dfdx = id->DFDX;\r\n  real_T *W = id->W;\r\n  int_T *pivots = id->pivots;\r\n  real_T *xtmp = id->xtmp;\r\n  real_T *ztmp = id->ztmp;\r\n  int_T *Mpattern_ir = rtsiGetSolverMassMatrixIr(si);\r\n  int_T *Mpattern_jc = rtsiGetSolverMassMatrixJc(si);\r\n  real_T *M = id->M;\r\n  int_T col,row,rowidx;\r\n  int_T *N = &(rt_ODE14x_N[0]);\r\n  int_T i,j,k,iter;\r\n  int_T nx = 31;\r\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\r\n\r\n  /* Save the state values at time t in y, we'll use x as ynew. */\r\n  (void) memcpy(x0, x1,\r\n                (uint_T)nx*sizeof(real_T));\r\n\r\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\r\n  if (id->isFirstStep) {\r\n    local_evaluateMassMatrix(si,M );\r\n    id->isFirstStep = false;\r\n  }\r\n\r\n  /* f0 = f(t,y) */\r\n  rtsiSetdX(si, f0);\r\n  DCDC_Buck_forcingfunction();\r\n  local_numjac(si,x0,f0,fac,dfdx );\r\n  for (j = 0; j < order; j++) {\r\n    real_T *p;\r\n    real_T hN = h/N[j];\r\n\r\n    /* Get the iteration matrix and solution at t0 */\r\n\r\n    /* [L,U] = lu(M - hN*J) */\r\n    (void) memcpy(W, dfdx,\r\n                  (uint_T)nx*nx*sizeof(real_T));\r\n    for (p = W, i = 0; i < nx*nx; i++, p++) {\r\n      *p *= (-hN);\r\n    }\r\n\r\n    for (col = 0, p = W; col < nx; col++, p += nx) {\r\n      for (rowidx = Mpattern_jc[col]; rowidx < Mpattern_jc[col+1]; rowidx++) {\r\n        real_T m_row_col = M[rowidx];\r\n        row = Mpattern_ir[rowidx];\r\n        p[row] += m_row_col;\r\n      }\r\n    }\r\n\r\n    rt_lu_real(W, nx,\r\n               pivots);\r\n\r\n    /* First Newton's iteration at t0. */\r\n    /* rhs = hN*f0 */\r\n    for (i = 0; i < nx; i++) {\r\n      Delta[i] = hN*f0[i];\r\n    }\r\n\r\n    /* Delta = (U \\ (L \\ rhs)) */\r\n    rt_ForwardSubstitutionRR_Dbl(W, Delta,\r\n      f1, nx,\r\n      1, pivots,\r\n      1);\r\n    rt_BackwardSubstitutionRR_Dbl(W+nx*nx-1, f1+nx-1,\r\n      Delta, nx,\r\n      1, 0);\r\n\r\n    /* ytmp = y0 + Delta\r\n       ztmp = (ytmp-y0)/h\r\n     */\r\n    (void) memcpy(x1, x0,\r\n                  (uint_T)nx*sizeof(real_T));\r\n    for (i = 0; i < nx; i++) {\r\n      x1[i] += Delta[i];\r\n      ztmp[i] = Delta[i]/hN;\r\n    }\r\n\r\n    /* Additional Newton's iterations, if desired.\r\n       for iter = 2:NewtIter\r\n       rhs = hN*feval(odefun,tn,ytmp,extraArgs{:}) - M*(ytmp - yn);\r\n       if statedepM   % only for state dep. Mdel ~= 0\r\n       Mdel = M - feval(massfun,tn,ytmp);\r\n       rhs = rhs + Mdel*ztmp*h;\r\n       end\r\n       Delta = ( U \\ ( L \\ rhs ) );\r\n       ytmp = ytmp + Delta;\r\n       ztmp = (ytmp - yn)/h\r\n       end\r\n     */\r\n    rtsiSetT(si, t0);\r\n    rtsiSetdX(si, f1);\r\n    for (iter = 1; iter < numIter; iter++) {\r\n      DCDC_Buck_step();\r\n      DCDC_Buck_forcingfunction();\r\n      for (i = 0; i < nx; i++) {\r\n        Delta[i] = hN*f1[i];\r\n        xtmp[i] = x1[i] - x0[i];\r\n      }\r\n\r\n      /* rhs = hN*f(tn,ytmp) - M*(ytmp-yn) */\r\n      for (col = 0; col < nx; col++) {\r\n        for (rowidx = Mpattern_jc[col]; rowidx < Mpattern_jc[col+1]; rowidx++) {\r\n          real_T m_row_col = M[rowidx];\r\n          row = Mpattern_ir[rowidx];\r\n          Delta[row] -= m_row_col*xtmp[col];\r\n        }\r\n      }\r\n\r\n      rt_ForwardSubstitutionRR_Dbl(W, Delta,\r\n        f1, nx,\r\n        1, pivots,\r\n        1);\r\n      rt_BackwardSubstitutionRR_Dbl(W+nx*nx-1, f1+nx-1,\r\n        Delta, nx,\r\n        1, 0);\r\n\r\n      /* ytmp = ytmp + delta\r\n         ztmp = (ytmp - yn)/h\r\n       */\r\n      for (i = 0; i < nx; i++) {\r\n        x1[i] += Delta[i];\r\n        ztmp[i] = (x1[i] - x0[i])/hN;\r\n      }\r\n    }\r\n\r\n    /* Steps from t0+hN to t1 -- subintegration of N(j) steps for extrapolation\r\n       ttmp = t0;\r\n       for i = 2:N(j)\r\n       ttmp = ttmp + hN\r\n       ytmp0 = ytmp;\r\n       for iter = 1:NewtIter\r\n       rhs = (ytmp0 - ytmp) + hN*feval(odefun,ttmp,ytmp,extraArgs{:});\r\n       Delta = ( U \\ ( L \\ rhs ) );\r\n       ytmp = ytmp + Delta;\r\n       end\r\n       end\r\n     */\r\n    for (k = 1; k < N[j]; k++) {\r\n      t1 = t0 + k*hN;\r\n      (void) memcpy(x1start, x1,\r\n                    (uint_T)nx*sizeof(real_T));\r\n      rtsiSetT(si, t1);\r\n      rtsiSetdX(si, f1);\r\n      for (iter = 0; iter < numIter; iter++) {\r\n        DCDC_Buck_step();\r\n        DCDC_Buck_forcingfunction();\r\n        if (iter == 0) {\r\n          for (i = 0; i < nx; i++) {\r\n            Delta[i] = hN*f1[i];\r\n          }\r\n        } else {\r\n          for (i = 0; i < nx; i++) {\r\n            Delta[i] = hN*f1[i];\r\n            xtmp[i] = (x1[i]-x1start[i]);\r\n          }\r\n\r\n          /* rhs = hN*f(tn,ytmp) - M*(ytmp-yn) */\r\n          for (col = 0; col < nx; col++) {\r\n            for (rowidx = Mpattern_jc[col]; rowidx < Mpattern_jc[col+1]; rowidx\r\n                 ++) {\r\n              real_T m_row_col = M[rowidx];\r\n              row = Mpattern_ir[rowidx];\r\n              Delta[row] -= m_row_col*xtmp[col];\r\n            }\r\n          }\r\n        }\r\n\r\n        rt_ForwardSubstitutionRR_Dbl(W, Delta,\r\n          f1, nx,\r\n          1, pivots,\r\n          1);\r\n        rt_BackwardSubstitutionRR_Dbl(W+nx*nx-1, f1+nx-1,\r\n          Delta, nx,\r\n          1, 0);\r\n\r\n        /* ytmp = ytmp + Delta\r\n           ztmp = (ytmp - ytmp0)/h\r\n         */\r\n        for (i = 0; i < nx; i++) {\r\n          x1[i] += Delta[i];\r\n          ztmp[i] = (x1[i] - x1start[i])/hN;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* Extrapolate to order j\r\n       E(:,j) = ytmp\r\n       for k = j:-1:2\r\n       coef = N(k-1)/(N(j) - N(k-1))\r\n       E(:,k-1) = E(:,k) + coef*( E(:,k) - E(:,k-1) )\r\n       end\r\n     */\r\n    (void) memcpy(&(E[nx*j]), x1,\r\n                  (uint_T)nx*sizeof(real_T));\r\n    for (k = j; k > 0; k--) {\r\n      real_T coef = (real_T)(N[k-1]) / (N[j]-N[k-1]);\r\n      for (i = 0; i < nx; i++) {\r\n        x1[i] = E[nx*k+i] + coef*(E[nx*k+i] - E[nx*(k-1)+i]);\r\n      }\r\n\r\n      (void) memcpy(&(E[nx*(k-1)]), x1,\r\n                    (uint_T)nx*sizeof(real_T));\r\n    }\r\n  }\r\n\r\n  /* x1 = E(:,1); */\r\n  (void) memcpy(x1, E,\r\n                (uint_T)nx*sizeof(real_T));\r\n\r\n  /* t1 = t0 + h; */\r\n  rtsiSetT(si,rtsiGetSolverStopTime(si));\r\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\r\n}\r\n\r\nreal_T rt_remd_snf(real_T u0, real_T u1)\r\n{\r\n  real_T y;\r\n  if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {\r\n    y = (rtNaN);\r\n  } else if (rtIsInf(u1)) {\r\n    y = u0;\r\n  } else if ((u1 != 0.0) && (u1 != trunc(u1))) {\r\n    real_T q;\r\n    q = fabs(u0 / u1);\r\n    if (!(fabs(q - floor(q + 0.5)) > DBL_EPSILON * q)) {\r\n      y = 0.0 * u0;\r\n    } else {\r\n      y = fmod(u0, u1);\r\n    }\r\n  } else {\r\n    y = fmod(u0, u1);\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid DCDC_Buck_step(void)\r\n{\r\n  /* local block i/o variables */\r\n  real_T rtb_Subsystem_boundary_DTC3;\r\n  int32_T rtb_Sum1;\r\n  int32_T rtb_IQNxIQN;\r\n  int32_T rtb_Sum2;\r\n  boolean_T rtb_RelationalOperator;\r\n  if (rtmIsMajorTimeStep(DCDC_Buck_M)) {\r\n    /* set solver stop time */\r\n    if (!(DCDC_Buck_M->Timing.clockTick0+1)) {\r\n      rtsiSetSolverStopTime(&DCDC_Buck_M->solverInfo,\r\n                            ((DCDC_Buck_M->Timing.clockTickH0 + 1) *\r\n        DCDC_Buck_M->Timing.stepSize0 * 4294967296.0));\r\n    } else {\r\n      rtsiSetSolverStopTime(&DCDC_Buck_M->solverInfo,\r\n                            ((DCDC_Buck_M->Timing.clockTick0 + 1) *\r\n        DCDC_Buck_M->Timing.stepSize0 + DCDC_Buck_M->Timing.clockTickH0 *\r\n        DCDC_Buck_M->Timing.stepSize0 * 4294967296.0));\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  /* Update absolute time of base rate at minor time step */\r\n  if (rtmIsMinorTimeStep(DCDC_Buck_M)) {\r\n    DCDC_Buck_M->Timing.t[0] = rtsiGetT(&DCDC_Buck_M->solverInfo);\r\n  }\r\n\r\n  {\r\n    NeslSimulationData *simulationData;\r\n    NeuDiagnosticManager *diagnosticManager;\r\n    NeuDiagnosticTree *diagnosticTree;\r\n    NeuDiagnosticTree *diagnosticTree_0;\r\n    real_T tmp_3[58];\r\n    real_T tmp_1[16];\r\n    real_T rtb_OUTPUT_1_0[2];\r\n    real_T rtb_Gain4_tmp;\r\n    real_T time;\r\n    real_T time_0;\r\n    int32_T rtb_Gain4;\r\n    int32_T rtb_Saturation;\r\n    int_T tmp_4[6];\r\n    int_T tmp_2[5];\r\n    boolean_T tmp;\r\n    boolean_T tmp_0;\r\n    if (rtmIsMajorTimeStep(DCDC_Buck_M)) {\r\n      /* S-Function (stiiqmath_iqmpy): '<S4>/IQN x IQN' incorporates:\r\n       *  DataTypeConversion: '<S3>/Data Type Conversion3'\r\n       *  UnitDelay: '<S1>/Unit Delay'\r\n       */\r\n      rtb_IQNxIQN = (int32_T)floor(DCDC_Buck_DW.UnitDelay_DSTATE * 1.6777216E+7);\r\n\r\n      /* Sum: '<S4>/Sum' incorporates:\r\n       *  DataTypeConversion: '<S3>/Data Type Conversion'\r\n       *  Gain: '<S3>/Gain4'\r\n       *  S-Function (stiiqmath_iqmpy): '<S4>/IQN x IQN'\r\n       */\r\n      rtb_Gain4 = 36825989 - rtb_IQNxIQN;\r\n\r\n      /* S-Function (stiiqmath_iqmpy): '<S4>/IQN x IQN' */\r\n\r\n      /* C28x IQmath Library (stiiqmath_iqmpy) - '<S4>/IQN x IQN' */\r\n      {\r\n        rtb_IQNxIQN = _IQ24mpy (rtb_Gain4, DCDC_Buck_ConstB.DataTypeConversion1);\r\n      }\r\n\r\n      /* Switch: '<S6>/Switch' incorporates:\r\n       *  Constant: '<S6>/Constant'\r\n       *  Constant: '<S7>/Constant'\r\n       *  Constant: '<S8>/Constant'\r\n       *  DataTypeConversion: '<S3>/Data Type Conversion2'\r\n       *  DataTypeConversion: '<S4>/Subsystem_boundary_DTC'\r\n       *  Gain: '<S3>/Gain4'\r\n       *  Logic: '<S6>/Logical Operator'\r\n       *  RelationalOperator: '<S6>/Relational Operator1'\r\n       *  RelationalOperator: '<S7>/Compare'\r\n       *  RelationalOperator: '<S8>/Compare'\r\n       *  Saturate: '<S4>/Saturation'\r\n       *  UnitDelay: '<S6>/Unit Delay'\r\n       *  UnitDelay: '<S6>/Unit Delay1'\r\n       */\r\n      if (DCDC_Buck_DW.UnitDelay1_DSTATE || (((real_T)rtb_Gain4 *\r\n            5.9604644775390625E-8 <= 0.0) != (DCDC_Buck_DW.UnitDelay_DSTATE_b <=\r\n            0.0))) {\r\n        rtb_Saturation = 50331;\r\n      } else {\r\n        rtb_Saturation = 0;\r\n      }\r\n\r\n      /* End of Switch: '<S6>/Switch' */\r\n\r\n      /* S-Function (stiiqmath_iqmpy): '<S4>/IQN x IQN1' */\r\n\r\n      /* C28x IQmath Library (stiiqmath_iqmpy) - '<S4>/IQN x IQN1' */\r\n      {\r\n        rtb_Sum2 = _IQ24mpy (rtb_Gain4, rtb_Saturation);\r\n      }\r\n\r\n      /* Sum: '<S4>/Sum1' incorporates:\r\n       *  Sum: '<S4>/Sum2'\r\n       *  UnitDelay: '<S4>/Unit Delay'\r\n       */\r\n      rtb_Sum1 = rtb_Sum2 + DCDC_Buck_DW.UnitDelay_DSTATE_m;\r\n\r\n      /* Sum: '<S4>/Sum2' incorporates:\r\n       *  S-Function (stiiqmath_iqmpy): '<S4>/IQN x IQN'\r\n       *  Sum: '<S4>/Sum1'\r\n       */\r\n      rtb_Sum2 = rtb_IQNxIQN + rtb_Sum1;\r\n\r\n      /* Saturate: '<S4>/Saturation' incorporates:\r\n       *  Sum: '<S4>/Sum2'\r\n       */\r\n      if (rtb_Sum2 > 13421773) {\r\n        rtb_Saturation = 13421773;\r\n      } else if (rtb_Sum2 < 0) {\r\n        rtb_Saturation = 0;\r\n      } else {\r\n        rtb_Saturation = rtb_Sum2;\r\n      }\r\n\r\n      /* End of Saturate: '<S4>/Saturation' */\r\n\r\n      /* DataTypeConversion: '<S3>/Data Type Conversion6' incorporates:\r\n       *  DataTypeConversion: '<S4>/Subsystem_boundary_DTC2'\r\n       *  Saturate: '<S4>/Saturation'\r\n       */\r\n      rtb_Gain4_tmp = (real_T)rtb_Saturation * 5.9604644775390625E-8;\r\n\r\n      /* Gain: '<S3>/Gain4' incorporates:\r\n       *  DataTypeConversion: '<S3>/Data Type Conversion6'\r\n       */\r\n      rtb_Gain4 = (int32_T)(rtb_Gain4_tmp * 1000.0 * 1.048576E+6);\r\n\r\n      /* Gain: '<S5>/Inverse TBPRD' incorporates:\r\n       *  DataTypeConversion: '<S5>/Data Type Conversion3'\r\n       *  Gain: '<S3>/Gain4'\r\n       */\r\n      DCDC_Buck_B.Duty = (real_T)rtb_Gain4 * 9.5367431640625E-7 * 0.001;\r\n\r\n      /* DataTypeConversion: '<S4>/Subsystem_boundary_DTC3' incorporates:\r\n       *  Sum: '<S4>/Sum2'\r\n       */\r\n      rtb_Subsystem_boundary_DTC3 = (real_T)rtb_Sum2 * 5.9604644775390625E-8;\r\n\r\n      /* RelationalOperator: '<S6>/Relational Operator' */\r\n      rtb_RelationalOperator = (rtb_Gain4_tmp == rtb_Subsystem_boundary_DTC3);\r\n    }\r\n\r\n    /* Clock: '<S9>/Clock1' incorporates:\r\n     *  SimscapeExecutionBlock: '<S26>/OUTPUT_1_0'\r\n     *  SimscapeExecutionBlock: '<S26>/STATE_1'\r\n     */\r\n    rtb_Gain4_tmp = DCDC_Buck_M->Timing.t[0];\r\n\r\n    /* Gain: '<S9>/Gain1' incorporates:\r\n     *  Clock: '<S9>/Clock1'\r\n     *  Constant: '<S9>/Time_Period'\r\n     *  Math: '<S9>/Math Function2'\r\n     */\r\n    DCDC_Buck_B.Gain1 = 200000.0 * rt_remd_snf(rtb_Gain4_tmp, 5.0E-6);\r\n\r\n    /* DataTypeConversion: '<S5>/Data Type Conversion1' incorporates:\r\n     *  RelationalOperator: '<S5>/Relational Operator'\r\n     */\r\n    DCDC_Buck_B.DataTypeConversion1 = (DCDC_Buck_B.Duty >= DCDC_Buck_B.Gain1);\r\n\r\n    /* Gain: '<S3>/Gain6' */\r\n    DCDC_Buck_B.Gain6 = 9.0 * DCDC_Buck_B.DataTypeConversion1;\r\n\r\n    /* Gain: '<S10>/Gain' incorporates:\r\n     *  Step: '<S2>/Step'\r\n     */\r\n    DCDC_Buck_B.Gain = (real_T)!(DCDC_Buck_M->Timing.t[0] < 0.05) * 9.0;\r\n\r\n    /* SimscapeInputBlock: '<S26>/INPUT_1_1_1' */\r\n    DCDC_Buck_B.INPUT_1_1_1[0] = DCDC_Buck_B.Gain;\r\n    DCDC_Buck_B.INPUT_1_1_1[1] = 0.0;\r\n    DCDC_Buck_B.INPUT_1_1_1[2] = 0.0;\r\n    DCDC_Buck_B.INPUT_1_1_1[3] = 0.0;\r\n\r\n    /* SimscapeInputBlock: '<S26>/INPUT_3_1_1' */\r\n    DCDC_Buck_B.INPUT_3_1_1[0] = DCDC_Buck_B.Gain6;\r\n    DCDC_Buck_B.INPUT_3_1_1[1] = 0.0;\r\n    DCDC_Buck_B.INPUT_3_1_1[2] = 0.0;\r\n    DCDC_Buck_B.INPUT_3_1_1[3] = 0.0;\r\n\r\n    /* SimscapeInputBlock: '<S26>/INPUT_2_1_1' */\r\n    DCDC_Buck_B.INPUT_2_1_1[0] = DCDC_Buck_B.Gain6;\r\n    DCDC_Buck_B.INPUT_2_1_1[1] = 0.0;\r\n    DCDC_Buck_B.INPUT_2_1_1[2] = 0.0;\r\n    DCDC_Buck_B.INPUT_2_1_1[3] = 0.0;\r\n\r\n    /* SimscapeInputBlock: '<S26>/INPUT_4_1_1' */\r\n    DCDC_Buck_B.INPUT_4_1_1[0] = DCDC_Buck_B.Gain6;\r\n    DCDC_Buck_B.INPUT_4_1_1[1] = 0.0;\r\n    DCDC_Buck_B.INPUT_4_1_1[2] = 0.0;\r\n    DCDC_Buck_B.INPUT_4_1_1[3] = 0.0;\r\n\r\n    /* SimscapeExecutionBlock: '<S26>/STATE_1' incorporates:\r\n     *  SimscapeExecutionBlock: '<S26>/OUTPUT_1_0'\r\n     */\r\n    simulationData = (NeslSimulationData *)DCDC_Buck_DW.STATE_1_SimData;\r\n    time = rtb_Gain4_tmp;\r\n    simulationData->mData->mTime.mN = 1;\r\n    simulationData->mData->mTime.mX = &time;\r\n    simulationData->mData->mContStates.mN = 31;\r\n    simulationData->mData->mContStates.mX =\r\n      &DCDC_Buck_X.DCDC_BuckDC_DC_Buck_PLANTDC_DC_[0];\r\n    simulationData->mData->mDiscStates.mN = 0;\r\n    simulationData->mData->mDiscStates.mX = &DCDC_Buck_DW.STATE_1_Discrete;\r\n    simulationData->mData->mModeVector.mN = 11;\r\n    simulationData->mData->mModeVector.mX = &DCDC_Buck_DW.STATE_1_Modes[0];\r\n    tmp = false;\r\n    simulationData->mData->mFoundZcEvents = tmp;\r\n    tmp = rtmIsMajorTimeStep(DCDC_Buck_M);\r\n    simulationData->mData->mIsMajorTimeStep = tmp;\r\n    tmp_0 = false;\r\n    simulationData->mData->mIsSolverAssertCheck = tmp_0;\r\n    simulationData->mData->mIsSolverCheckingCIC = false;\r\n    tmp_0 = rtsiIsSolverComputingJacobian(&DCDC_Buck_M->solverInfo);\r\n    simulationData->mData->mIsComputingJacobian = tmp_0;\r\n    simulationData->mData->mIsEvaluatingF0 = false;\r\n    simulationData->mData->mIsSolverRequestingReset = false;\r\n    simulationData->mData->mIsOkayToUpdateMode = tmp;\r\n    tmp_2[0] = 0;\r\n    tmp_1[0] = DCDC_Buck_B.INPUT_1_1_1[0];\r\n    tmp_1[1] = DCDC_Buck_B.INPUT_1_1_1[1];\r\n    tmp_1[2] = DCDC_Buck_B.INPUT_1_1_1[2];\r\n    tmp_1[3] = DCDC_Buck_B.INPUT_1_1_1[3];\r\n    tmp_2[1] = 4;\r\n    tmp_1[4] = DCDC_Buck_B.INPUT_3_1_1[0];\r\n    tmp_1[5] = DCDC_Buck_B.INPUT_3_1_1[1];\r\n    tmp_1[6] = DCDC_Buck_B.INPUT_3_1_1[2];\r\n    tmp_1[7] = DCDC_Buck_B.INPUT_3_1_1[3];\r\n    tmp_2[2] = 8;\r\n    tmp_1[8] = DCDC_Buck_B.INPUT_2_1_1[0];\r\n    tmp_1[9] = DCDC_Buck_B.INPUT_2_1_1[1];\r\n    tmp_1[10] = DCDC_Buck_B.INPUT_2_1_1[2];\r\n    tmp_1[11] = DCDC_Buck_B.INPUT_2_1_1[3];\r\n    tmp_2[3] = 12;\r\n    tmp_1[12] = DCDC_Buck_B.INPUT_4_1_1[0];\r\n    tmp_1[13] = DCDC_Buck_B.INPUT_4_1_1[1];\r\n    tmp_1[14] = DCDC_Buck_B.INPUT_4_1_1[2];\r\n    tmp_1[15] = DCDC_Buck_B.INPUT_4_1_1[3];\r\n    tmp_2[4] = 16;\r\n    simulationData->mData->mInputValues.mN = 16;\r\n    simulationData->mData->mInputValues.mX = &tmp_1[0];\r\n    simulationData->mData->mInputOffsets.mN = 5;\r\n    simulationData->mData->mInputOffsets.mX = &tmp_2[0];\r\n    simulationData->mData->mOutputs.mN = 42;\r\n    simulationData->mData->mOutputs.mX = &DCDC_Buck_B.STATE_1[0];\r\n    simulationData->mData->mSampleHits.mN = 0;\r\n    simulationData->mData->mSampleHits.mX = NULL;\r\n    simulationData->mData->mIsFundamentalSampleHit = false;\r\n    simulationData->mData->mTolerances.mN = 0;\r\n    simulationData->mData->mTolerances.mX = NULL;\r\n    simulationData->mData->mCstateHasChanged = false;\r\n    diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.STATE_1_DiagMgr;\r\n    diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n    rtb_Gain4 = ne_simulator_method((NeslSimulator *)\r\n      DCDC_Buck_DW.STATE_1_Simulator, NESL_SIM_OUTPUTS, simulationData,\r\n      diagnosticManager);\r\n    if (rtb_Gain4 != 0) {\r\n      tmp_0 = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n      if (tmp_0) {\r\n        char *msg;\r\n        msg = rtw_diagnostics_msg(diagnosticTree);\r\n        rtmSetErrorStatus(DCDC_Buck_M, msg);\r\n      }\r\n    }\r\n\r\n    /* SimscapeExecutionBlock: '<S26>/OUTPUT_1_0' */\r\n    simulationData = (NeslSimulationData *)DCDC_Buck_DW.OUTPUT_1_0_SimData;\r\n    time_0 = rtb_Gain4_tmp;\r\n    simulationData->mData->mTime.mN = 1;\r\n    simulationData->mData->mTime.mX = &time_0;\r\n    simulationData->mData->mContStates.mN = 0;\r\n    simulationData->mData->mContStates.mX = NULL;\r\n    simulationData->mData->mDiscStates.mN = 0;\r\n    simulationData->mData->mDiscStates.mX = &DCDC_Buck_DW.OUTPUT_1_0_Discrete;\r\n    simulationData->mData->mModeVector.mN = 0;\r\n    simulationData->mData->mModeVector.mX = &DCDC_Buck_DW.OUTPUT_1_0_Modes;\r\n    tmp_0 = false;\r\n    simulationData->mData->mFoundZcEvents = tmp_0;\r\n    simulationData->mData->mIsMajorTimeStep = tmp;\r\n    tmp_0 = false;\r\n    simulationData->mData->mIsSolverAssertCheck = tmp_0;\r\n    simulationData->mData->mIsSolverCheckingCIC = false;\r\n    simulationData->mData->mIsComputingJacobian = false;\r\n    simulationData->mData->mIsEvaluatingF0 = false;\r\n    simulationData->mData->mIsSolverRequestingReset = false;\r\n    simulationData->mData->mIsOkayToUpdateMode = tmp;\r\n    tmp_4[0] = 0;\r\n    tmp_3[0] = DCDC_Buck_B.INPUT_1_1_1[0];\r\n    tmp_3[1] = DCDC_Buck_B.INPUT_1_1_1[1];\r\n    tmp_3[2] = DCDC_Buck_B.INPUT_1_1_1[2];\r\n    tmp_3[3] = DCDC_Buck_B.INPUT_1_1_1[3];\r\n    tmp_4[1] = 4;\r\n    tmp_3[4] = DCDC_Buck_B.INPUT_3_1_1[0];\r\n    tmp_3[5] = DCDC_Buck_B.INPUT_3_1_1[1];\r\n    tmp_3[6] = DCDC_Buck_B.INPUT_3_1_1[2];\r\n    tmp_3[7] = DCDC_Buck_B.INPUT_3_1_1[3];\r\n    tmp_4[2] = 8;\r\n    tmp_3[8] = DCDC_Buck_B.INPUT_2_1_1[0];\r\n    tmp_3[9] = DCDC_Buck_B.INPUT_2_1_1[1];\r\n    tmp_3[10] = DCDC_Buck_B.INPUT_2_1_1[2];\r\n    tmp_3[11] = DCDC_Buck_B.INPUT_2_1_1[3];\r\n    tmp_4[3] = 12;\r\n    tmp_3[12] = DCDC_Buck_B.INPUT_4_1_1[0];\r\n    tmp_3[13] = DCDC_Buck_B.INPUT_4_1_1[1];\r\n    tmp_3[14] = DCDC_Buck_B.INPUT_4_1_1[2];\r\n    tmp_3[15] = DCDC_Buck_B.INPUT_4_1_1[3];\r\n    tmp_4[4] = 16;\r\n    memcpy(&tmp_3[16], &DCDC_Buck_B.STATE_1[0], 42U * sizeof(real_T));\r\n    tmp_4[5] = 58;\r\n    simulationData->mData->mInputValues.mN = 58;\r\n    simulationData->mData->mInputValues.mX = &tmp_3[0];\r\n    simulationData->mData->mInputOffsets.mN = 6;\r\n    simulationData->mData->mInputOffsets.mX = &tmp_4[0];\r\n    simulationData->mData->mOutputs.mN = 2;\r\n    simulationData->mData->mOutputs.mX = &rtb_OUTPUT_1_0[0];\r\n    simulationData->mData->mSampleHits.mN = 0;\r\n    simulationData->mData->mSampleHits.mX = NULL;\r\n    simulationData->mData->mIsFundamentalSampleHit = false;\r\n    simulationData->mData->mTolerances.mN = 0;\r\n    simulationData->mData->mTolerances.mX = NULL;\r\n    simulationData->mData->mCstateHasChanged = false;\r\n    diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.OUTPUT_1_0_DiagMgr;\r\n    diagnosticTree_0 = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n    rtb_Gain4 = ne_simulator_method((NeslSimulator *)\r\n      DCDC_Buck_DW.OUTPUT_1_0_Simulator, NESL_SIM_OUTPUTS, simulationData,\r\n      diagnosticManager);\r\n    if (rtb_Gain4 != 0) {\r\n      tmp = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n      if (tmp) {\r\n        char *msg_0;\r\n        msg_0 = rtw_diagnostics_msg(diagnosticTree_0);\r\n        rtmSetErrorStatus(DCDC_Buck_M, msg_0);\r\n      }\r\n    }\r\n\r\n    /* Gain: '<S1>/VoltageScaling' */\r\n    DCDC_Buck_B.VoltageScaling = 0.439 * rtb_OUTPUT_1_0[1];\r\n  }\r\n\r\n  if (rtmIsMajorTimeStep(DCDC_Buck_M)) {\r\n    NeslSimulationData *simulationData;\r\n    NeuDiagnosticManager *diagnosticManager;\r\n    NeuDiagnosticTree *diagnosticTree;\r\n    real_T tmp_1[16];\r\n    real_T time;\r\n    int32_T tmp_3;\r\n    int_T tmp_2[5];\r\n    boolean_T tmp;\r\n    boolean_T tmp_0;\r\n    if (rtmIsMajorTimeStep(DCDC_Buck_M)) {\r\n      /* Update for UnitDelay: '<S1>/Unit Delay' */\r\n      DCDC_Buck_DW.UnitDelay_DSTATE = DCDC_Buck_B.VoltageScaling;\r\n\r\n      /* Update for UnitDelay: '<S6>/Unit Delay1' */\r\n      DCDC_Buck_DW.UnitDelay1_DSTATE = rtb_RelationalOperator;\r\n\r\n      /* Update for UnitDelay: '<S6>/Unit Delay' */\r\n      DCDC_Buck_DW.UnitDelay_DSTATE_b = rtb_Subsystem_boundary_DTC3;\r\n\r\n      /* Update for UnitDelay: '<S4>/Unit Delay' incorporates:\r\n       *  Sum: '<S4>/Sum1'\r\n       */\r\n      DCDC_Buck_DW.UnitDelay_DSTATE_m = rtb_Sum1;\r\n    }\r\n\r\n    /* Update for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n    simulationData = (NeslSimulationData *)DCDC_Buck_DW.STATE_1_SimData;\r\n    time = DCDC_Buck_M->Timing.t[0];\r\n    simulationData->mData->mTime.mN = 1;\r\n    simulationData->mData->mTime.mX = &time;\r\n    simulationData->mData->mContStates.mN = 31;\r\n    simulationData->mData->mContStates.mX =\r\n      &DCDC_Buck_X.DCDC_BuckDC_DC_Buck_PLANTDC_DC_[0];\r\n    simulationData->mData->mDiscStates.mN = 0;\r\n    simulationData->mData->mDiscStates.mX = &DCDC_Buck_DW.STATE_1_Discrete;\r\n    simulationData->mData->mModeVector.mN = 11;\r\n    simulationData->mData->mModeVector.mX = &DCDC_Buck_DW.STATE_1_Modes[0];\r\n    tmp = false;\r\n    simulationData->mData->mFoundZcEvents = tmp;\r\n    tmp = rtmIsMajorTimeStep(DCDC_Buck_M);\r\n    simulationData->mData->mIsMajorTimeStep = tmp;\r\n    tmp_0 = false;\r\n    simulationData->mData->mIsSolverAssertCheck = tmp_0;\r\n    simulationData->mData->mIsSolverCheckingCIC = false;\r\n    tmp_0 = rtsiIsSolverComputingJacobian(&DCDC_Buck_M->solverInfo);\r\n    simulationData->mData->mIsComputingJacobian = tmp_0;\r\n    simulationData->mData->mIsEvaluatingF0 = false;\r\n    simulationData->mData->mIsSolverRequestingReset = false;\r\n    simulationData->mData->mIsOkayToUpdateMode = tmp;\r\n    tmp_2[0] = 0;\r\n    tmp_1[0] = DCDC_Buck_B.INPUT_1_1_1[0];\r\n    tmp_1[1] = DCDC_Buck_B.INPUT_1_1_1[1];\r\n    tmp_1[2] = DCDC_Buck_B.INPUT_1_1_1[2];\r\n    tmp_1[3] = DCDC_Buck_B.INPUT_1_1_1[3];\r\n    tmp_2[1] = 4;\r\n    tmp_1[4] = DCDC_Buck_B.INPUT_3_1_1[0];\r\n    tmp_1[5] = DCDC_Buck_B.INPUT_3_1_1[1];\r\n    tmp_1[6] = DCDC_Buck_B.INPUT_3_1_1[2];\r\n    tmp_1[7] = DCDC_Buck_B.INPUT_3_1_1[3];\r\n    tmp_2[2] = 8;\r\n    tmp_1[8] = DCDC_Buck_B.INPUT_2_1_1[0];\r\n    tmp_1[9] = DCDC_Buck_B.INPUT_2_1_1[1];\r\n    tmp_1[10] = DCDC_Buck_B.INPUT_2_1_1[2];\r\n    tmp_1[11] = DCDC_Buck_B.INPUT_2_1_1[3];\r\n    tmp_2[3] = 12;\r\n    tmp_1[12] = DCDC_Buck_B.INPUT_4_1_1[0];\r\n    tmp_1[13] = DCDC_Buck_B.INPUT_4_1_1[1];\r\n    tmp_1[14] = DCDC_Buck_B.INPUT_4_1_1[2];\r\n    tmp_1[15] = DCDC_Buck_B.INPUT_4_1_1[3];\r\n    tmp_2[4] = 16;\r\n    simulationData->mData->mInputValues.mN = 16;\r\n    simulationData->mData->mInputValues.mX = &tmp_1[0];\r\n    simulationData->mData->mInputOffsets.mN = 5;\r\n    simulationData->mData->mInputOffsets.mX = &tmp_2[0];\r\n    diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.STATE_1_DiagMgr;\r\n    diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n    tmp_3 = ne_simulator_method((NeslSimulator *)DCDC_Buck_DW.STATE_1_Simulator,\r\n      NESL_SIM_UPDATE, simulationData, diagnosticManager);\r\n    if (tmp_3 != 0) {\r\n      tmp = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n      if (tmp) {\r\n        char *msg;\r\n        msg = rtw_diagnostics_msg(diagnosticTree);\r\n        rtmSetErrorStatus(DCDC_Buck_M, msg);\r\n      }\r\n    }\r\n\r\n    /* End of Update for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  if (rtmIsMajorTimeStep(DCDC_Buck_M)) {\r\n    rt_ertODEUpdateContinuousStates(&DCDC_Buck_M->solverInfo);\r\n\r\n    /* Update absolute time for base rate */\r\n    /* The \"clockTick0\" counts the number of times the code of this task has\r\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n     * overflow during the application lifespan selected.\r\n     * Timer of this task consists of two 32 bit unsigned integers.\r\n     * The two integers represent the low bits Timing.clockTick0 and the high bits\r\n     * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\r\n     */\r\n    if (!(++DCDC_Buck_M->Timing.clockTick0)) {\r\n      ++DCDC_Buck_M->Timing.clockTickH0;\r\n    }\r\n\r\n    DCDC_Buck_M->Timing.t[0] = rtsiGetSolverStopTime(&DCDC_Buck_M->solverInfo);\r\n\r\n    {\r\n      /* Update absolute timer for sample time: [5.0E-6s, 0.0s] */\r\n      /* The \"clockTick1\" counts the number of times the code of this task has\r\n       * been executed. The resolution of this integer timer is 5.0E-6, which is the step size\r\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n       * application lifespan selected.\r\n       * Timer of this task consists of two 32 bit unsigned integers.\r\n       * The two integers represent the low bits Timing.clockTick1 and the high bits\r\n       * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.\r\n       */\r\n      DCDC_Buck_M->Timing.clockTick1++;\r\n      if (!DCDC_Buck_M->Timing.clockTick1) {\r\n        DCDC_Buck_M->Timing.clockTickH1++;\r\n      }\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n}\r\n\r\n/* Derivatives for root system: '<Root>' */\r\nvoid DCDC_Buck_derivatives(void)\r\n{\r\n  NeslSimulationData *simulationData;\r\n  NeuDiagnosticManager *diagnosticManager;\r\n  NeuDiagnosticTree *diagnosticTree;\r\n  XDot_DCDC_Buck_T *_rtXdot;\r\n  real_T tmp_1[16];\r\n  real_T time;\r\n  int32_T tmp_3;\r\n  int_T tmp_2[5];\r\n  boolean_T tmp;\r\n  boolean_T tmp_0;\r\n  _rtXdot = ((XDot_DCDC_Buck_T *) DCDC_Buck_M->derivs);\r\n\r\n  /* Derivatives for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n  simulationData = (NeslSimulationData *)DCDC_Buck_DW.STATE_1_SimData;\r\n  time = DCDC_Buck_M->Timing.t[0];\r\n  simulationData->mData->mTime.mN = 1;\r\n  simulationData->mData->mTime.mX = &time;\r\n  simulationData->mData->mContStates.mN = 31;\r\n  simulationData->mData->mContStates.mX =\r\n    &DCDC_Buck_X.DCDC_BuckDC_DC_Buck_PLANTDC_DC_[0];\r\n  simulationData->mData->mDiscStates.mN = 0;\r\n  simulationData->mData->mDiscStates.mX = &DCDC_Buck_DW.STATE_1_Discrete;\r\n  simulationData->mData->mModeVector.mN = 11;\r\n  simulationData->mData->mModeVector.mX = &DCDC_Buck_DW.STATE_1_Modes[0];\r\n  tmp = false;\r\n  simulationData->mData->mFoundZcEvents = tmp;\r\n  tmp = rtmIsMajorTimeStep(DCDC_Buck_M);\r\n  simulationData->mData->mIsMajorTimeStep = tmp;\r\n  tmp_0 = false;\r\n  simulationData->mData->mIsSolverAssertCheck = tmp_0;\r\n  simulationData->mData->mIsSolverCheckingCIC = false;\r\n  tmp_0 = rtsiIsSolverComputingJacobian(&DCDC_Buck_M->solverInfo);\r\n  simulationData->mData->mIsComputingJacobian = tmp_0;\r\n  simulationData->mData->mIsEvaluatingF0 = false;\r\n  simulationData->mData->mIsSolverRequestingReset = false;\r\n  simulationData->mData->mIsOkayToUpdateMode = tmp;\r\n  tmp_2[0] = 0;\r\n  tmp_1[0] = DCDC_Buck_B.INPUT_1_1_1[0];\r\n  tmp_1[1] = DCDC_Buck_B.INPUT_1_1_1[1];\r\n  tmp_1[2] = DCDC_Buck_B.INPUT_1_1_1[2];\r\n  tmp_1[3] = DCDC_Buck_B.INPUT_1_1_1[3];\r\n  tmp_2[1] = 4;\r\n  tmp_1[4] = DCDC_Buck_B.INPUT_3_1_1[0];\r\n  tmp_1[5] = DCDC_Buck_B.INPUT_3_1_1[1];\r\n  tmp_1[6] = DCDC_Buck_B.INPUT_3_1_1[2];\r\n  tmp_1[7] = DCDC_Buck_B.INPUT_3_1_1[3];\r\n  tmp_2[2] = 8;\r\n  tmp_1[8] = DCDC_Buck_B.INPUT_2_1_1[0];\r\n  tmp_1[9] = DCDC_Buck_B.INPUT_2_1_1[1];\r\n  tmp_1[10] = DCDC_Buck_B.INPUT_2_1_1[2];\r\n  tmp_1[11] = DCDC_Buck_B.INPUT_2_1_1[3];\r\n  tmp_2[3] = 12;\r\n  tmp_1[12] = DCDC_Buck_B.INPUT_4_1_1[0];\r\n  tmp_1[13] = DCDC_Buck_B.INPUT_4_1_1[1];\r\n  tmp_1[14] = DCDC_Buck_B.INPUT_4_1_1[2];\r\n  tmp_1[15] = DCDC_Buck_B.INPUT_4_1_1[3];\r\n  tmp_2[4] = 16;\r\n  simulationData->mData->mInputValues.mN = 16;\r\n  simulationData->mData->mInputValues.mX = &tmp_1[0];\r\n  simulationData->mData->mInputOffsets.mN = 5;\r\n  simulationData->mData->mInputOffsets.mX = &tmp_2[0];\r\n  simulationData->mData->mDx.mN = 31;\r\n  simulationData->mData->mDx.mX = &_rtXdot->DCDC_BuckDC_DC_Buck_PLANTDC_DC_[0];\r\n  diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.STATE_1_DiagMgr;\r\n  diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n  tmp_3 = ne_simulator_method((NeslSimulator *)DCDC_Buck_DW.STATE_1_Simulator,\r\n    NESL_SIM_DERIVATIVES, simulationData, diagnosticManager);\r\n  if (tmp_3 != 0) {\r\n    tmp = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n    if (tmp) {\r\n      char *msg;\r\n      msg = rtw_diagnostics_msg(diagnosticTree);\r\n      rtmSetErrorStatus(DCDC_Buck_M, msg);\r\n    }\r\n  }\r\n\r\n  /* End of Derivatives for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid DCDC_Buck_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)DCDC_Buck_M, 0,\r\n                sizeof(RT_MODEL_DCDC_Buck_T));\r\n\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&DCDC_Buck_M->solverInfo,\r\n                          &DCDC_Buck_M->Timing.simTimeStep);\r\n    rtsiSetTPtr(&DCDC_Buck_M->solverInfo, &rtmGetTPtr(DCDC_Buck_M));\r\n    rtsiSetStepSizePtr(&DCDC_Buck_M->solverInfo, &DCDC_Buck_M->Timing.stepSize0);\r\n    rtsiSetdXPtr(&DCDC_Buck_M->solverInfo, &DCDC_Buck_M->derivs);\r\n    rtsiSetContStatesPtr(&DCDC_Buck_M->solverInfo, (real_T **)\r\n                         &DCDC_Buck_M->contStates);\r\n    rtsiSetNumContStatesPtr(&DCDC_Buck_M->solverInfo,\r\n      &DCDC_Buck_M->Sizes.numContStates);\r\n    rtsiSetNumPeriodicContStatesPtr(&DCDC_Buck_M->solverInfo,\r\n      &DCDC_Buck_M->Sizes.numPeriodicContStates);\r\n    rtsiSetPeriodicContStateIndicesPtr(&DCDC_Buck_M->solverInfo,\r\n      &DCDC_Buck_M->periodicContStateIndices);\r\n    rtsiSetPeriodicContStateRangesPtr(&DCDC_Buck_M->solverInfo,\r\n      &DCDC_Buck_M->periodicContStateRanges);\r\n    rtsiSetErrorStatusPtr(&DCDC_Buck_M->solverInfo, (&rtmGetErrorStatus\r\n      (DCDC_Buck_M)));\r\n    rtsiSetSolverMassMatrixIr(&DCDC_Buck_M->solverInfo, DCDC_Buck_MassMatrix.ir);\r\n    rtsiSetSolverMassMatrixJc(&DCDC_Buck_M->solverInfo, DCDC_Buck_MassMatrix.jc);\r\n    rtsiSetSolverMassMatrixPr(&DCDC_Buck_M->solverInfo, DCDC_Buck_MassMatrix.pr);\r\n    rtsiSetRTModelPtr(&DCDC_Buck_M->solverInfo, DCDC_Buck_M);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&DCDC_Buck_M->solverInfo, MAJOR_TIME_STEP);\r\n  DCDC_Buck_M->intgData.x0 = DCDC_Buck_M->odeX0;\r\n  DCDC_Buck_M->intgData.f0 = DCDC_Buck_M->odeF0;\r\n  DCDC_Buck_M->intgData.x1start = DCDC_Buck_M->odeX1START;\r\n  DCDC_Buck_M->intgData.f1 = DCDC_Buck_M->odeF1;\r\n  DCDC_Buck_M->intgData.Delta = DCDC_Buck_M->odeDELTA;\r\n  DCDC_Buck_M->intgData.E = DCDC_Buck_M->odeE;\r\n  DCDC_Buck_M->intgData.fac = DCDC_Buck_M->odeFAC;\r\n\r\n  /* initialize */\r\n  {\r\n    int_T i;\r\n    real_T *f = DCDC_Buck_M->intgData.fac;\r\n    for (i = 0; i < (int_T)(sizeof(DCDC_Buck_M->odeFAC)/sizeof(real_T)); i++) {\r\n      f[i] = 1.5e-8;\r\n    }\r\n  }\r\n\r\n  DCDC_Buck_M->intgData.DFDX = DCDC_Buck_M->odeDFDX;\r\n  DCDC_Buck_M->intgData.W = DCDC_Buck_M->odeW;\r\n  DCDC_Buck_M->intgData.pivots = DCDC_Buck_M->odePIVOTS;\r\n  DCDC_Buck_M->intgData.xtmp = DCDC_Buck_M->odeXTMP;\r\n  DCDC_Buck_M->intgData.ztmp = DCDC_Buck_M->odeZTMP;\r\n  DCDC_Buck_M->intgData.M = DCDC_Buck_M->odeMASSMATRIX_M;\r\n  DCDC_Buck_M->intgData.isFirstStep = true;\r\n  rtsiSetSolverExtrapolationOrder(&DCDC_Buck_M->solverInfo, 4);\r\n  rtsiSetSolverNumberNewtonIterations(&DCDC_Buck_M->solverInfo, 1);\r\n  DCDC_Buck_M->contStates = ((X_DCDC_Buck_T *) &DCDC_Buck_X);\r\n  DCDC_Buck_M->massMatrixType = ((ssMatrixType)1);\r\n  DCDC_Buck_M->massMatrixNzMax = (13);\r\n  DCDC_Buck_M->massMatrixIr = (DCDC_Buck_MassMatrix.ir);\r\n  DCDC_Buck_M->massMatrixJc = (DCDC_Buck_MassMatrix.jc);\r\n  DCDC_Buck_M->massMatrixPr = (DCDC_Buck_MassMatrix.pr);\r\n  rtsiSetSolverMassMatrixType(&DCDC_Buck_M->solverInfo, (ssMatrixType)1);\r\n  rtsiSetSolverMassMatrixNzMax(&DCDC_Buck_M->solverInfo, 13);\r\n  rtsiSetSolverData(&DCDC_Buck_M->solverInfo, (void *)&DCDC_Buck_M->intgData);\r\n  rtsiSetSolverName(&DCDC_Buck_M->solverInfo,\"ode14x\");\r\n  rtmSetTPtr(DCDC_Buck_M, &DCDC_Buck_M->Timing.tArray[0]);\r\n  DCDC_Buck_M->Timing.stepSize0 = 5.0E-6;\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &DCDC_Buck_B), 0,\r\n                sizeof(B_DCDC_Buck_T));\r\n\r\n  /* states (continuous) */\r\n  {\r\n    (void) memset((void *)&DCDC_Buck_X, 0,\r\n                  sizeof(X_DCDC_Buck_T));\r\n  }\r\n\r\n  /* global mass matrix */\r\n  {\r\n    int_T *ir = DCDC_Buck_MassMatrix.ir;\r\n    int_T *jc = DCDC_Buck_MassMatrix.jc;\r\n    real_T *pr = DCDC_Buck_MassMatrix.pr;\r\n    (void) memset((void *)ir, 0,\r\n                  13*sizeof(int_T));\r\n    (void) memset((void *)jc, 0,\r\n                  (31+1)*sizeof(int_T));\r\n    (void) memset((void *)pr, 0,\r\n                  13*sizeof(real_T));\r\n  }\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&DCDC_Buck_DW, 0,\r\n                sizeof(DW_DCDC_Buck_T));\r\n\r\n  /* Root-level init GlobalMassMatrixPr offset */\r\n  {\r\n    DCDC_Buck_DW.STATE_1_MASS_MATRIX_PR = 0;/* '<S26>/STATE_1' */\r\n  }\r\n\r\n  {\r\n    NeModelParameters modelParameters;\r\n    NeModelParameters modelParameters_0;\r\n    NeslSimulationData *tmp_1;\r\n    NeslSimulator *tmp;\r\n    NeuDiagnosticManager *diagnosticManager;\r\n    NeuDiagnosticTree *diagnosticTree;\r\n    NeuDiagnosticTree *diagnosticTree_0;\r\n    real_T tmp_2;\r\n    int32_T tmp_3;\r\n    boolean_T tmp_0;\r\n\r\n    /* Start for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n    tmp = nesl_lease_simulator(\r\n      \"DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration_1\", 0, 0);\r\n    DCDC_Buck_DW.STATE_1_Simulator = (void *)tmp;\r\n    tmp_0 = pointer_is_null(DCDC_Buck_DW.STATE_1_Simulator);\r\n    if (tmp_0) {\r\n      DCDC_Buck_9d5357ce_1_gateway();\r\n      tmp = nesl_lease_simulator(\r\n        \"DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration_1\", 0, 0);\r\n      DCDC_Buck_DW.STATE_1_Simulator = (void *)tmp;\r\n    }\r\n\r\n    tmp_1 = nesl_create_simulation_data();\r\n    DCDC_Buck_DW.STATE_1_SimData = (void *)tmp_1;\r\n    diagnosticManager = rtw_create_diagnostics();\r\n    DCDC_Buck_DW.STATE_1_DiagMgr = (void *)diagnosticManager;\r\n    modelParameters.mSolverType = NE_SOLVER_TYPE_DAE;\r\n    modelParameters.mSolverTolerance = 0.001;\r\n    modelParameters.mVariableStepSolver = false;\r\n    modelParameters.mIsUsingODEN = false;\r\n    modelParameters.mFixedStepSize = 0.001;\r\n    modelParameters.mStartTime = 0.0;\r\n    modelParameters.mLoadInitialState = false;\r\n    modelParameters.mUseSimState = false;\r\n    modelParameters.mLinTrimCompile = false;\r\n    modelParameters.mLoggingMode = SSC_LOGGING_NONE;\r\n    modelParameters.mRTWModifiedTimeStamp = 6.32502036E+8;\r\n    modelParameters.mZcDisabled = false;\r\n    tmp_2 = 0.001;\r\n    modelParameters.mSolverTolerance = tmp_2;\r\n    tmp_2 = 5.0E-6;\r\n    modelParameters.mFixedStepSize = tmp_2;\r\n    tmp_0 = false;\r\n    modelParameters.mVariableStepSolver = tmp_0;\r\n    tmp_0 = false;\r\n    modelParameters.mIsUsingODEN = tmp_0;\r\n    modelParameters.mLoadInitialState = false;\r\n    modelParameters.mZcDisabled = true;\r\n    diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.STATE_1_DiagMgr;\r\n    diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n    tmp_3 = nesl_initialize_simulator((NeslSimulator *)\r\n      DCDC_Buck_DW.STATE_1_Simulator, &modelParameters, diagnosticManager);\r\n    if (tmp_3 != 0) {\r\n      tmp_0 = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n      if (tmp_0) {\r\n        char *msg;\r\n        msg = rtw_diagnostics_msg(diagnosticTree);\r\n        rtmSetErrorStatus(DCDC_Buck_M, msg);\r\n      }\r\n    }\r\n\r\n    /* End of Start for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n\r\n    /* Start for SimscapeExecutionBlock: '<S26>/OUTPUT_1_0' */\r\n    tmp = nesl_lease_simulator(\r\n      \"DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration_1\", 1, 0);\r\n    DCDC_Buck_DW.OUTPUT_1_0_Simulator = (void *)tmp;\r\n    tmp_0 = pointer_is_null(DCDC_Buck_DW.OUTPUT_1_0_Simulator);\r\n    if (tmp_0) {\r\n      DCDC_Buck_9d5357ce_1_gateway();\r\n      tmp = nesl_lease_simulator(\r\n        \"DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration_1\", 1, 0);\r\n      DCDC_Buck_DW.OUTPUT_1_0_Simulator = (void *)tmp;\r\n    }\r\n\r\n    tmp_1 = nesl_create_simulation_data();\r\n    DCDC_Buck_DW.OUTPUT_1_0_SimData = (void *)tmp_1;\r\n    diagnosticManager = rtw_create_diagnostics();\r\n    DCDC_Buck_DW.OUTPUT_1_0_DiagMgr = (void *)diagnosticManager;\r\n    modelParameters_0.mSolverType = NE_SOLVER_TYPE_DAE;\r\n    modelParameters_0.mSolverTolerance = 0.001;\r\n    modelParameters_0.mVariableStepSolver = false;\r\n    modelParameters_0.mIsUsingODEN = false;\r\n    modelParameters_0.mFixedStepSize = 0.001;\r\n    modelParameters_0.mStartTime = 0.0;\r\n    modelParameters_0.mLoadInitialState = false;\r\n    modelParameters_0.mUseSimState = false;\r\n    modelParameters_0.mLinTrimCompile = false;\r\n    modelParameters_0.mLoggingMode = SSC_LOGGING_NONE;\r\n    modelParameters_0.mRTWModifiedTimeStamp = 6.32502036E+8;\r\n    modelParameters_0.mZcDisabled = false;\r\n    tmp_2 = 0.001;\r\n    modelParameters_0.mSolverTolerance = tmp_2;\r\n    tmp_2 = 5.0E-6;\r\n    modelParameters_0.mFixedStepSize = tmp_2;\r\n    tmp_0 = false;\r\n    modelParameters_0.mVariableStepSolver = tmp_0;\r\n    tmp_0 = false;\r\n    modelParameters_0.mIsUsingODEN = tmp_0;\r\n    modelParameters_0.mLoadInitialState = false;\r\n    modelParameters_0.mZcDisabled = true;\r\n    diagnosticManager = (NeuDiagnosticManager *)DCDC_Buck_DW.OUTPUT_1_0_DiagMgr;\r\n    diagnosticTree_0 = neu_diagnostic_manager_get_initial_tree(diagnosticManager);\r\n    tmp_3 = nesl_initialize_simulator((NeslSimulator *)\r\n      DCDC_Buck_DW.OUTPUT_1_0_Simulator, &modelParameters_0, diagnosticManager);\r\n    if (tmp_3 != 0) {\r\n      tmp_0 = error_buffer_is_empty(rtmGetErrorStatus(DCDC_Buck_M));\r\n      if (tmp_0) {\r\n        char *msg_0;\r\n        msg_0 = rtw_diagnostics_msg(diagnosticTree_0);\r\n        rtmSetErrorStatus(DCDC_Buck_M, msg_0);\r\n      }\r\n    }\r\n\r\n    /* End of Start for SimscapeExecutionBlock: '<S26>/OUTPUT_1_0' */\r\n  }\r\n\r\n  {\r\n    boolean_T tmp;\r\n    boolean_T tmp_0;\r\n\r\n    /* InitializeConditions for UnitDelay: '<S1>/Unit Delay' */\r\n    DCDC_Buck_DW.UnitDelay_DSTATE = 0.0;\r\n\r\n    /* InitializeConditions for UnitDelay: '<S6>/Unit Delay1' */\r\n    DCDC_Buck_DW.UnitDelay1_DSTATE = false;\r\n\r\n    /* InitializeConditions for UnitDelay: '<S6>/Unit Delay' */\r\n    DCDC_Buck_DW.UnitDelay_DSTATE_b = 0.0;\r\n\r\n    /* InitializeConditions for UnitDelay: '<S4>/Unit Delay' */\r\n    DCDC_Buck_DW.UnitDelay_DSTATE_m = 0;\r\n\r\n    /* InitializeConditions for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n    tmp = false;\r\n    tmp_0 = false;\r\n    if (tmp_0 || tmp) {\r\n      int_T tmp_1;\r\n      int_T tmp_2;\r\n      int_T tmp_3;\r\n      int_T tmp_4;\r\n      int_T tmp_5;\r\n      int_T tmp_6;\r\n      tmp_1 = strcmp(rtsiGetSolverName(&DCDC_Buck_M->solverInfo), \"daessc\");\r\n      tmp_2 = strcmp(rtsiGetSolverName(&DCDC_Buck_M->solverInfo), \"ode14x\");\r\n      tmp_3 = strcmp(rtsiGetSolverName(&DCDC_Buck_M->solverInfo), \"ode15s\");\r\n      tmp_4 = strcmp(rtsiGetSolverName(&DCDC_Buck_M->solverInfo), \"ode1be\");\r\n      tmp_5 = strcmp(rtsiGetSolverName(&DCDC_Buck_M->solverInfo), \"ode23t\");\r\n      tmp_6 = strcmp(rtsiGetSolverName(&DCDC_Buck_M->solverInfo), \"odeN\");\r\n      if ((boolean_T)((tmp_1 != 0) & (tmp_2 != 0) & (tmp_3 != 0) & (tmp_4 != 0)\r\n                      & (tmp_5 != 0) & (tmp_6 != 0))) {\r\n        rtmSetErrorStatus(DCDC_Buck_M,\r\n                          \"Detected inconsistent solvers in the model reference hierarchy. Model built with ode14x requires one of {daessc, ode14x, ode15s, ode1be, ode23t, odeN} solvers to run. Use one of the required solvers in the top model.\");\r\n      }\r\n    }\r\n\r\n    /* End of InitializeConditions for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n\r\n    /* Root-level InitSystemMatrices */\r\n    {\r\n      static int_T modelMassMatrixIr[13] = { 2, 0, 7, 1, 12, 3, 4, 5, 6, 8, 9,\r\n        10, 11 };\r\n\r\n      static int_T modelMassMatrixJc[32] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\r\n        11, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\r\n        13, 13, 13 };\r\n\r\n      static real_T modelMassMatrixPr[13] = { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\r\n        1.0, 1.0, 1.0, 1.0, 1.0, 1.0 };\r\n\r\n      (void) memcpy(DCDC_Buck_MassMatrix.ir, modelMassMatrixIr,\r\n                    13*sizeof(int_T));\r\n      (void) memcpy(DCDC_Buck_MassMatrix.jc, modelMassMatrixJc,\r\n                    32*sizeof(int_T));\r\n      (void) memcpy(DCDC_Buck_MassMatrix.pr, modelMassMatrixPr,\r\n                    13*sizeof(real_T));\r\n    }\r\n  }\r\n}\r\n\r\n/* Model terminate function */\r\nvoid DCDC_Buck_terminate(void)\r\n{\r\n  /* Terminate for SimscapeExecutionBlock: '<S26>/STATE_1' */\r\n  neu_destroy_diagnostic_manager((NeuDiagnosticManager *)\r\n    DCDC_Buck_DW.STATE_1_DiagMgr);\r\n  nesl_destroy_simulation_data((NeslSimulationData *)\r\n    DCDC_Buck_DW.STATE_1_SimData);\r\n  nesl_erase_simulator(\"DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration_1\");\r\n  nesl_destroy_registry();\r\n\r\n  /* Terminate for SimscapeExecutionBlock: '<S26>/OUTPUT_1_0' */\r\n  neu_destroy_diagnostic_manager((NeuDiagnosticManager *)\r\n    DCDC_Buck_DW.OUTPUT_1_0_DiagMgr);\r\n  nesl_destroy_simulation_data((NeslSimulationData *)\r\n    DCDC_Buck_DW.OUTPUT_1_0_SimData);\r\n  nesl_erase_simulator(\"DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration_1\");\r\n  nesl_destroy_registry();\r\n}\r\n"},{"name":"DCDC_Buck.h","type":"header","group":"model","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * DCDC_Buck.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_DCDC_Buck_h_\r\n#define RTW_HEADER_DCDC_Buck_h_\r\n#include <string.h>\r\n#include <float.h>\r\n#include <math.h>\r\n#ifndef DCDC_Buck_COMMON_INCLUDES_\r\n#define DCDC_Buck_COMMON_INCLUDES_\r\n#include <IQmathLib.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#include \"nesl_rtw.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_gateway.h\"\r\n#endif                                 /* DCDC_Buck_COMMON_INCLUDES_ */\r\n\r\n#include \"DCDC_Buck_types.h\"\r\n\r\n/* Shared type includes */\r\n#include \"multiword_types.h\"\r\n#include \"rt_nonfinite.h\"\r\n#include \"math.h\"\r\n#include \"rt_matrixlib.h\"\r\n#include \"rtGetInf.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetContStateDisabled\r\n#define rtmGetContStateDisabled(rtm)   ((rtm)->contStateDisabled)\r\n#endif\r\n\r\n#ifndef rtmSetContStateDisabled\r\n#define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContStates\r\n#define rtmGetContStates(rtm)          ((rtm)->contStates)\r\n#endif\r\n\r\n#ifndef rtmSetContStates\r\n#define rtmSetContStates(rtm, val)     ((rtm)->contStates = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\r\n#endif\r\n\r\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\r\n#endif\r\n\r\n#ifndef rtmGetDerivCacheNeedsReset\r\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetDerivCacheNeedsReset\r\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetIntgData\r\n#define rtmGetIntgData(rtm)            ((rtm)->intgData)\r\n#endif\r\n\r\n#ifndef rtmSetIntgData\r\n#define rtmSetIntgData(rtm, val)       ((rtm)->intgData = (val))\r\n#endif\r\n\r\n#ifndef rtmGetMassMatrixIr\r\n#define rtmGetMassMatrixIr(rtm)        ((rtm)->massMatrixIr)\r\n#endif\r\n\r\n#ifndef rtmSetMassMatrixIr\r\n#define rtmSetMassMatrixIr(rtm, val)   ((rtm)->massMatrixIr = (val))\r\n#endif\r\n\r\n#ifndef rtmGetMassMatrixJc\r\n#define rtmGetMassMatrixJc(rtm)        ((rtm)->massMatrixJc)\r\n#endif\r\n\r\n#ifndef rtmSetMassMatrixJc\r\n#define rtmSetMassMatrixJc(rtm, val)   ((rtm)->massMatrixJc = (val))\r\n#endif\r\n\r\n#ifndef rtmGetMassMatrixNzMax\r\n#define rtmGetMassMatrixNzMax(rtm)     ((rtm)->massMatrixNzMax)\r\n#endif\r\n\r\n#ifndef rtmSetMassMatrixNzMax\r\n#define rtmSetMassMatrixNzMax(rtm, val) ((rtm)->massMatrixNzMax = (val))\r\n#endif\r\n\r\n#ifndef rtmGetMassMatrixPr\r\n#define rtmGetMassMatrixPr(rtm)        ((rtm)->massMatrixPr)\r\n#endif\r\n\r\n#ifndef rtmSetMassMatrixPr\r\n#define rtmSetMassMatrixPr(rtm, val)   ((rtm)->massMatrixPr = (val))\r\n#endif\r\n\r\n#ifndef rtmGetMassMatrixType\r\n#define rtmGetMassMatrixType(rtm)      ((rtm)->massMatrixType)\r\n#endif\r\n\r\n#ifndef rtmSetMassMatrixType\r\n#define rtmSetMassMatrixType(rtm, val) ((rtm)->massMatrixType = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeDELTA\r\n#define rtmGetOdeDELTA(rtm)            ((rtm)->odeDELTA)\r\n#endif\r\n\r\n#ifndef rtmSetOdeDELTA\r\n#define rtmSetOdeDELTA(rtm, val)       ((rtm)->odeDELTA = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeDFDX\r\n#define rtmGetOdeDFDX(rtm)             ((rtm)->odeDFDX)\r\n#endif\r\n\r\n#ifndef rtmSetOdeDFDX\r\n#define rtmSetOdeDFDX(rtm, val)        ((rtm)->odeDFDX = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeE\r\n#define rtmGetOdeE(rtm)                ((rtm)->odeE)\r\n#endif\r\n\r\n#ifndef rtmSetOdeE\r\n#define rtmSetOdeE(rtm, val)           ((rtm)->odeE = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeF0\r\n#define rtmGetOdeF0(rtm)               ((rtm)->odeF0)\r\n#endif\r\n\r\n#ifndef rtmSetOdeF0\r\n#define rtmSetOdeF0(rtm, val)          ((rtm)->odeF0 = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeF1\r\n#define rtmGetOdeF1(rtm)               ((rtm)->odeF1)\r\n#endif\r\n\r\n#ifndef rtmSetOdeF1\r\n#define rtmSetOdeF1(rtm, val)          ((rtm)->odeF1 = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeFAC\r\n#define rtmGetOdeFAC(rtm)              ((rtm)->odeFAC)\r\n#endif\r\n\r\n#ifndef rtmSetOdeFAC\r\n#define rtmSetOdeFAC(rtm, val)         ((rtm)->odeFAC = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeMASSMATRIX_M\r\n#define rtmGetOdeMASSMATRIX_M(rtm)     ((rtm)->odeMASSMATRIX_M)\r\n#endif\r\n\r\n#ifndef rtmSetOdeMASSMATRIX_M\r\n#define rtmSetOdeMASSMATRIX_M(rtm, val) ((rtm)->odeMASSMATRIX_M = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdePIVOTS\r\n#define rtmGetOdePIVOTS(rtm)           ((rtm)->odePIVOTS)\r\n#endif\r\n\r\n#ifndef rtmSetOdePIVOTS\r\n#define rtmSetOdePIVOTS(rtm, val)      ((rtm)->odePIVOTS = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeW\r\n#define rtmGetOdeW(rtm)                ((rtm)->odeW)\r\n#endif\r\n\r\n#ifndef rtmSetOdeW\r\n#define rtmSetOdeW(rtm, val)           ((rtm)->odeW = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeX0\r\n#define rtmGetOdeX0(rtm)               ((rtm)->odeX0)\r\n#endif\r\n\r\n#ifndef rtmSetOdeX0\r\n#define rtmSetOdeX0(rtm, val)          ((rtm)->odeX0 = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeX1START\r\n#define rtmGetOdeX1START(rtm)          ((rtm)->odeX1START)\r\n#endif\r\n\r\n#ifndef rtmSetOdeX1START\r\n#define rtmSetOdeX1START(rtm, val)     ((rtm)->odeX1START = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeXTMP\r\n#define rtmGetOdeXTMP(rtm)             ((rtm)->odeXTMP)\r\n#endif\r\n\r\n#ifndef rtmSetOdeXTMP\r\n#define rtmSetOdeXTMP(rtm, val)        ((rtm)->odeXTMP = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeZTMP\r\n#define rtmGetOdeZTMP(rtm)             ((rtm)->odeZTMP)\r\n#endif\r\n\r\n#ifndef rtmSetOdeZTMP\r\n#define rtmSetOdeZTMP(rtm, val)        ((rtm)->odeZTMP = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateIndices\r\n#define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateIndices\r\n#define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateRanges\r\n#define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateRanges\r\n#define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))\r\n#endif\r\n\r\n#ifndef rtmGetZCCacheNeedsReset\r\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetZCCacheNeedsReset\r\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetdX\r\n#define rtmGetdX(rtm)                  ((rtm)->derivs)\r\n#endif\r\n\r\n#ifndef rtmSetdX\r\n#define rtmSetdX(rtm, val)             ((rtm)->derivs = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T Duty;                         /* '<S5>/Inverse TBPRD' */\r\n  real_T Gain1;                        /* '<S9>/Gain1' */\r\n  real_T DataTypeConversion1;          /* '<S5>/Data Type Conversion1' */\r\n  real_T Gain6;                        /* '<S3>/Gain6' */\r\n  real_T Gain;                         /* '<S10>/Gain' */\r\n  real_T INPUT_1_1_1[4];               /* '<S26>/INPUT_1_1_1' */\r\n  real_T INPUT_3_1_1[4];               /* '<S26>/INPUT_3_1_1' */\r\n  real_T INPUT_2_1_1[4];               /* '<S26>/INPUT_2_1_1' */\r\n  real_T INPUT_4_1_1[4];               /* '<S26>/INPUT_4_1_1' */\r\n  real_T STATE_1[42];                  /* '<S26>/STATE_1' */\r\n  real_T VoltageScaling;               /* '<S1>/VoltageScaling' */\r\n} B_DCDC_Buck_T;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T UnitDelay_DSTATE;             /* '<S1>/Unit Delay' */\r\n  real_T UnitDelay_DSTATE_b;           /* '<S6>/Unit Delay' */\r\n  real_T INPUT_1_1_1_Discrete[2];      /* '<S26>/INPUT_1_1_1' */\r\n  real_T INPUT_3_1_1_Discrete[2];      /* '<S26>/INPUT_3_1_1' */\r\n  real_T INPUT_2_1_1_Discrete[2];      /* '<S26>/INPUT_2_1_1' */\r\n  real_T INPUT_4_1_1_Discrete[2];      /* '<S26>/INPUT_4_1_1' */\r\n  real_T STATE_1_Discrete;             /* '<S26>/STATE_1' */\r\n  real_T OUTPUT_1_0_Discrete;          /* '<S26>/OUTPUT_1_0' */\r\n  void* STATE_1_Simulator;             /* '<S26>/STATE_1' */\r\n  void* STATE_1_SimData;               /* '<S26>/STATE_1' */\r\n  void* STATE_1_DiagMgr;               /* '<S26>/STATE_1' */\r\n  void* STATE_1_ZcLogger;              /* '<S26>/STATE_1' */\r\n  void* STATE_1_TsIndex;               /* '<S26>/STATE_1' */\r\n  void* OUTPUT_1_0_Simulator;          /* '<S26>/OUTPUT_1_0' */\r\n  void* OUTPUT_1_0_SimData;            /* '<S26>/OUTPUT_1_0' */\r\n  void* OUTPUT_1_0_DiagMgr;            /* '<S26>/OUTPUT_1_0' */\r\n  void* OUTPUT_1_0_ZcLogger;           /* '<S26>/OUTPUT_1_0' */\r\n  void* OUTPUT_1_0_TsIndex;            /* '<S26>/OUTPUT_1_0' */\r\n  int32_T UnitDelay_DSTATE_m;          /* '<S4>/Unit Delay' */\r\n  int32_T IQNxIQN_FRAC_LEN;            /* '<S4>/IQN x IQN' */\r\n  int32_T IQNxIQN1_FRAC_LEN;           /* '<S4>/IQN x IQN1' */\r\n  int_T STATE_1_Modes[11];             /* '<S26>/STATE_1' */\r\n  int_T OUTPUT_1_0_Modes;              /* '<S26>/OUTPUT_1_0' */\r\n  int32_T STATE_1_MASS_MATRIX_PR;      /* '<S26>/STATE_1' */\r\n  boolean_T UnitDelay1_DSTATE;         /* '<S6>/Unit Delay1' */\r\n  boolean_T STATE_1_FirstOutput;       /* '<S26>/STATE_1' */\r\n  boolean_T OUTPUT_1_0_FirstOutput;    /* '<S26>/OUTPUT_1_0' */\r\n} DW_DCDC_Buck_T;\r\n\r\n/* Continuous states (default storage) */\r\ntypedef struct {\r\n  real_T DCDC_BuckDC_DC_Buck_PLANTDC_DC_[31];/* '<S26>/STATE_1' */\r\n} X_DCDC_Buck_T;\r\n\r\n/* State derivatives (default storage) */\r\ntypedef struct {\r\n  real_T DCDC_BuckDC_DC_Buck_PLANTDC_DC_[31];/* '<S26>/STATE_1' */\r\n} XDot_DCDC_Buck_T;\r\n\r\n/* State disabled  */\r\ntypedef struct {\r\n  boolean_T DCDC_BuckDC_DC_Buck_PLANTDC_DC_[31];/* '<S26>/STATE_1' */\r\n} XDis_DCDC_Buck_T;\r\n\r\n/* Mass Matrix (global) */\r\ntypedef struct {\r\n  int_T ir[13];\r\n  int_T jc[32];\r\n  real_T pr[13];\r\n} MassMatrix_DCDC_Buck_T;\r\n\r\n/* Invariant block signals (default storage) */\r\ntypedef struct {\r\n  const int32_T DataTypeConversion1;   /* '<S3>/Data Type Conversion1' */\r\n} ConstB_DCDC_Buck_T;\r\n\r\n#ifndef ODE14X_INTG\r\n#define ODE14X_INTG\r\n\r\n/* ODE14X Integration Data */\r\ntypedef struct {\r\n  real_T *x0;\r\n  real_T *f0;\r\n  real_T *x1start;\r\n  real_T *f1;\r\n  real_T *Delta;\r\n  real_T *E;\r\n  real_T *fac;\r\n  real_T *DFDX;\r\n  real_T *W;\r\n  int_T *pivots;\r\n  real_T *xtmp;\r\n  real_T *ztmp;\r\n  real_T *M;\r\n  real_T *M1;\r\n  real_T *Edot;\r\n  real_T *xdot;\r\n  real_T *fminusMxdot;\r\n  boolean_T isFirstStep;\r\n} ODE14X_IntgData;\r\n\r\n#endif\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_DCDC_Buck_T {\r\n  const char_T *errorStatus;\r\n  RTWSolverInfo solverInfo;\r\n  X_DCDC_Buck_T *contStates;\r\n  int_T *periodicContStateIndices;\r\n  real_T *periodicContStateRanges;\r\n  real_T *derivs;\r\n  boolean_T *contStateDisabled;\r\n  boolean_T zCCacheNeedsReset;\r\n  boolean_T derivCacheNeedsReset;\r\n  boolean_T CTOutputIncnstWithState;\r\n  int_T massMatrixType;\r\n  int_T massMatrixNzMax;\r\n  int_T *massMatrixIr;\r\n  int_T *massMatrixJc;\r\n  real_T *massMatrixPr;\r\n  real_T odeX0[31];\r\n  real_T odeF0[31];\r\n  real_T odeX1START[31];\r\n  real_T odeF1[31];\r\n  real_T odeDELTA[31];\r\n  real_T odeE[4*31];\r\n  real_T odeFAC[31];\r\n  real_T odeDFDX[31*31];\r\n  real_T odeW[31*31];\r\n  int_T odePIVOTS[31];\r\n  real_T odeXTMP[31];\r\n  real_T odeZTMP[31];\r\n  real_T odeMASSMATRIX_M[13];\r\n  ODE14X_IntgData intgData;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    int_T numContStates;\r\n    int_T numPeriodicContStates;\r\n    int_T numSampTimes;\r\n  } Sizes;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    uint32_T clockTickH0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    uint32_T clockTickH1;\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_DCDC_Buck_T DCDC_Buck_B;\r\n\r\n/* Continuous states (default storage) */\r\nextern X_DCDC_Buck_T DCDC_Buck_X;\r\n\r\n/* Block states (default storage) */\r\nextern DW_DCDC_Buck_T DCDC_Buck_DW;\r\n\r\n/* global MassMatrix */\r\nextern MassMatrix_DCDC_Buck_T DCDC_Buck_MassMatrix;\r\nextern const ConstB_DCDC_Buck_T DCDC_Buck_ConstB;/* constant block i/o */\r\n\r\n/* Model entry point functions */\r\nextern void DCDC_Buck_initialize(void);\r\nextern void DCDC_Buck_step(void);\r\nextern void DCDC_Buck_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_DCDC_Buck_T *const DCDC_Buck_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S9>/Scope' : Unused code path elimination\r\n * Block '<S16>/Gain' : Unused code path elimination\r\n * Block '<Root>/Scope' : Unused code path elimination\r\n * Block '<S4>/IQN x IQN1_boundary_DTC' : Eliminate redundant data type conversion\r\n * Block '<S4>/Subsystem_boundary_DTC1' : Eliminate redundant data type conversion\r\n * Block '<S3>/PerUnitConvRate' : Eliminated nontunable gain of 1\r\n * Block '<S3>/PerUnitConvRate1' : Eliminated nontunable gain of 1\r\n * Block '<S5>/Rate Transition' : Eliminated since input and output rates are identical\r\n * Block '<S1>/Rate Transition1' : Eliminated since input and output rates are identical\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'DCDC_Buck'\r\n * '<S1>'   : 'DCDC_Buck/Controller'\r\n * '<S2>'   : 'DCDC_Buck/DC//DC_Buck_PLANT'\r\n * '<S3>'   : 'DCDC_Buck/Controller/Controller'\r\n * '<S4>'   : 'DCDC_Buck/Controller/Controller/PI_Controller'\r\n * '<S5>'   : 'DCDC_Buck/Controller/Controller/Subsystem'\r\n * '<S6>'   : 'DCDC_Buck/Controller/Controller/PI_Controller/Subsystem'\r\n * '<S7>'   : 'DCDC_Buck/Controller/Controller/PI_Controller/Subsystem/Compare To Constant'\r\n * '<S8>'   : 'DCDC_Buck/Controller/Controller/PI_Controller/Subsystem/Compare To Constant1'\r\n * '<S9>'   : 'DCDC_Buck/Controller/Controller/Subsystem/Sawtooth_Generator'\r\n * '<S10>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/Active_Load'\r\n * '<S11>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck'\r\n * '<S12>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/PS-Simulink Converter'\r\n * '<S13>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'\r\n * '<S14>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/Simulink-PS Converter1'\r\n * '<S15>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/Simulink-PS Converter1/EVAL_KEY'\r\n * '<S16>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor'\r\n * '<S17>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS Converter'\r\n * '<S18>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS Converter1'\r\n * '<S19>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS Converter3'\r\n * '<S20>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/PS-Simulink Converter'\r\n * '<S21>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/PS-Simulink Converter/EVAL_KEY'\r\n * '<S22>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS Converter/EVAL_KEY'\r\n * '<S23>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS Converter1/EVAL_KEY'\r\n * '<S24>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS Converter3/EVAL_KEY'\r\n * '<S25>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/PS-Simulink Converter/EVAL_KEY'\r\n * '<S26>'  : 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration/EVAL_KEY'\r\n */\r\n#endif                                 /* RTW_HEADER_DCDC_Buck_h_ */\r\n"},{"name":"DCDC_Buck_private.h","type":"header","group":"model","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * DCDC_Buck_private.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_DCDC_Buck_private_h_\r\n#define RTW_HEADER_DCDC_Buck_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"multiword_types.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n#ifndef UCHAR_MAX\r\n#include <limits.h>\r\n#endif\r\n\r\n#if ( UCHAR_MAX != (0xFFU) ) || ( SCHAR_MAX != (0x7F) )\r\n#error Code was generated for compiler with different sized uchar/char. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( USHRT_MAX != (0xFFFFU) ) || ( SHRT_MAX != (0x7FFF) )\r\n#error Code was generated for compiler with different sized ushort/short. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( UINT_MAX != (0xFFFFFFFFU) ) || ( INT_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized uint/int. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n#if ( ULONG_MAX != (0xFFFFFFFFU) ) || ( LONG_MAX != (0x7FFFFFFF) )\r\n#error Code was generated for compiler with different sized ulong/long. \\\r\nConsider adjusting Test hardware word size settings on the \\\r\nHardware Implementation pane to match your compiler word sizes as \\\r\ndefined in limits.h of the compiler. Alternatively, you can \\\r\nselect the Test hardware is the same as production hardware option and \\\r\nselect the Enable portable word sizes option on the Code Generation > \\\r\nVerification pane for ERT based targets, which will disable the \\\r\npreprocessor word size checks.\r\n#endif\r\n\r\n/* Skipping ulong_long/long_long check: insufficient preprocessor integer range. */\r\nextern real_T rt_remd_snf(real_T u0, real_T u1);\r\n\r\n/* private model entry point functions */\r\nextern void DCDC_Buck_derivatives(void);\r\n\r\n#endif                                 /* RTW_HEADER_DCDC_Buck_private_h_ */\r\n"},{"name":"DCDC_Buck_types.h","type":"header","group":"model","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * DCDC_Buck_types.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_DCDC_Buck_types_h_\r\n#define RTW_HEADER_DCDC_Buck_types_h_\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_DCDC_Buck_T RT_MODEL_DCDC_Buck_T;\r\n\r\n#endif                                 /* RTW_HEADER_DCDC_Buck_types_h_ */\r\n"},{"name":"DCDC_Buck_data.c","type":"source","group":"data","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * DCDC_Buck_data.c\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"DCDC_Buck.h\"\r\n#include \"DCDC_Buck_private.h\"\r\n\r\n/* Invariant block signals (default storage) */\r\nconst ConstB_DCDC_Buck_T DCDC_Buck_ConstB = {\r\n  50331                                /* '<S3>/Data Type Conversion1' */\r\n};\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long long longlong_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rtGetInf.c","type":"source","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetInf.c\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n/*\r\n * Abstract:\r\n *      Function to initialize non-finite, Inf\r\n */\r\n#include \"rtGetInf.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    uint16_T one = 1U;\r\n    enum {\r\n      LittleEndian,\r\n      BigEndian\r\n    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n    switch (machByteOrder) {\r\n     case LittleEndian:\r\n      {\r\n        union {\r\n          LittleEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        inf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n\r\n     case BigEndian:\r\n      {\r\n        union {\r\n          BigEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        inf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    uint16_T one = 1U;\r\n    enum {\r\n      LittleEndian,\r\n      BigEndian\r\n    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n    switch (machByteOrder) {\r\n     case LittleEndian:\r\n      {\r\n        union {\r\n          LittleEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        minf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n\r\n     case BigEndian:\r\n      {\r\n        union {\r\n          BigEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        minf = tmpVal.fltVal;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetInf.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetInf_h_\r\n#define RTW_HEADER_rtGetInf_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n\r\nextern real_T rtGetInf(void);\r\nextern real32_T rtGetInfF(void);\r\nextern real_T rtGetMinusInf(void);\r\nextern real32_T rtGetMinusInfF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetInf_h_ */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetNaN.c\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n/*\r\n * Abstract:\r\n *      Function to initialize non-finite, NaN\r\n */\r\n#include \"rtGetNaN.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    uint16_T one = 1U;\r\n    enum {\r\n      LittleEndian,\r\n      BigEndian\r\n    } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n    switch (machByteOrder) {\r\n     case LittleEndian:\r\n      {\r\n        union {\r\n          LittleEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n        tmpVal.bitVal.words.wordL = 0x00000000U;\r\n        nan = tmpVal.fltVal;\r\n        break;\r\n      }\r\n\r\n     case BigEndian:\r\n      {\r\n        union {\r\n          BigEndianIEEEDouble bitVal;\r\n          real_T fltVal;\r\n        } tmpVal;\r\n\r\n        tmpVal.bitVal.words.wordH = 0x7FFFFFFFU;\r\n        tmpVal.bitVal.words.wordL = 0xFFFFFFFFU;\r\n        nan = tmpVal.fltVal;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  uint16_T one = 1U;\r\n  enum {\r\n    LittleEndian,\r\n    BigEndian\r\n  } machByteOrder = (*((uint8_T *) &one) == 1U) ? LittleEndian : BigEndian;\r\n  switch (machByteOrder) {\r\n   case LittleEndian:\r\n    {\r\n      nanF.wordL.wordLuint = 0xFFC00000U;\r\n      break;\r\n    }\r\n\r\n   case BigEndian:\r\n    {\r\n      nanF.wordL.wordLuint = 0x7FFFFFFFU;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return nanF.wordL.wordLreal;\r\n}\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtGetNaN.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtGetNaN_h_\r\n#define RTW_HEADER_rtGetNaN_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* RTW_HEADER_rtGetNaN_h_ */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rt_nonfinite.c\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n/*\r\n * Abstract:\r\n *      Function to initialize non-finites,\r\n *      (Inf, NaN and -Inf).\r\n */\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtGetNaN.h\"\r\n#include \"rtGetInf.h\"\r\n#define NumBitsPerChar                 8U\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nvoid rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rt_nonfinite.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rt_nonfinite_h_\r\n#define RTW_HEADER_rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern void rt_InitInfAndNaN(size_t realSize);\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\n#endif                                 /* RTW_HEADER_rt_nonfinite_h_ */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n#ifndef INT64_T\r\n#define INT64_T\r\n\r\ntypedef long long int64_T;\r\n\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#endif\r\n\r\n#ifndef UINT64_T\r\n#define UINT64_T\r\n\r\ntypedef unsigned long long uint64_T;\r\n\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n#endif\r\n\r\n/*===========================================================================*\r\n * Additional complex number type definitions                                           *\r\n *===========================================================================*/\r\n#ifndef CINT64_T\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#endif\r\n\r\n#ifndef CUINT64_T\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n *  rtmodel.h:\r\n *\r\n * Code generation for model \"DCDC_Buck\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Sat Mar 16 15:00:45 2024\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n\r\n/*\r\n *  Includes the appropriate headers when we are using rtModel\r\n */\r\n#include \"DCDC_Buck.h\"\r\n#define GRTINTERFACE                   0\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n"},{"name":"DCDC_Buck_9d5357ce_1.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_std.h\"\r\n#include \"pm_default_allocator.h\"\r\n#include \"ne_dae_fwd.h\"\r\n#include \"ne_profiler_fwd.h\"\r\n#include \"ne_dae_construct.h\"\r\n#include \"nesl_la.h\"\r\n#include \"DCDC_Buck_9d5357ce_1.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n\r\nvoid DCDC_Buck_9d5357ce_1_dae( NeDae **dae, const NeModelParameters *modelParams,\r\n  const NeSolverParameters *solverParams)\r\n{\r\n  PmAllocator *ne_allocator;\r\n  const McLinearAlgebraFactory *linear_algebra_ptr =\r\n    (solverParams->mLinearAlgebra == NE_FULL_LA) ?\r\n    get_rtw_linear_algebra() :\r\n    ((solverParams->mLinearAlgebra == NE_SPARSE_LA) ?\r\n     mc_get_csparse_linear_algebra() :\r\n     get_auto_linear_algebra());\r\n  NeRtpValues *rtpValues = NULL;\r\n  ne_allocator = pm_default_allocator();\r\n  ne_dae_create( dae,\r\n                DCDC_Buck_9d5357ce_1_dae_ds( ne_allocator ),\r\n                NULL,\r\n                FALSE,\r\n                rtpValues,\r\n                *solverParams,\r\n                *modelParams,\r\n                linear_algebra_ptr,\r\n                NULL,\r\n                NULL,\r\n                NULL,\r\n                ne_allocator,\r\n                DAEMON_CHOICE_NONE);\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#ifndef __DCDC_Buck_9d5357ce_1_h__\r\n#define __DCDC_Buck_9d5357ce_1_h__\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n  extern void DCDC_Buck_9d5357ce_1_dae( NeDae **dae, const NeModelParameters\r\n    *modelParams,\r\n    const NeSolverParameters *solverParams);\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n#endif                                 /* ifndef __DCDC_Buck_9d5357ce_1_h__ */\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds.c - body for module DCDC_Buck_9d5357ce_1_ds */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_zc.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_tdxy_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_dxy_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_exp.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_m_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_log.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_all.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_imax.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_act.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_imin.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_tdxf_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_a_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_il.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_a.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_dxf_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_dxf.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_mode.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_f.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_assert.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"ssc_ml_fun.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n\r\nstatic int32_T ds_m(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                    NeDsMethodOutput *out);\r\nstatic int32_T ds_vmm(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dxm_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dxm(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_ddm_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_ddm(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dum_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dum(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dtm_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dtm(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dpm_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dpm(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_b_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_b(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                    NeDsMethodOutput *out);\r\nstatic int32_T ds_c_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_c(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                    NeDsMethodOutput *out);\r\nstatic int32_T ds_vmf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_vpf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_vsf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_slf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_slf0(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_duf_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_duf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dtf_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dtf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_ddf_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_ddf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dpdxf_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dpdxf(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dwf_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dwf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_tduf_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dnf_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dnf(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dnf_v_x(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_cer(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dxcer(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dxcer_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_ic(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                     NeDsMethodOutput *out);\r\nstatic int32_T ds_icr(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_icr_im(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_icr_id(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_icr_il(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dxicr(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dxicr_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_ddicr(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_ddicr_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_tduicr_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_icrm_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_icrm(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_dxicrm_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dxicrm(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_ddicrm_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_ddicrm(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_mduy_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_mdxy_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_tduy_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_y(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                    NeDsMethodOutput *out);\r\nstatic int32_T ds_dxy(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_duy_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_duy(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_dty_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dty(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_cache_r(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_cache_i(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_update_r(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_update_i(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_update2_r(const NeDynamicSystem *ds, const\r\n  NeDynamicSystemInput *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_update2_i(const NeDynamicSystem *ds, const\r\n  NeDynamicSystemInput *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_lock_r(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_lock_i(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_lock2_r(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_lock2_i(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_sfo(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_sfp(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_init_r(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_init_i(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_passert(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_iassert(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_del_t(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_del_v(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_del_v0(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_del_tmax(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dxdelt_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dxdelt(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dudelt_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dudelt(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dtdelt_p(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dtdelt(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dp_l(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_dp_i(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_dp_j(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_dp_r(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_qx(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                     NeDsMethodOutput *out);\r\nstatic int32_T ds_qu(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                     NeDsMethodOutput *out);\r\nstatic int32_T ds_qt(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                     NeDsMethodOutput *out);\r\nstatic int32_T ds_q1(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                     NeDsMethodOutput *out);\r\nstatic int32_T ds_qx_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_qu_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_qt_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_q1_p(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_var_tol(const NeDynamicSystem *ds, const NeDynamicSystemInput *\r\n  in, NeDsMethodOutput *out);\r\nstatic int32_T ds_eq_tol(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_lv(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                     NeDsMethodOutput *out);\r\nstatic int32_T ds_slv(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                      NeDsMethodOutput *out);\r\nstatic int32_T ds_nldv(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_sclv(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n  NeDsMethodOutput *out);\r\nstatic int32_T ds_dimin(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic int32_T ds_dimax(const NeDynamicSystem *ds, const NeDynamicSystemInput\r\n  *in, NeDsMethodOutput *out);\r\nstatic NeDsMethodOutput *ds_output_m_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_m(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_vmm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dxm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_ddm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_ddm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dum_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dum(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dtm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dtm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dpm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dpm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_a_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_a(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_b_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_b(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_c_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_c(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_f(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_vmf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_vpf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_vsf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_slf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_slf0(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dxf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_duf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_duf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dtf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dtf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_ddf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_ddf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dpdxf_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_dpdxf(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dwf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dwf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_tduf_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_tdxf_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dnf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dnf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dnf_v_x(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_cer(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxcer(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dxcer_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_ic(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_icr(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_icr_im(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_icr_id(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_icr_il(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxicr(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dxicr_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_ddicr(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_ddicr_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_tduicr_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_icrm_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_icrm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxicrm_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxicrm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_ddicrm_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_ddicrm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_mduy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_mdxy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_tduy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_tdxy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_y(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxy_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dxy(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_duy_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_duy(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dty_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dty(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_mode(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_zc(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_cache_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_cache_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_update_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_update_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_update2_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_update2_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_lock_r(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_lock_i(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_lock2_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_lock2_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_sfo(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_sfp(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_init_r(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_init_i(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_log(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_assert(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_passert(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_iassert(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_del_t(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_del_v(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_del_v0(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_del_tmax(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxdelt_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_dxdelt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dudelt_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_dudelt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dtdelt_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_dtdelt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_obs_exp(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_obs_act(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_obs_all(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_obs_il(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dp_l(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dp_i(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dp_j(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dp_r(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_qx(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_qu(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_qt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_q1(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_qx_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_qu_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_qt_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_q1_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_var_tol(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator);\r\nstatic NeDsMethodOutput *ds_output_eq_tol(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_lv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_slv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_nldv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_sclv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_imin(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_imax(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator);\r\nstatic NeDsMethodOutput *ds_output_dimin(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic NeDsMethodOutput *ds_output_dimax(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator);\r\nstatic void release_reference(NeDynamicSystem *ds);\r\nstatic void get_reference(NeDynamicSystem *ds);\r\nstatic NeDynamicSystem *diagnostics(NeDynamicSystem *ds, boolean_T);\r\nstatic void expand(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                   PmRealVector *out, boolean_T kp);\r\nstatic void rtpmap(const NeDynamicSystem * ds, const PmIntVector* inl, const\r\n                   PmIntVector* ini, const PmIntVector* inj, const PmRealVector*\r\n                   inr, PmIntVector* outl, PmIntVector* outi, PmIntVector* outj,\r\n                   PmRealVector* outr);\r\nstatic NeEquationData s_equation_data[31] = { { \"\", 0U, 8,\r\n    NE_EQUATION_DOMAIN_TIME, \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U,\r\n    0U, TRUE, 1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 1U, TRUE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 2U, TRUE, 1.0, \"1\", }, {\r\n    \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 3U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 4U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 5U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 6U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 7U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 8U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 9U, TRUE, 1.0, \"1\", },\r\n    { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 10U, TRUE, 1.0, \"1\", },\r\n  { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 11U, TRUE, 1.0, \"1\", },\r\n  { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 2U, 12U, TRUE, 1.0, \"1\", }, {\r\n    \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 3U, 14U, TRUE, 1.0, \"1\", },\r\n  { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 3U, 17U, TRUE, 1.0, \"1\", },\r\n  { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 20U, TRUE, 1.0, \"1\", },\r\n  { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 21U, TRUE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 22U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 23U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 24U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 25U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 26U, TRUE,\r\n    1.0, \"1\", }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 5U, 27U, FALSE, 1.0, \"1\", },\r\n  { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 5U, 32U, FALSE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 5U, 37U, FALSE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 3U, 42U, TRUE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 3U, 45U, TRUE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 3U, 48U, TRUE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 3U, 51U, TRUE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 3U, 54U, TRUE, 1.0, \"1\",\r\n  }, { \"\", 0U, 8, NE_EQUATION_DOMAIN_TIME,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 3U, 57U, TRUE, 1.0, \"1\",\r\n  } };\r\n\r\nstatic NeCERData *s_cer_data = NULL;\r\nstatic NeICRData *s_icr_data = NULL;\r\nstatic NeVariableData s_variable_data[31] = { {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1.0, \"1\", 0.0, TRUE, FALSE, 1U,\r\n    1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1.0, \"1\", 0.0, TRUE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1.0, \"1\", 0.0,\r\n    TRUE, FALSE, 1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1.0, \"1\", 0.0, TRUE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.i_L\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1.0, \"1\", 0.0, TRUE, FALSE, 1U,\r\n    1U, NE_INIT_MODE_MANDATORY, \"Inductor current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1.0, \"1\", 0.0,\r\n    TRUE, FALSE, 1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1.0, \"1\", 0.0,\r\n    TRUE, FALSE, 1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1.0, \"1\", 0.0,\r\n    TRUE, FALSE, 1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1.0, \"1\", 0.0,\r\n    TRUE, FALSE, 1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1.0, \"1\", 0.0,\r\n    TRUE, FALSE, 1U, 1U, NE_INIT_MODE_MANDATORY, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.Cjunction.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1.0, \"1\", 0.0, TRUE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_NONE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.Cjunction.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1.0, \"1\", 0.0, TRUE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_NONE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.Cjunction.vc\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1.0, \"1\", 0.0, TRUE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_NONE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.D.v\", 0U, 1,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"i\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1.0, \"1\", 0.0, FALSE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1.0, \"1\", 0.0, FALSE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1.0, \"1\", 0.0,\r\n    FALSE, FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1.0, \"1\", 0.0,\r\n    FALSE, FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1.0, \"1\", 0.0, FALSE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.n.v\", 0U, 1,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1.0, \"1\", 0.0,\r\n    FALSE, FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1.0, \"1\", 0.0,\r\n    FALSE, FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.i_capacitor\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1.0, \"1\", 0.0, FALSE, FALSE,\r\n    1U, 1U, NE_INIT_MODE_NONE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"i\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.i_capacitor\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"i\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.i_capacitor\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.i\", 0U, 0,\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1.0, \"1\", 0.0, FALSE,\r\n    FALSE, 1U, 1U, NE_INIT_MODE_NONE, \"i\", } };\r\n\r\nstatic NeVariableData *s_discrete_data = NULL;\r\nstatic NeObservableData s_observable_data[278] = { {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.D.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"G\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.S.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.Tsim\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"K\", 1.0, \"K\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Tsim\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.i_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.i_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode current\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.v_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.ni.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode.v_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"PS\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"i\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.isOn\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"1\", 1.0, \"1\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"isOn\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"v\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Power dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.Simulink_PS_Converter1_output\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/Simulink-PS\\nConverter1\", 1U, 1U,\r\n    \"1\", 1.0, \"1\", NE_NOMINAL_SOURCE_FIXED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Simulink_PS_Converter1_output\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.x0.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Active_Load.x1.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 1U, \"kW\", 1.0e-6, \"kW\",\r\n    NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 1U, \"kW\", 1.0e-6,\r\n    \"kW\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 1U, \"kW\", 1.0e-6, \"kW\",\r\n    NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Conn1.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Conn2.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Conn3.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 1U, \"kW\",\r\n    1.0e-6, \"kW\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 1U, \"kW\",\r\n    1.0e-6, \"kW\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 1U, \"kW\",\r\n    1.0e-6, \"kW\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 1U, \"kW\",\r\n    1.0e-6, \"kW\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 1U, \"kW\",\r\n    1.0e-6, \"kW\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 1U, \"kW\",\r\n    1.0e-6, \"kW\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Conn0.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor\", 1U, 1U, \"V\", 1.0,\r\n    \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Conn1.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor\", 1U, 1U, \"V\", 1.0,\r\n    \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Electrical_Reference.V.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Electrical Reference\",\r\n    1U, 1U, \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE,\r\n    FALSE, NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Op_Amp.i1\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Op-Amp\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Input current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Op_Amp.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Op-Amp\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Op_Amp.out.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Op-Amp\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Op_Amp.outI\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Op-Amp\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current into output node\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Op_Amp.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Op-Amp\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Op_Amp.v1\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Op-Amp\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Input voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R10.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R10\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R10.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R10\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R10.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R10\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R10.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R10\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R10.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R10\", 1U, 1U,\r\n    \"A^2*Ohm\", 1.0e-6, \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE,\r\n    FALSE, FALSE, NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R11.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R11\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R11.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R11\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R11.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R11\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R11.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R11\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R11.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R11\", 1U, 1U,\r\n    \"A^2*Ohm\", 1.0e-6, \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE,\r\n    FALSE, FALSE, NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R22.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R22.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R22.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R22.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R22.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 1U,\r\n    \"A^2*Ohm\", 1.0e-6, \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE,\r\n    FALSE, FALSE, NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R8.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R8\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R8.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R8\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R8.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R8\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R8.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R8\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R8.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R8\", 1U, 1U,\r\n    \"A^2*Ohm\", 1.0e-6, \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE,\r\n    FALSE, FALSE, NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R9.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R9\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R9.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R9\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R9.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R9\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R9.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R9\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R9.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R9\", 1U, 1U,\r\n    \"A^2*Ohm\", 1.0e-6, \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE,\r\n    FALSE, FALSE, NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Voltage_Sensor.V\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Voltage Sensor\", 1U,\r\n    1U, \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"V\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Voltage_Sensor.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Voltage Sensor\", 1U,\r\n    1U, \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Voltage_Sensor.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/Voltage Sensor\", 1U,\r\n    1U, \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Voltage_Sensor_V\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/PS-Simulink\\nConverter\",\r\n    1U, 1U, \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE,\r\n    FALSE, NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage_Sensor_V\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.Cjunction.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.Cjunction.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.Cjunction.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.Cjunction.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.Cjunction.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.Tsim\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"K\", 1.0, \"K\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Tsim\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.i_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.i_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.v_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.ni.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.ohmicResistance.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.ohmicResistance.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.ohmicResistance.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.ohmicResistance.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.pi.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.v_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.Cjunction.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.Cjunction.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.Cjunction.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.Cjunction.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.Cjunction.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.Tsim\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"K\", 1.0, \"K\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Tsim\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.i_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.i_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.v_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.ni.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.ohmicResistance.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.ohmicResistance.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.ohmicResistance.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.ohmicResistance.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.pi.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.v_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.Cjunction.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.Cjunction.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.Cjunction.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.Cjunction.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.Cjunction.vc\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Capacitor voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.Tsim\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"K\", 1.0, \"K\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Tsim\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.i_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.i_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.v_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.ni.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.ohmicResistance.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.ohmicResistance.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.ohmicResistance.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.ohmicResistance.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.pi.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.v_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.i_L\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_MANDATORY, FALSE, TRUE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Inductor current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 1U, \"kW\", 1.0e-6, \"kW\",\r\n    NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.D.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"G\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.S.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.Tsim\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"K\", 1.0, \"K\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Tsim\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.i_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.i_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.v_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.ni.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode.v_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"PS\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"i\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.isOn\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"1\", 1.0, \"1\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"isOn\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"v\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Power dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.D.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"G\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.S.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.Tsim\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"K\", 1.0, \"K\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Tsim\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.i_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.i_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.v_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.ni.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode.v_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"PS\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"i\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.isOn\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"1\", 1.0, \"1\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"isOn\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"v\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Power dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.D.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"G\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.S.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.Tsim\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"K\", 1.0, \"K\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Tsim\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.i_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.i_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.v_diode\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Intrinsic diode voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.ni.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode.v_capacitor\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Junction capacitance voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.G\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"PS\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"i\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.isOn\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"1\", 1.0, \"1\",\r\n    NE_NOMINAL_SOURCE_DERIVED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"isOn\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"v\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 1U, \"W\", 1.0, \"kW\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Power dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.power_dissipated\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1U, 1U, \"A^2*Ohm\", 1.0e-6,\r\n    \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, FALSE, \"power_dissipated\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter1_output\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS\\nConverter1\", 1U, 1U,\r\n    \"1\", 1.0, \"1\", NE_NOMINAL_SOURCE_FIXED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Simulink_PS_Converter1_output\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter3_output\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS\\nConverter3\", 1U, 1U,\r\n    \"1\", 1.0, \"1\", NE_NOMINAL_SOURCE_FIXED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Simulink_PS_Converter3_output\", }, {\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter_output\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Simulink-PS\\nConverter\", 1U, 1U,\r\n    \"1\", 1.0, \"1\", NE_NOMINAL_SOURCE_FIXED, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Simulink_PS_Converter_output\", }, {\r\n    \"DC_DC_Buck_PLANT.Electrical_Reference.V.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Electrical Reference\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Output_Voltage.V\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Output Voltage\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"V\", }, {\r\n    \"DC_DC_Buck_PLANT.Output_Voltage.n.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Output Voltage\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Output_Voltage.p.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Output Voltage\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Output_Voltage_V\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PS-Simulink\\nConverter\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, FALSE, TRUE, \"Output_Voltage_V\", }, {\r\n    \"DC_DC_Buck_PLANT.PR1.i\", \"DCDC_Buck/DC//DC_Buck_PLANT/PR1\", 1U, 1U, \"A\",\r\n    1.0, \"A\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.PR1.n.v\", \"DCDC_Buck/DC//DC_Buck_PLANT/PR1\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.PR1.p.v\", \"DCDC_Buck/DC//DC_Buck_PLANT/PR1\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, { \"DC_DC_Buck_PLANT.PR1.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PR1\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.PR1.power_dissipated\", \"DCDC_Buck/DC//DC_Buck_PLANT/PR1\",\r\n    1U, 1U, \"A^2*Ohm\", 1.0e-6, \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE,\r\n    NE_INIT_MODE_NONE, FALSE, FALSE, NE_FREQTIME_TYPE_TIME, TRUE, FALSE,\r\n    \"power_dissipated\", }, { \"DC_DC_Buck_PLANT.PR2.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PR2\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.PR2.n.v\", \"DCDC_Buck/DC//DC_Buck_PLANT/PR2\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.PR2.p.v\", \"DCDC_Buck/DC//DC_Buck_PLANT/PR2\", 1U, 1U, \"V\",\r\n    1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, { \"DC_DC_Buck_PLANT.PR2.v\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PR2\", 1U, 1U, \"V\", 1.0, \"V\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.PR2.power_dissipated\", \"DCDC_Buck/DC//DC_Buck_PLANT/PR2\",\r\n    1U, 1U, \"A^2*Ohm\", 1.0e-6, \"A^2*Ohm\", NE_NOMINAL_SOURCE_NONE,\r\n    NE_INIT_MODE_NONE, FALSE, FALSE, NE_FREQTIME_TYPE_TIME, TRUE, FALSE,\r\n    \"power_dissipated\", }, { \"DC_DC_Buck_PLANT.Source.i\",\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Source\", 1U, 1U, \"A\", 1.0, \"A\",\r\n    NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, FALSE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Current\", }, {\r\n    \"DC_DC_Buck_PLANT.Source.n.v\", \"DCDC_Buck/DC//DC_Buck_PLANT/Source\", 1U, 1U,\r\n    \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Source.p.v\", \"DCDC_Buck/DC//DC_Buck_PLANT/Source\", 1U, 1U,\r\n    \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", }, {\r\n    \"DC_DC_Buck_PLANT.Source.v\", \"DCDC_Buck/DC//DC_Buck_PLANT/Source\", 1U, 1U,\r\n    \"V\", 1.0, \"V\", NE_NOMINAL_SOURCE_MODEL, NE_INIT_MODE_NONE, TRUE, FALSE,\r\n    NE_FREQTIME_TYPE_TIME, TRUE, TRUE, \"Voltage\", } };\r\n\r\nstatic NeModeData *s_major_mode_data = NULL;\r\nstatic NeZCData s_zc_data[11] = { {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 0U,\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U,\r\n    1U, \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U,\r\n    2U, \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U,\r\n    3U, \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U,\r\n    4U, \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U,\r\n    5U, \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U,\r\n    6U, \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U,\r\n    7U, \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U,\r\n    8U, \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U,\r\n    9U, \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    NE_ZC_TYPE_FALSE, }, { \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U,\r\n    10U, \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    NE_ZC_TYPE_FALSE, } };\r\n\r\nstatic NeRange s_range[11] = { {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, } };\r\n\r\nstatic NeAssertData s_assert_data[78] = { {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 0U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 1U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 2U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C2+C3\", 1U, 3U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C2C3.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 4U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 5U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 6U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C4+C5+C6\", 1U, 7U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C4C5C6.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 8U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 9U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 10U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/C8\", 1U, 11U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.C8.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 12U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 13U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 14U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C10\", 1U, 15U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C10.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 16U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 17U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 18U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C11\", 1U, 19U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C11.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 20U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 21U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 22U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C12\", 1U, 23U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C12.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 24U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 25U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 26U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C13\", 1U, 27U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C13.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 28U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 29U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 30U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C14\", 1U, 31U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C14.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 32U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 33U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 34U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/C22\", 1U, 35U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.C22.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R10\", 1U, 36U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R10.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R10\", 1U, 37U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R10.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R11\", 1U, 38U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R11.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R11\", 1U, 39U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R11.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 40U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R22.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R22\", 1U, 41U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R22.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R8\", 1U, 42U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R8.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R8\", 1U, 43U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R8.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R9\", 1U, 44U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R9.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Current_Sensor/R9\", 1U, 45U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.R9.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 46U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.ohmicResistance.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode\", 1U, 47U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode.private.ohmicResistance.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 48U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.ohmicResistance.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode1\", 1U, 49U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode1.private.ohmicResistance.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 50U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.ohmicResistance.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/Diode2\", 1U, 51U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Diode2.private.ohmicResistance.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 52U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 53U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 54U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/L1\", 1U, 55U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.L1.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1U, 56U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/R4\", 1U, 57U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.R4.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PR1\", 1U, 58U,\r\n    \"DC_DC_Buck_PLANT.PR1.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PR1\", 1U, 59U,\r\n    \"DC_DC_Buck_PLANT.PR1.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PR2\", 1U, 60U,\r\n    \"DC_DC_Buck_PLANT.PR2.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the exponent must be positive when the base is equal to zero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireExponentPositive\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/PR2\", 1U, 61U,\r\n    \"DC_DC_Buck_PLANT.PR2.power_dissipated\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    FALSE,\r\n    \"In power, the base must be nonnegative when the exponent is not an integer.\",\r\n    \"physmod:common:mf:expr:analyze:RequireBaseNonnegative\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 62U,\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 63U,\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 64U,\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Active_Load/MOSFET\", 1U, 65U,\r\n    \"DC_DC_Buck_PLANT.Active_Load.MOSFET.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 66U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 67U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 68U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET1\", 1U, 69U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET1.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 70U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 71U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 72U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET2\", 1U, 73U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET2.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 74U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 75U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 76U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.diode\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", }, {\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/DC//DC Buck/MOSFET3\", 1U, 77U,\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.MOSFET3.mosfet_equation\",\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    FALSE, \"In divide, the denominator must be nonzero.\",\r\n    \"physmod:common:mf:expr:analyze:RequireDenominatorNonzero\", } };\r\n\r\nstatic NeRange s_assert_range[78] = { {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 29U, 26U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 27U, 26U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 36U, 26U, 37U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    26U, 33U, 26U, 35U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    25U, 31U, 25U, 32U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    25U, 27U, 25U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    25U, 39U, 25U, 40U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    25U, 37U, 25U, 38U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 29U, 20U, 30U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/resistor.ssc\",\r\n    20U, 27U, 20U, 28U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, } };\r\n\r\nstatic NeAssertData *s_param_assert_data = NULL;\r\nstatic NeRange *s_param_assert_range = NULL;\r\nstatic NeAssertData *s_initial_assert_data = NULL;\r\nstatic NeRange *s_initial_assert_range = NULL;\r\nstatic NeRange s_equation_range[60] = { {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    36U, 5U, 36U, 25U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    34U, 5U, 34U, 23U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/inductor.ssc\",\r\n    34U, 20U, 34U, 27U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    35U, 5U, 35U, 18U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    35U, 5U, 35U, 18U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    35U, 5U, 35U, 18U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    35U, 5U, 35U, 18U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    35U, 5U, 35U, 18U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/+elements/capacitor.ssc\",\r\n    35U, 5U, 35U, 18U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/simscape/library/m/+foundation/+electrical/branch.ssc\",\r\n    23U, 5U, 23U, 19U, NE_RANGE_TYPE_NORMAL, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/diode_base.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, }, {\r\n    \"C:/Program Files/MATLAB/R2021b/toolbox/physmod/elec/library/m/+ee/+semiconductors/+mosfet_ideal/mosfet_equation.sscp\",\r\n    1U, 1U, 1U, 1U, NE_RANGE_TYPE_PROTECTED, } };\r\n\r\nstatic NeRange *s_cer_range = NULL;\r\nstatic NeRange *s_icr_range = NULL;\r\nstatic NeParameterData *s_logical_parameter_data = NULL;\r\nstatic NeParameterData *s_integer_parameter_data = NULL;\r\nstatic NeParameterData *s_index_parameter_data = NULL;\r\nstatic NeParameterData *s_real_parameter_data = NULL;\r\nstatic NeDsMethodOutput *ds_output_m_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mM_P.mNumCol = 31;\r\n  out->mM_P.mNumRow = 31;\r\n  out->mM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    13);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_m(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mM.mN = 13;\r\n  out->mM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 13);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_vmm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mVMM.mN = 13;\r\n  out->mVMM.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof(boolean_T),\r\n    13);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXM_P.mNumCol = 31;\r\n  out->mDXM_P.mNumRow = 13;\r\n  out->mDXM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mDXM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXM.mN = 0;\r\n  out->mDXM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDM_P.mNumCol = 0;\r\n  out->mDDM_P.mNumRow = 13;\r\n  out->mDDM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    1);\r\n  out->mDDM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDM.mN = 0;\r\n  out->mDDM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dum_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUM_P.mNumCol = 4;\r\n  out->mDUM_P.mNumRow = 13;\r\n  out->mDUM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mDUM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dum(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUM.mN = 0;\r\n  out->mDUM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dtm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTM_P.mNumCol = 1;\r\n  out->mDTM_P.mNumRow = 13;\r\n  out->mDTM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    2);\r\n  out->mDTM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dtm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTM.mN = 0;\r\n  out->mDTM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dpm_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDPM_P.mNumCol = 0;\r\n  out->mDPM_P.mNumRow = 13;\r\n  out->mDPM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    1);\r\n  out->mDPM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dpm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDPM.mN = 0;\r\n  out->mDPM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_a_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mA_P.mNumCol = 31;\r\n  out->mA_P.mNumRow = 31;\r\n  out->mA_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mA_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    83);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_a(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mA.mN = 83;\r\n  out->mA.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 83);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_b_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mB_P.mNumCol = 4;\r\n  out->mB_P.mNumRow = 31;\r\n  out->mB_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mB_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_b(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mB.mN = 0;\r\n  out->mB.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_c_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mC_P.mNumCol = 1;\r\n  out->mC_P.mNumRow = 31;\r\n  out->mC_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    2);\r\n  out->mC_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_c(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mC.mN = 0;\r\n  out->mC.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_f(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mF.mN = 31;\r\n  out->mF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_vmf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mVMF.mN = 31;\r\n  out->mVMF.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof(boolean_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_vpf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mVPF.mN = 31;\r\n  out->mVPF.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof(boolean_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_vsf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mVSF.mN = 31;\r\n  out->mVSF.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof(boolean_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_slf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mSLF.mN = 31;\r\n  out->mSLF.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof(boolean_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_slf0(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mSLF0.mN = 31;\r\n  out->mSLF0.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXF_P.mNumCol = 31;\r\n  out->mDXF_P.mNumRow = 31;\r\n  out->mDXF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mDXF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    37);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXF.mN = 37;\r\n  out->mDXF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 37);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_duf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUF_P.mNumCol = 4;\r\n  out->mDUF_P.mNumRow = 31;\r\n  out->mDUF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mDUF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_duf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUF.mN = 0;\r\n  out->mDUF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dtf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTF_P.mNumCol = 1;\r\n  out->mDTF_P.mNumRow = 31;\r\n  out->mDTF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    2);\r\n  out->mDTF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dtf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTF.mN = 0;\r\n  out->mDTF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDF_P.mNumCol = 0;\r\n  out->mDDF_P.mNumRow = 31;\r\n  out->mDDF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    1);\r\n  out->mDDF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDF.mN = 0;\r\n  out->mDDF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dpdxf_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDPDXF_P.mNumCol = 0;\r\n  out->mDPDXF_P.mNumRow = 37;\r\n  out->mDPDXF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 1);\r\n  out->mDPDXF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dpdxf(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDPDXF.mN = 0;\r\n  out->mDPDXF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dwf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDWF_P.mNumCol = 0;\r\n  out->mDWF_P.mNumRow = 31;\r\n  out->mDWF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    1);\r\n  out->mDWF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dwf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDWF.mN = 0;\r\n  out->mDWF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_tduf_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mTDUF_P.mNumCol = 4;\r\n  out->mTDUF_P.mNumRow = 31;\r\n  out->mTDUF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mTDUF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    4);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_tdxf_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mTDXF_P.mNumCol = 31;\r\n  out->mTDXF_P.mNumRow = 31;\r\n  out->mTDXF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mTDXF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    120);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dnf_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDNF_P.mNumCol = 32;\r\n  out->mDNF_P.mNumRow = 31;\r\n  out->mDNF_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    33);\r\n  out->mDNF_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dnf(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDNF.mN = 0;\r\n  out->mDNF.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dnf_v_x(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDNF_V_X.mN = 31;\r\n  out->mDNF_V_X.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_cer(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mCER.mN = 0;\r\n  out->mCER.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxcer(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXCER.mN = 0;\r\n  out->mDXCER.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxcer_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXCER_P.mNumCol = 31;\r\n  out->mDXCER_P.mNumRow = 0;\r\n  out->mDXCER_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 32);\r\n  out->mDXCER_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ic(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mIC.mN = 31;\r\n  out->mIC.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_icr(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mICR.mN = 0;\r\n  out->mICR.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_icr_im(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mICR_IM.mN = 0;\r\n  out->mICR_IM.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_icr_id(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mICR_ID.mN = 0;\r\n  out->mICR_ID.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_icr_il(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mICR_IL.mN = 0;\r\n  out->mICR_IL.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxicr(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXICR.mN = 0;\r\n  out->mDXICR.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxicr_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXICR_P.mNumCol = 31;\r\n  out->mDXICR_P.mNumRow = 0;\r\n  out->mDXICR_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 32);\r\n  out->mDXICR_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddicr(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDICR.mN = 0;\r\n  out->mDDICR.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddicr_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDICR_P.mNumCol = 0;\r\n  out->mDDICR_P.mNumRow = 0;\r\n  out->mDDICR_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 1);\r\n  out->mDDICR_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_tduicr_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mTDUICR_P.mNumCol = 4;\r\n  out->mTDUICR_P.mNumRow = 0;\r\n  out->mTDUICR_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 5);\r\n  out->mTDUICR_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_icrm_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mICRM_P.mNumCol = 31;\r\n  out->mICRM_P.mNumRow = 0;\r\n  out->mICRM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mICRM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_icrm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mICRM.mN = 0;\r\n  out->mICRM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxicrm_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXICRM_P.mNumCol = 31;\r\n  out->mDXICRM_P.mNumRow = 0;\r\n  out->mDXICRM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 32);\r\n  out->mDXICRM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxicrm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXICRM.mN = 0;\r\n  out->mDXICRM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddicrm_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDICRM_P.mNumCol = 0;\r\n  out->mDDICRM_P.mNumRow = 0;\r\n  out->mDDICRM_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 1);\r\n  out->mDDICRM_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_ddicrm(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDDICRM.mN = 0;\r\n  out->mDDICRM.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_mduy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mMDUY_P.mNumCol = 4;\r\n  out->mMDUY_P.mNumRow = 2;\r\n  out->mMDUY_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mMDUY_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_mdxy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mMDXY_P.mNumCol = 31;\r\n  out->mMDXY_P.mNumRow = 2;\r\n  out->mMDXY_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mMDXY_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_tduy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mTDUY_P.mNumCol = 4;\r\n  out->mTDUY_P.mNumRow = 2;\r\n  out->mTDUY_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mTDUY_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_tdxy_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mTDXY_P.mNumCol = 31;\r\n  out->mTDXY_P.mNumRow = 2;\r\n  out->mTDXY_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mTDXY_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    4);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_y(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mY.mN = 2;\r\n  out->mY.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 2);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxy_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXY_P.mNumCol = 31;\r\n  out->mDXY_P.mNumRow = 2;\r\n  out->mDXY_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mDXY_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    4);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxy(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXY.mN = 4;\r\n  out->mDXY.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 4);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_duy_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUY_P.mNumCol = 4;\r\n  out->mDUY_P.mNumRow = 2;\r\n  out->mDUY_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mDUY_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_duy(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUY.mN = 0;\r\n  out->mDUY.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dty_p(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTY_P.mNumCol = 1;\r\n  out->mDTY_P.mNumRow = 2;\r\n  out->mDTY_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    2);\r\n  out->mDTY_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dty(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTY.mN = 0;\r\n  out->mDTY.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_mode(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mMODE.mN = 11;\r\n  out->mMODE.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    11);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_zc(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mZC.mN = 11;\r\n  out->mZC.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 11);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_cache_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mCACHE_R.mN = 0;\r\n  out->mCACHE_R.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_cache_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mCACHE_I.mN = 0;\r\n  out->mCACHE_I.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_update_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mUPDATE_R.mN = 0;\r\n  out->mUPDATE_R.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_update_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mUPDATE_I.mN = 0;\r\n  out->mUPDATE_I.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_update2_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mUPDATE2_R.mN = 0;\r\n  out->mUPDATE2_R.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_update2_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mUPDATE2_I.mN = 0;\r\n  out->mUPDATE2_I.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_lock_r(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mLOCK_R.mN = 0;\r\n  out->mLOCK_R.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_lock_i(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mLOCK_I.mN = 0;\r\n  out->mLOCK_I.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_lock2_r(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mLOCK2_R.mN = 0;\r\n  out->mLOCK2_R.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_lock2_i(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mLOCK2_I.mN = 0;\r\n  out->mLOCK2_I.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_sfo(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mSFO.mN = 0;\r\n  out->mSFO.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_sfp(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mSFP.mN = 0;\r\n  out->mSFP.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_init_r(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mINIT_R.mN = 0;\r\n  out->mINIT_R.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_init_i(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mINIT_I.mN = 0;\r\n  out->mINIT_I.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_log(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mLOG.mN = 208;\r\n  out->mLOG.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 208);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_assert(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mASSERT.mN = 78;\r\n  out->mASSERT.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    78);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_passert(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mPASSERT.mN = 0;\r\n  out->mPASSERT.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_iassert(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mIASSERT.mN = 0;\r\n  out->mIASSERT.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_del_t(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDEL_T.mN = 0;\r\n  out->mDEL_T.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_del_v(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDEL_V.mN = 0;\r\n  out->mDEL_V.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_del_v0(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDEL_V0.mN = 0;\r\n  out->mDEL_V0.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_del_tmax(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDEL_TMAX.mN = 0;\r\n  out->mDEL_TMAX.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxdelt_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXDELT_P.mNumCol = 31;\r\n  out->mDXDELT_P.mNumRow = 0;\r\n  out->mDXDELT_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 32);\r\n  out->mDXDELT_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dxdelt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDXDELT.mN = 0;\r\n  out->mDXDELT.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dudelt_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUDELT_P.mNumCol = 4;\r\n  out->mDUDELT_P.mNumRow = 0;\r\n  out->mDUDELT_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 5);\r\n  out->mDUDELT_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dudelt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDUDELT.mN = 0;\r\n  out->mDUDELT.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dtdelt_p(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTDELT_P.mNumCol = 1;\r\n  out->mDTDELT_P.mNumRow = 0;\r\n  out->mDTDELT_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 2);\r\n  out->mDTDELT_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (int32_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dtdelt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDTDELT.mN = 0;\r\n  out->mDTDELT.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_obs_exp(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mOBS_EXP.mN = 260;\r\n  out->mOBS_EXP.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    260);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_obs_act(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mOBS_ACT.mN = 260;\r\n  out->mOBS_ACT.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    260);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_obs_all(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mOBS_ALL.mN = 260;\r\n  out->mOBS_ALL.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    260);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_obs_il(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mOBS_IL.mN = 260;\r\n  out->mOBS_IL.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 260);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dp_l(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDP_L.mN = 0;\r\n  out->mDP_L.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dp_i(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDP_I.mN = 0;\r\n  out->mDP_I.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dp_j(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDP_J.mN = 0;\r\n  out->mDP_J.mX = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dp_r(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDP_R.mN = 0;\r\n  out->mDP_R.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_qx(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQX.mN = 0;\r\n  out->mQX.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_qu(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQU.mN = 0;\r\n  out->mQU.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_qt(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQT.mN = 0;\r\n  out->mQT.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_q1(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQ1.mN = 0;\r\n  out->mQ1.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_qx_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQX_P.mNumCol = 31;\r\n  out->mQX_P.mNumRow = 31;\r\n  out->mQX_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    32);\r\n  out->mQX_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_qu_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQU_P.mNumCol = 4;\r\n  out->mQU_P.mNumRow = 31;\r\n  out->mQU_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    5);\r\n  out->mQU_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_qt_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQT_P.mNumCol = 1;\r\n  out->mQT_P.mNumRow = 31;\r\n  out->mQT_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    2);\r\n  out->mQT_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_q1_p(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mQ1_P.mNumCol = 1;\r\n  out->mQ1_P.mNumRow = 31;\r\n  out->mQ1_P.mJc = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    2);\r\n  out->mQ1_P.mIr = (int32_T *) allocator->mCallocFcn(allocator, sizeof(int32_T),\r\n    0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_var_tol(const NeDynamicSystem *ds,\r\n  PmAllocator *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mVAR_TOL.mN = 31;\r\n  out->mVAR_TOL.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_eq_tol(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mEQ_TOL.mN = 31;\r\n  out->mEQ_TOL.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_lv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mLV.mN = 31;\r\n  out->mLV.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof(boolean_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_slv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mSLV.mN = 31;\r\n  out->mSLV.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof(boolean_T),\r\n    31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_nldv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mNLDV.mN = 31;\r\n  out->mNLDV.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_sclv(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mSCLV.mN = 31;\r\n  out->mSCLV.mX = (boolean_T *) allocator->mCallocFcn(allocator, sizeof\r\n    (boolean_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_imin(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mIMIN.mN = 31;\r\n  out->mIMIN.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_imax(const NeDynamicSystem *ds, PmAllocator\r\n  *allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mIMAX.mN = 31;\r\n  out->mIMAX.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 31);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dimin(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDIMIN.mN = 0;\r\n  out->mDIMIN.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic NeDsMethodOutput *ds_output_dimax(const NeDynamicSystem *ds, PmAllocator *\r\n  allocator)\r\n{\r\n  NeDsMethodOutput *out;\r\n  (void)ds;\r\n  out = (NeDsMethodOutput *) allocator->mCallocFcn(allocator, sizeof\r\n    (NeDsMethodOutput), 1);\r\n  out->mDIMAX.mN = 0;\r\n  out->mDIMAX.mX = (real_T *) allocator->mCallocFcn(allocator, sizeof(real_T), 0);\r\n  return out;\r\n}\r\n\r\nstatic void release_reference(NeDynamicSystem *ds)\r\n{\r\n  _NeDynamicSystem *_ds;\r\n  _ds = (_NeDynamicSystem *)ds;\r\n  if (--_ds->mRefCnt == 0) {\r\n    _ds->mAlloc.mFreeFcn(&_ds->mAlloc, _ds);\r\n  }\r\n}\r\n\r\nstatic void get_reference(NeDynamicSystem *ds)\r\n{\r\n  _NeDynamicSystem *_ds;\r\n  _ds = (_NeDynamicSystem *)ds;\r\n  ++_ds->mRefCnt;\r\n}\r\n\r\nstatic NeDynamicSystem *diagnostics(NeDynamicSystem *ds, boolean_T kp)\r\n{\r\n  _NeDynamicSystem *_ds = (_NeDynamicSystem *)ds;\r\n  (void) kp;\r\n  ne_ds_get_reference(&_ds->mBase);\r\n  return &_ds->mBase;\r\n}\r\n\r\nstatic void expand(const NeDynamicSystem *ds, const NeDynamicSystemInput *in,\r\n                   PmRealVector *out, boolean_T kp)\r\n{\r\n  (void)ds;\r\n  (void)kp;\r\n  memcpy(out->mX, in->mX.mX, sizeof(real_T)*out->mN);\r\n}\r\n\r\nstatic void rtpmap(const NeDynamicSystem * ds, const PmIntVector* inl, const\r\n                   PmIntVector* ini, const PmIntVector* inj, const PmRealVector*\r\n                   inr, PmIntVector* outl, PmIntVector* outi, PmIntVector* outj,\r\n                   PmRealVector* outr)\r\n{\r\n  (void)ds;\r\n  memcpy(outl->mX, inl->mX, sizeof(int32_T)*inl->mN);\r\n  memcpy(outi->mX, ini->mX, sizeof(int32_T)*ini->mN);\r\n  memcpy(outj->mX, inj->mX, sizeof(int32_T)*inj->mN);\r\n  memcpy(outr->mX, inr->mX, sizeof(real_T)*inr->mN);\r\n}\r\n\r\nNeDynamicSystem *DCDC_Buck_9d5357ce_1_dae_ds(PmAllocator *allocator)\r\n{\r\n  NeDynamicSystem *ds;\r\n  _NeDynamicSystem *_ds;\r\n  static NeDsIoInfo input_info[4];\r\n  static NeDsIoInfo output_info[2];\r\n\r\n  /* allocate dynamic system data and extended data */\r\n  _ds = (_NeDynamicSystem *)allocator->mCallocFcn( allocator, sizeof\r\n    (_NeDynamicSystem), 1);\r\n  _ds->mAlloc = *allocator;\r\n  _ds->mRefCnt = 1;\r\n  ds = &_ds->mBase;\r\n\r\n  /* setup sizes */\r\n  ds->mNumVariables = 31;\r\n  ds->mNumDiscreteRealVariables = 0;\r\n  ds->mNumDifferentialVariables = 13;\r\n  ds->mNumEquations = 31;\r\n  ds->mNumCEResiduals = 0;\r\n  ds->mNumICResiduals = 0;\r\n  ds->mNumModes = 11;\r\n  ds->mNumMajorModes = 0;\r\n  ds->mNumRealCache = 0;\r\n  ds->mNumIntCache = 0;\r\n  ds->mNumObservables = 278;\r\n  ds->mNumObservableElements = 260;\r\n  ds->mNumZcs = 11;\r\n  ds->mNumAsserts = 78;\r\n  ds->mNumAssertRanges = 78;\r\n  ds->mNumParamAsserts = 0;\r\n  ds->mNumParamAssertRanges = 0;\r\n  ds->mNumInitialAsserts = 0;\r\n  ds->mNumInitialAssertRanges = 0;\r\n  ds->mNumRanges = 11;\r\n  ds->mNumEquationRanges = 60;\r\n  ds->mNumCERRanges = 0;\r\n  ds->mNumICRRanges = 0;\r\n  ds->mNumFundamentalSamples = 0;\r\n  ds->mNumDelays = 0;\r\n  ds->mNumLogicalParameters = 0;\r\n  ds->mNumIntegerParameters = 0;\r\n  ds->mNumIndexParameters = 0;\r\n  ds->mNumRealParameters = 0;\r\n  ds->mNumLogicalDerivedParameters = 0;\r\n  ds->mNumIntegerDerivedParameters = 0;\r\n  ds->mNumIndexDerivedParameters = 0;\r\n  ds->mNumRealDerivedParameters = 0;\r\n  ds->mIsOutputLinear = TRUE;\r\n  ds->mIsOutputSwitchedLinear = TRUE;\r\n  ds->mIsScalable = FALSE;\r\n\r\n  /* setup ios */\r\n  ds->mNumIo[NE_INPUT_IO_TYPE] = 4;\r\n  input_info[0].mIdentifier =\r\n    \"DC_DC_Buck_PLANT.Active_Load.Simulink_PS_Converter1_output\";\r\n  input_info[0].mM = 1;\r\n  input_info[0].mN = 1;\r\n  input_info[0].mName =\r\n    \"DC_DC_Buck_PLANT.Active_Load.Simulink_PS_Converter1_output\";\r\n  input_info[0].mUnit = \"1\";\r\n  input_info[1].mIdentifier =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter1_output\";\r\n  input_info[1].mM = 1;\r\n  input_info[1].mN = 1;\r\n  input_info[1].mName =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter1_output\";\r\n  input_info[1].mUnit = \"1\";\r\n  input_info[2].mIdentifier =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter_output\";\r\n  input_info[2].mM = 1;\r\n  input_info[2].mN = 1;\r\n  input_info[2].mName =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter_output\";\r\n  input_info[2].mUnit = \"1\";\r\n  input_info[3].mIdentifier =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter3_output\";\r\n  input_info[3].mM = 1;\r\n  input_info[3].mN = 1;\r\n  input_info[3].mName =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Simulink_PS_Converter3_output\";\r\n  input_info[3].mUnit = \"1\";\r\n  ds->mIo[NE_INPUT_IO_TYPE] = input_info;\r\n  ds->mNumIo[NE_OUTPUT_IO_TYPE] = 2;\r\n  output_info[0].mIdentifier =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Voltage_Sensor_V\";\r\n  output_info[0].mM = 1;\r\n  output_info[0].mN = 1;\r\n  output_info[0].mName =\r\n    \"DC_DC_Buck_PLANT.DC_DC_Buck.Current_Sensor.Voltage_Sensor_V\";\r\n  output_info[0].mUnit = \"V\";\r\n  output_info[1].mIdentifier = \"DC_DC_Buck_PLANT.Output_Voltage_V\";\r\n  output_info[1].mM = 1;\r\n  output_info[1].mN = 1;\r\n  output_info[1].mName = \"DC_DC_Buck_PLANT.Output_Voltage_V\";\r\n  output_info[1].mUnit = \"V\";\r\n  ds->mIo[NE_OUTPUT_IO_TYPE] = output_info;\r\n\r\n  /* setup administration methods */\r\n  ds->mReleaseReference = release_reference;\r\n  ds->mGetReference = get_reference;\r\n  ds->mDiagnosticsDsFcn = diagnostics;\r\n  ds->mExpandFcn = expand;\r\n  ds->mRtpMapFcn = rtpmap;\r\n  ds->mMethods[NE_DS_METHOD_M_P] = DCDC_Buck_9d5357ce_1_ds_m_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_M_P] = ds_output_m_p;\r\n  ds->mMethods[NE_DS_METHOD_M] = ds_m;\r\n  ds->mMakeOutput[NE_DS_METHOD_M] = ds_output_m;\r\n  ds->mMethods[NE_DS_METHOD_VMM] = ds_vmm;\r\n  ds->mMakeOutput[NE_DS_METHOD_VMM] = ds_output_vmm;\r\n  ds->mMethods[NE_DS_METHOD_DXM_P] = ds_dxm_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXM_P] = ds_output_dxm_p;\r\n  ds->mMethods[NE_DS_METHOD_DXM] = ds_dxm;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXM] = ds_output_dxm;\r\n  ds->mMethods[NE_DS_METHOD_DDM_P] = ds_ddm_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDM_P] = ds_output_ddm_p;\r\n  ds->mMethods[NE_DS_METHOD_DDM] = ds_ddm;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDM] = ds_output_ddm;\r\n  ds->mMethods[NE_DS_METHOD_DUM_P] = ds_dum_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUM_P] = ds_output_dum_p;\r\n  ds->mMethods[NE_DS_METHOD_DUM] = ds_dum;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUM] = ds_output_dum;\r\n  ds->mMethods[NE_DS_METHOD_DTM_P] = ds_dtm_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTM_P] = ds_output_dtm_p;\r\n  ds->mMethods[NE_DS_METHOD_DTM] = ds_dtm;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTM] = ds_output_dtm;\r\n  ds->mMethods[NE_DS_METHOD_DPM_P] = ds_dpm_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DPM_P] = ds_output_dpm_p;\r\n  ds->mMethods[NE_DS_METHOD_DPM] = ds_dpm;\r\n  ds->mMakeOutput[NE_DS_METHOD_DPM] = ds_output_dpm;\r\n  ds->mMethods[NE_DS_METHOD_A_P] = DCDC_Buck_9d5357ce_1_ds_a_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_A_P] = ds_output_a_p;\r\n  ds->mMethods[NE_DS_METHOD_A] = DCDC_Buck_9d5357ce_1_ds_a;\r\n  ds->mMakeOutput[NE_DS_METHOD_A] = ds_output_a;\r\n  ds->mMethods[NE_DS_METHOD_B_P] = ds_b_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_B_P] = ds_output_b_p;\r\n  ds->mMethods[NE_DS_METHOD_B] = ds_b;\r\n  ds->mMakeOutput[NE_DS_METHOD_B] = ds_output_b;\r\n  ds->mMethods[NE_DS_METHOD_C_P] = ds_c_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_C_P] = ds_output_c_p;\r\n  ds->mMethods[NE_DS_METHOD_C] = ds_c;\r\n  ds->mMakeOutput[NE_DS_METHOD_C] = ds_output_c;\r\n  ds->mMethods[NE_DS_METHOD_F] = DCDC_Buck_9d5357ce_1_ds_f;\r\n  ds->mMakeOutput[NE_DS_METHOD_F] = ds_output_f;\r\n  ds->mMethods[NE_DS_METHOD_VMF] = ds_vmf;\r\n  ds->mMakeOutput[NE_DS_METHOD_VMF] = ds_output_vmf;\r\n  ds->mMethods[NE_DS_METHOD_VPF] = ds_vpf;\r\n  ds->mMakeOutput[NE_DS_METHOD_VPF] = ds_output_vpf;\r\n  ds->mMethods[NE_DS_METHOD_VSF] = ds_vsf;\r\n  ds->mMakeOutput[NE_DS_METHOD_VSF] = ds_output_vsf;\r\n  ds->mMethods[NE_DS_METHOD_SLF] = ds_slf;\r\n  ds->mMakeOutput[NE_DS_METHOD_SLF] = ds_output_slf;\r\n  ds->mMethods[NE_DS_METHOD_SLF0] = ds_slf0;\r\n  ds->mMakeOutput[NE_DS_METHOD_SLF0] = ds_output_slf0;\r\n  ds->mMethods[NE_DS_METHOD_DXF_P] = DCDC_Buck_9d5357ce_1_ds_dxf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXF_P] = ds_output_dxf_p;\r\n  ds->mMethods[NE_DS_METHOD_DXF] = DCDC_Buck_9d5357ce_1_ds_dxf;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXF] = ds_output_dxf;\r\n  ds->mMethods[NE_DS_METHOD_DUF_P] = ds_duf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUF_P] = ds_output_duf_p;\r\n  ds->mMethods[NE_DS_METHOD_DUF] = ds_duf;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUF] = ds_output_duf;\r\n  ds->mMethods[NE_DS_METHOD_DTF_P] = ds_dtf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTF_P] = ds_output_dtf_p;\r\n  ds->mMethods[NE_DS_METHOD_DTF] = ds_dtf;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTF] = ds_output_dtf;\r\n  ds->mMethods[NE_DS_METHOD_DDF_P] = ds_ddf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDF_P] = ds_output_ddf_p;\r\n  ds->mMethods[NE_DS_METHOD_DDF] = ds_ddf;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDF] = ds_output_ddf;\r\n  ds->mMethods[NE_DS_METHOD_DPDXF_P] = ds_dpdxf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DPDXF_P] = ds_output_dpdxf_p;\r\n  ds->mMethods[NE_DS_METHOD_DPDXF] = ds_dpdxf;\r\n  ds->mMakeOutput[NE_DS_METHOD_DPDXF] = ds_output_dpdxf;\r\n  ds->mMethods[NE_DS_METHOD_DWF_P] = ds_dwf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DWF_P] = ds_output_dwf_p;\r\n  ds->mMethods[NE_DS_METHOD_DWF] = ds_dwf;\r\n  ds->mMakeOutput[NE_DS_METHOD_DWF] = ds_output_dwf;\r\n  ds->mMethods[NE_DS_METHOD_TDUF_P] = ds_tduf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_TDUF_P] = ds_output_tduf_p;\r\n  ds->mMethods[NE_DS_METHOD_TDXF_P] = DCDC_Buck_9d5357ce_1_ds_tdxf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_TDXF_P] = ds_output_tdxf_p;\r\n  ds->mMethods[NE_DS_METHOD_DNF_P] = ds_dnf_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DNF_P] = ds_output_dnf_p;\r\n  ds->mMethods[NE_DS_METHOD_DNF] = ds_dnf;\r\n  ds->mMakeOutput[NE_DS_METHOD_DNF] = ds_output_dnf;\r\n  ds->mMethods[NE_DS_METHOD_DNF_V_X] = ds_dnf_v_x;\r\n  ds->mMakeOutput[NE_DS_METHOD_DNF_V_X] = ds_output_dnf_v_x;\r\n  ds->mMethods[NE_DS_METHOD_CER] = ds_cer;\r\n  ds->mMakeOutput[NE_DS_METHOD_CER] = ds_output_cer;\r\n  ds->mMethods[NE_DS_METHOD_DXCER] = ds_dxcer;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXCER] = ds_output_dxcer;\r\n  ds->mMethods[NE_DS_METHOD_DXCER_P] = ds_dxcer_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXCER_P] = ds_output_dxcer_p;\r\n  ds->mMethods[NE_DS_METHOD_IC] = ds_ic;\r\n  ds->mMakeOutput[NE_DS_METHOD_IC] = ds_output_ic;\r\n  ds->mMethods[NE_DS_METHOD_ICR] = ds_icr;\r\n  ds->mMakeOutput[NE_DS_METHOD_ICR] = ds_output_icr;\r\n  ds->mMethods[NE_DS_METHOD_ICR_IM] = ds_icr_im;\r\n  ds->mMakeOutput[NE_DS_METHOD_ICR_IM] = ds_output_icr_im;\r\n  ds->mMethods[NE_DS_METHOD_ICR_ID] = ds_icr_id;\r\n  ds->mMakeOutput[NE_DS_METHOD_ICR_ID] = ds_output_icr_id;\r\n  ds->mMethods[NE_DS_METHOD_ICR_IL] = ds_icr_il;\r\n  ds->mMakeOutput[NE_DS_METHOD_ICR_IL] = ds_output_icr_il;\r\n  ds->mMethods[NE_DS_METHOD_DXICR] = ds_dxicr;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXICR] = ds_output_dxicr;\r\n  ds->mMethods[NE_DS_METHOD_DXICR_P] = ds_dxicr_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXICR_P] = ds_output_dxicr_p;\r\n  ds->mMethods[NE_DS_METHOD_DDICR] = ds_ddicr;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDICR] = ds_output_ddicr;\r\n  ds->mMethods[NE_DS_METHOD_DDICR_P] = ds_ddicr_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDICR_P] = ds_output_ddicr_p;\r\n  ds->mMethods[NE_DS_METHOD_TDUICR_P] = ds_tduicr_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_TDUICR_P] = ds_output_tduicr_p;\r\n  ds->mMethods[NE_DS_METHOD_ICRM_P] = ds_icrm_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_ICRM_P] = ds_output_icrm_p;\r\n  ds->mMethods[NE_DS_METHOD_ICRM] = ds_icrm;\r\n  ds->mMakeOutput[NE_DS_METHOD_ICRM] = ds_output_icrm;\r\n  ds->mMethods[NE_DS_METHOD_DXICRM_P] = ds_dxicrm_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXICRM_P] = ds_output_dxicrm_p;\r\n  ds->mMethods[NE_DS_METHOD_DXICRM] = ds_dxicrm;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXICRM] = ds_output_dxicrm;\r\n  ds->mMethods[NE_DS_METHOD_DDICRM_P] = ds_ddicrm_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDICRM_P] = ds_output_ddicrm_p;\r\n  ds->mMethods[NE_DS_METHOD_DDICRM] = ds_ddicrm;\r\n  ds->mMakeOutput[NE_DS_METHOD_DDICRM] = ds_output_ddicrm;\r\n  ds->mMethods[NE_DS_METHOD_MDUY_P] = ds_mduy_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_MDUY_P] = ds_output_mduy_p;\r\n  ds->mMethods[NE_DS_METHOD_MDXY_P] = ds_mdxy_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_MDXY_P] = ds_output_mdxy_p;\r\n  ds->mMethods[NE_DS_METHOD_TDUY_P] = ds_tduy_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_TDUY_P] = ds_output_tduy_p;\r\n  ds->mMethods[NE_DS_METHOD_TDXY_P] = DCDC_Buck_9d5357ce_1_ds_tdxy_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_TDXY_P] = ds_output_tdxy_p;\r\n  ds->mMethods[NE_DS_METHOD_Y] = ds_y;\r\n  ds->mMakeOutput[NE_DS_METHOD_Y] = ds_output_y;\r\n  ds->mMethods[NE_DS_METHOD_DXY_P] = DCDC_Buck_9d5357ce_1_ds_dxy_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXY_P] = ds_output_dxy_p;\r\n  ds->mMethods[NE_DS_METHOD_DXY] = ds_dxy;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXY] = ds_output_dxy;\r\n  ds->mMethods[NE_DS_METHOD_DUY_P] = ds_duy_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUY_P] = ds_output_duy_p;\r\n  ds->mMethods[NE_DS_METHOD_DUY] = ds_duy;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUY] = ds_output_duy;\r\n  ds->mMethods[NE_DS_METHOD_DTY_P] = ds_dty_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTY_P] = ds_output_dty_p;\r\n  ds->mMethods[NE_DS_METHOD_DTY] = ds_dty;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTY] = ds_output_dty;\r\n  ds->mMethods[NE_DS_METHOD_MODE] = DCDC_Buck_9d5357ce_1_ds_mode;\r\n  ds->mMakeOutput[NE_DS_METHOD_MODE] = ds_output_mode;\r\n  ds->mMethods[NE_DS_METHOD_ZC] = DCDC_Buck_9d5357ce_1_ds_zc;\r\n  ds->mMakeOutput[NE_DS_METHOD_ZC] = ds_output_zc;\r\n  ds->mMethods[NE_DS_METHOD_CACHE_R] = ds_cache_r;\r\n  ds->mMakeOutput[NE_DS_METHOD_CACHE_R] = ds_output_cache_r;\r\n  ds->mMethods[NE_DS_METHOD_CACHE_I] = ds_cache_i;\r\n  ds->mMakeOutput[NE_DS_METHOD_CACHE_I] = ds_output_cache_i;\r\n  ds->mMethods[NE_DS_METHOD_UPDATE_R] = ds_update_r;\r\n  ds->mMakeOutput[NE_DS_METHOD_UPDATE_R] = ds_output_update_r;\r\n  ds->mMethods[NE_DS_METHOD_UPDATE_I] = ds_update_i;\r\n  ds->mMakeOutput[NE_DS_METHOD_UPDATE_I] = ds_output_update_i;\r\n  ds->mMethods[NE_DS_METHOD_UPDATE2_R] = ds_update2_r;\r\n  ds->mMakeOutput[NE_DS_METHOD_UPDATE2_R] = ds_output_update2_r;\r\n  ds->mMethods[NE_DS_METHOD_UPDATE2_I] = ds_update2_i;\r\n  ds->mMakeOutput[NE_DS_METHOD_UPDATE2_I] = ds_output_update2_i;\r\n  ds->mMethods[NE_DS_METHOD_LOCK_R] = ds_lock_r;\r\n  ds->mMakeOutput[NE_DS_METHOD_LOCK_R] = ds_output_lock_r;\r\n  ds->mMethods[NE_DS_METHOD_LOCK_I] = ds_lock_i;\r\n  ds->mMakeOutput[NE_DS_METHOD_LOCK_I] = ds_output_lock_i;\r\n  ds->mMethods[NE_DS_METHOD_LOCK2_R] = ds_lock2_r;\r\n  ds->mMakeOutput[NE_DS_METHOD_LOCK2_R] = ds_output_lock2_r;\r\n  ds->mMethods[NE_DS_METHOD_LOCK2_I] = ds_lock2_i;\r\n  ds->mMakeOutput[NE_DS_METHOD_LOCK2_I] = ds_output_lock2_i;\r\n  ds->mMethods[NE_DS_METHOD_SFO] = ds_sfo;\r\n  ds->mMakeOutput[NE_DS_METHOD_SFO] = ds_output_sfo;\r\n  ds->mMethods[NE_DS_METHOD_SFP] = ds_sfp;\r\n  ds->mMakeOutput[NE_DS_METHOD_SFP] = ds_output_sfp;\r\n  ds->mMethods[NE_DS_METHOD_INIT_R] = ds_init_r;\r\n  ds->mMakeOutput[NE_DS_METHOD_INIT_R] = ds_output_init_r;\r\n  ds->mMethods[NE_DS_METHOD_INIT_I] = ds_init_i;\r\n  ds->mMakeOutput[NE_DS_METHOD_INIT_I] = ds_output_init_i;\r\n  ds->mMethods[NE_DS_METHOD_LOG] = DCDC_Buck_9d5357ce_1_ds_log;\r\n  ds->mMakeOutput[NE_DS_METHOD_LOG] = ds_output_log;\r\n  ds->mMethods[NE_DS_METHOD_ASSERT] = DCDC_Buck_9d5357ce_1_ds_assert;\r\n  ds->mMakeOutput[NE_DS_METHOD_ASSERT] = ds_output_assert;\r\n  ds->mMethods[NE_DS_METHOD_PASSERT] = ds_passert;\r\n  ds->mMakeOutput[NE_DS_METHOD_PASSERT] = ds_output_passert;\r\n  ds->mMethods[NE_DS_METHOD_IASSERT] = ds_iassert;\r\n  ds->mMakeOutput[NE_DS_METHOD_IASSERT] = ds_output_iassert;\r\n  ds->mMethods[NE_DS_METHOD_DEL_T] = ds_del_t;\r\n  ds->mMakeOutput[NE_DS_METHOD_DEL_T] = ds_output_del_t;\r\n  ds->mMethods[NE_DS_METHOD_DEL_V] = ds_del_v;\r\n  ds->mMakeOutput[NE_DS_METHOD_DEL_V] = ds_output_del_v;\r\n  ds->mMethods[NE_DS_METHOD_DEL_V0] = ds_del_v0;\r\n  ds->mMakeOutput[NE_DS_METHOD_DEL_V0] = ds_output_del_v0;\r\n  ds->mMethods[NE_DS_METHOD_DEL_TMAX] = ds_del_tmax;\r\n  ds->mMakeOutput[NE_DS_METHOD_DEL_TMAX] = ds_output_del_tmax;\r\n  ds->mMethods[NE_DS_METHOD_DXDELT_P] = ds_dxdelt_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXDELT_P] = ds_output_dxdelt_p;\r\n  ds->mMethods[NE_DS_METHOD_DXDELT] = ds_dxdelt;\r\n  ds->mMakeOutput[NE_DS_METHOD_DXDELT] = ds_output_dxdelt;\r\n  ds->mMethods[NE_DS_METHOD_DUDELT_P] = ds_dudelt_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUDELT_P] = ds_output_dudelt_p;\r\n  ds->mMethods[NE_DS_METHOD_DUDELT] = ds_dudelt;\r\n  ds->mMakeOutput[NE_DS_METHOD_DUDELT] = ds_output_dudelt;\r\n  ds->mMethods[NE_DS_METHOD_DTDELT_P] = ds_dtdelt_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTDELT_P] = ds_output_dtdelt_p;\r\n  ds->mMethods[NE_DS_METHOD_DTDELT] = ds_dtdelt;\r\n  ds->mMakeOutput[NE_DS_METHOD_DTDELT] = ds_output_dtdelt;\r\n  ds->mMethods[NE_DS_METHOD_OBS_EXP] = DCDC_Buck_9d5357ce_1_ds_obs_exp;\r\n  ds->mMakeOutput[NE_DS_METHOD_OBS_EXP] = ds_output_obs_exp;\r\n  ds->mMethods[NE_DS_METHOD_OBS_ACT] = DCDC_Buck_9d5357ce_1_ds_obs_act;\r\n  ds->mMakeOutput[NE_DS_METHOD_OBS_ACT] = ds_output_obs_act;\r\n  ds->mMethods[NE_DS_METHOD_OBS_ALL] = DCDC_Buck_9d5357ce_1_ds_obs_all;\r\n  ds->mMakeOutput[NE_DS_METHOD_OBS_ALL] = ds_output_obs_all;\r\n  ds->mMethods[NE_DS_METHOD_OBS_IL] = DCDC_Buck_9d5357ce_1_ds_obs_il;\r\n  ds->mMakeOutput[NE_DS_METHOD_OBS_IL] = ds_output_obs_il;\r\n  ds->mMethods[NE_DS_METHOD_DP_L] = ds_dp_l;\r\n  ds->mMakeOutput[NE_DS_METHOD_DP_L] = ds_output_dp_l;\r\n  ds->mMethods[NE_DS_METHOD_DP_I] = ds_dp_i;\r\n  ds->mMakeOutput[NE_DS_METHOD_DP_I] = ds_output_dp_i;\r\n  ds->mMethods[NE_DS_METHOD_DP_J] = ds_dp_j;\r\n  ds->mMakeOutput[NE_DS_METHOD_DP_J] = ds_output_dp_j;\r\n  ds->mMethods[NE_DS_METHOD_DP_R] = ds_dp_r;\r\n  ds->mMakeOutput[NE_DS_METHOD_DP_R] = ds_output_dp_r;\r\n  ds->mMethods[NE_DS_METHOD_QX] = ds_qx;\r\n  ds->mMakeOutput[NE_DS_METHOD_QX] = ds_output_qx;\r\n  ds->mMethods[NE_DS_METHOD_QU] = ds_qu;\r\n  ds->mMakeOutput[NE_DS_METHOD_QU] = ds_output_qu;\r\n  ds->mMethods[NE_DS_METHOD_QT] = ds_qt;\r\n  ds->mMakeOutput[NE_DS_METHOD_QT] = ds_output_qt;\r\n  ds->mMethods[NE_DS_METHOD_Q1] = ds_q1;\r\n  ds->mMakeOutput[NE_DS_METHOD_Q1] = ds_output_q1;\r\n  ds->mMethods[NE_DS_METHOD_QX_P] = ds_qx_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_QX_P] = ds_output_qx_p;\r\n  ds->mMethods[NE_DS_METHOD_QU_P] = ds_qu_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_QU_P] = ds_output_qu_p;\r\n  ds->mMethods[NE_DS_METHOD_QT_P] = ds_qt_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_QT_P] = ds_output_qt_p;\r\n  ds->mMethods[NE_DS_METHOD_Q1_P] = ds_q1_p;\r\n  ds->mMakeOutput[NE_DS_METHOD_Q1_P] = ds_output_q1_p;\r\n  ds->mMethods[NE_DS_METHOD_VAR_TOL] = ds_var_tol;\r\n  ds->mMakeOutput[NE_DS_METHOD_VAR_TOL] = ds_output_var_tol;\r\n  ds->mMethods[NE_DS_METHOD_EQ_TOL] = ds_eq_tol;\r\n  ds->mMakeOutput[NE_DS_METHOD_EQ_TOL] = ds_output_eq_tol;\r\n  ds->mMethods[NE_DS_METHOD_LV] = ds_lv;\r\n  ds->mMakeOutput[NE_DS_METHOD_LV] = ds_output_lv;\r\n  ds->mMethods[NE_DS_METHOD_SLV] = ds_slv;\r\n  ds->mMakeOutput[NE_DS_METHOD_SLV] = ds_output_slv;\r\n  ds->mMethods[NE_DS_METHOD_NLDV] = ds_nldv;\r\n  ds->mMakeOutput[NE_DS_METHOD_NLDV] = ds_output_nldv;\r\n  ds->mMethods[NE_DS_METHOD_SCLV] = ds_sclv;\r\n  ds->mMakeOutput[NE_DS_METHOD_SCLV] = ds_output_sclv;\r\n  ds->mMethods[NE_DS_METHOD_IMIN] = DCDC_Buck_9d5357ce_1_ds_imin;\r\n  ds->mMakeOutput[NE_DS_METHOD_IMIN] = ds_output_imin;\r\n  ds->mMethods[NE_DS_METHOD_IMAX] = DCDC_Buck_9d5357ce_1_ds_imax;\r\n  ds->mMakeOutput[NE_DS_METHOD_IMAX] = ds_output_imax;\r\n  ds->mMethods[NE_DS_METHOD_DIMIN] = ds_dimin;\r\n  ds->mMakeOutput[NE_DS_METHOD_DIMIN] = ds_output_dimin;\r\n  ds->mMethods[NE_DS_METHOD_DIMAX] = ds_dimax;\r\n  ds->mMakeOutput[NE_DS_METHOD_DIMAX] = ds_output_dimax;\r\n\r\n  /* equation data */\r\n  ds->mEquationData = s_equation_data;\r\n\r\n  /* cer data */\r\n  ds->mCERData = s_cer_data;\r\n\r\n  /* icr data */\r\n  ds->mICRData = s_icr_data;\r\n\r\n  /* continuous variable data */\r\n  ds->mVariableData = s_variable_data;\r\n\r\n  /* discrete variable data */\r\n  ds->mDiscreteData = s_discrete_data;\r\n\r\n  /* observable data */\r\n  ds->mObservableData = s_observable_data;\r\n\r\n  /* major mode data */\r\n  ds->mMajorModeData = s_major_mode_data;\r\n\r\n  /* zc data */\r\n  ds->mZCData = s_zc_data;\r\n\r\n  /* ranges */\r\n  ds->mRanges = s_range;\r\n\r\n  /* assert data */\r\n  ds->mAssertData = s_assert_data;\r\n\r\n  /* assert ranges */\r\n  ds->mAssertRanges = s_assert_range;\r\n\r\n  /* param assert data */\r\n  ds->mParamAssertData = s_param_assert_data;\r\n\r\n  /* param assert ranges */\r\n  ds->mParamAssertRanges = s_param_assert_range;\r\n\r\n  /* initial assert data */\r\n  ds->mInitialAssertData = s_initial_assert_data;\r\n\r\n  /* initial assert ranges */\r\n  ds->mInitialAssertRanges = s_initial_assert_range;\r\n\r\n  /* equation ranges */\r\n  ds->mEquationRanges = s_equation_range;\r\n\r\n  /* cer ranges */\r\n  ds->mCERRanges = s_cer_range;\r\n\r\n  /* icr ranges */\r\n  ds->mICRRanges = s_icr_range;\r\n\r\n  /* parameters */\r\n  ds->mLogicalParameters = s_logical_parameter_data;\r\n  ds->mIntegerParameters = s_integer_parameter_data;\r\n  ds->mIndexParameters = s_index_parameter_data;\r\n  ds->mRealParameters = s_real_parameter_data;\r\n\r\n  /* constant tables */\r\n  ds->mNumLargeArray = 0;\r\n  return (NeDynamicSystem *)_ds;\r\n}\r\n\r\nstatic int32_T ds_passert (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_iassert (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_cer (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxcer (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxcer_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDXCER_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_del_v (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_del_v0 (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_del_tmax (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_del_t (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxdelt (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxdelt_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDXDELT_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dudelt (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dudelt_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDUDELT_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dtdelt (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dtdelt_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDTDELT_P;\r\n  out.mNumCol = 1ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_cache_r (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_init_r (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_update_r (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_lock_r (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_cache_i (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_init_i (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_update_i (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_lock_i (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_update2_r (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_lock2_r (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_update2_i (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_lock2_i (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_sfp (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_sfo (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_duf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_duf_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDUF_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dtf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dtf_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDTF_P;\r\n  out.mNumCol = 1ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddf_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDDF_P;\r\n  out.mNumCol = 0ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_b (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                     NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_b_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mB_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_c (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                     NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_c_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mC_P;\r\n  out.mNumCol = 1ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_tduf_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mTDUF_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 1;\r\n  out.mJc[2] = 2;\r\n  out.mJc[3] = 3;\r\n  out.mJc[4] = 4;\r\n  out.mIr[0] = 14;\r\n  out.mIr[1] = 26;\r\n  out.mIr[2] = 28;\r\n  out.mIr[3] = 30;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dwf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dwf_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDWF_P;\r\n  out.mNumCol = 0ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dpdxf (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dpdxf_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDPDXF_P;\r\n  out.mNumCol = 0ULL;\r\n  out.mNumRow = 37ULL;\r\n  out.mJc[0] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_vmf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mVMF;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = true;\r\n  out.mX[14] = true;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = true;\r\n  out.mX[23] = true;\r\n  out.mX[24] = true;\r\n  out.mX[25] = true;\r\n  out.mX[26] = true;\r\n  out.mX[27] = true;\r\n  out.mX[28] = true;\r\n  out.mX[29] = true;\r\n  out.mX[30] = true;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_slf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mSLF;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dnf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dnf_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDNF_P;\r\n  out.mNumCol = 32ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  out.mJc[32] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dnf_v_x (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mDNF_V_X;\r\n  out.mX[0] = true;\r\n  out.mX[1] = true;\r\n  out.mX[2] = true;\r\n  out.mX[3] = true;\r\n  out.mX[4] = true;\r\n  out.mX[5] = true;\r\n  out.mX[6] = true;\r\n  out.mX[7] = true;\r\n  out.mX[8] = true;\r\n  out.mX[9] = true;\r\n  out.mX[10] = true;\r\n  out.mX[11] = true;\r\n  out.mX[12] = true;\r\n  out.mX[13] = true;\r\n  out.mX[14] = true;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = true;\r\n  out.mX[23] = true;\r\n  out.mX[24] = true;\r\n  out.mX[25] = true;\r\n  out.mX[26] = true;\r\n  out.mX[27] = true;\r\n  out.mX[28] = true;\r\n  out.mX[29] = true;\r\n  out.mX[30] = true;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_slf0 (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mSLF0;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_vpf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mVPF;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_vsf (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mVSF;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ic (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                      NeDsMethodOutput *t2)\r\n{\r\n  PmRealVector out;\r\n  (void)t1;\r\n  out = t2->mIC;\r\n  out.mX[0] = 0.0;\r\n  out.mX[1] = 0.0;\r\n  out.mX[2] = 0.0;\r\n  out.mX[3] = 0.0;\r\n  out.mX[4] = 0.0;\r\n  out.mX[5] = 0.0;\r\n  out.mX[6] = 0.0;\r\n  out.mX[7] = 0.0;\r\n  out.mX[8] = 0.0;\r\n  out.mX[9] = 0.0;\r\n  out.mX[10] = 0.0;\r\n  out.mX[11] = 0.0;\r\n  out.mX[12] = 0.0;\r\n  out.mX[13] = 0.0;\r\n  out.mX[14] = 0.0;\r\n  out.mX[15] = 0.0;\r\n  out.mX[16] = 0.0;\r\n  out.mX[17] = 0.0;\r\n  out.mX[18] = 0.0;\r\n  out.mX[19] = 0.0;\r\n  out.mX[20] = 0.0;\r\n  out.mX[21] = 0.0;\r\n  out.mX[22] = 0.0;\r\n  out.mX[23] = 0.0;\r\n  out.mX[24] = 0.0;\r\n  out.mX[25] = 0.0;\r\n  out.mX[26] = 0.0;\r\n  out.mX[27] = 0.0;\r\n  out.mX[28] = 0.0;\r\n  out.mX[29] = 0.0;\r\n  out.mX[30] = 0.0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_icr (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_icr_im (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_icr_id (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_icr_il (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxicr (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxicr_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDXICR_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddicr (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddicr_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDDICR_P;\r\n  out.mNumCol = 0ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_tduicr_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mTDUICR_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_icrm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_icrm_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mICRM_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxicrm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxicrm_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDXICRM_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddicrm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddicrm_p (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDDICRM_P;\r\n  out.mNumCol = 0ULL;\r\n  out.mNumRow = 0ULL;\r\n  out.mJc[0] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dimin (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dimax (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_m (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                     NeDsMethodOutput *t2)\r\n{\r\n  PmRealVector out;\r\n  (void)t1;\r\n  out = t2->mM;\r\n  out.mX[0] = -0.00033;\r\n  out.mX[1] = -4.4E-5;\r\n  out.mX[2] = -1.0E-11;\r\n  out.mX[3] = -6.5999999999999992E-5;\r\n  out.mX[4] = -4.8E-6;\r\n  out.mX[5] = -2.2E-10;\r\n  out.mX[6] = -2.2E-10;\r\n  out.mX[7] = -1.0E-9;\r\n  out.mX[8] = -1.0E-11;\r\n  out.mX[9] = -3.3E-9;\r\n  out.mX[10] = -5.0E-12;\r\n  out.mX[11] = -5.0E-12;\r\n  out.mX[12] = -5.0E-12;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxm_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDXM_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 13ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_ddm_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDDM_P;\r\n  out.mNumCol = 0ULL;\r\n  out.mNumRow = 13ULL;\r\n  out.mJc[0] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dum (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dum_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDUM_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 13ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dtm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dtm_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDTM_P;\r\n  out.mNumCol = 1ULL;\r\n  out.mNumRow = 13ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dpm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dpm_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDPM_P;\r\n  out.mNumCol = 0ULL;\r\n  out.mNumRow = 13ULL;\r\n  out.mJc[0] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_vmm (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mVMM;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dp_l (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dp_i (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dp_j (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dp_r (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_qx (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                      NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_qu (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                      NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_qt (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                      NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_q1 (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                      NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_qx_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mQX_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_qu_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mQU_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_qt_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mQT_P;\r\n  out.mNumCol = 1ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_q1_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mQ1_P;\r\n  out.mNumCol = 1ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_var_tol (const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmRealVector out;\r\n  (void)t1;\r\n  out = t2->mVAR_TOL;\r\n  out.mX[0] = 1.0E-8;\r\n  out.mX[1] = 1.0E-8;\r\n  out.mX[2] = 1.0E-8;\r\n  out.mX[3] = 1.0E-8;\r\n  out.mX[4] = 1.0E-8;\r\n  out.mX[5] = 1.0E-8;\r\n  out.mX[6] = 1.0E-8;\r\n  out.mX[7] = 1.0E-8;\r\n  out.mX[8] = 1.0E-8;\r\n  out.mX[9] = 1.0E-8;\r\n  out.mX[10] = 1.0E-8;\r\n  out.mX[11] = 1.0E-8;\r\n  out.mX[12] = 1.0E-8;\r\n  out.mX[13] = 1.0E-8;\r\n  out.mX[14] = 1.0E-8;\r\n  out.mX[15] = 1.0E-8;\r\n  out.mX[16] = 1.0E-8;\r\n  out.mX[17] = 1.0E-8;\r\n  out.mX[18] = 1.0E-8;\r\n  out.mX[19] = 1.0E-8;\r\n  out.mX[20] = 1.0E-8;\r\n  out.mX[21] = 1.0E-8;\r\n  out.mX[22] = 1.0E-8;\r\n  out.mX[23] = 1.0E-8;\r\n  out.mX[24] = 1.0E-8;\r\n  out.mX[25] = 1.0E-8;\r\n  out.mX[26] = 1.0E-8;\r\n  out.mX[27] = 1.0E-8;\r\n  out.mX[28] = 1.0E-8;\r\n  out.mX[29] = 1.0E-8;\r\n  out.mX[30] = 1.0E-8;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_eq_tol (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmRealVector out;\r\n  (void)t1;\r\n  out = t2->mEQ_TOL;\r\n  out.mX[0] = 1.0E-8;\r\n  out.mX[1] = 1.0E-8;\r\n  out.mX[2] = 1.0E-8;\r\n  out.mX[3] = 1.0E-8;\r\n  out.mX[4] = 1.0E-8;\r\n  out.mX[5] = 1.0E-8;\r\n  out.mX[6] = 1.0E-8;\r\n  out.mX[7] = 1.0E-8;\r\n  out.mX[8] = 1.0E-8;\r\n  out.mX[9] = 1.0E-8;\r\n  out.mX[10] = 1.0E-8;\r\n  out.mX[11] = 1.0E-8;\r\n  out.mX[12] = 1.0E-8;\r\n  out.mX[13] = 1.0E-8;\r\n  out.mX[14] = 1.0E-8;\r\n  out.mX[15] = 1.0E-8;\r\n  out.mX[16] = 1.0E-8;\r\n  out.mX[17] = 1.0E-8;\r\n  out.mX[18] = 1.0E-8;\r\n  out.mX[19] = 1.0E-8;\r\n  out.mX[20] = 1.0E-8;\r\n  out.mX[21] = 1.0E-8;\r\n  out.mX[22] = 1.0E-8;\r\n  out.mX[23] = 1.0E-8;\r\n  out.mX[24] = 1.0E-8;\r\n  out.mX[25] = 1.0E-8;\r\n  out.mX[26] = 1.0E-8;\r\n  out.mX[27] = 1.0E-8;\r\n  out.mX[28] = 1.0E-8;\r\n  out.mX[29] = 1.0E-8;\r\n  out.mX[30] = 1.0E-8;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_lv (const NeDynamicSystem *sys, const NeDynamicSystemInput *t1,\r\n                      NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mLV;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = true;\r\n  out.mX[17] = true;\r\n  out.mX[18] = true;\r\n  out.mX[19] = true;\r\n  out.mX[20] = true;\r\n  out.mX[21] = true;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_slv (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mSLV;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = true;\r\n  out.mX[17] = true;\r\n  out.mX[18] = true;\r\n  out.mX[19] = true;\r\n  out.mX[20] = true;\r\n  out.mX[21] = true;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_nldv (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mNLDV;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_sclv (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmBoolVector out;\r\n  (void)t1;\r\n  out = t2->mSCLV;\r\n  out.mX[0] = false;\r\n  out.mX[1] = false;\r\n  out.mX[2] = false;\r\n  out.mX[3] = false;\r\n  out.mX[4] = false;\r\n  out.mX[5] = false;\r\n  out.mX[6] = false;\r\n  out.mX[7] = false;\r\n  out.mX[8] = false;\r\n  out.mX[9] = false;\r\n  out.mX[10] = false;\r\n  out.mX[11] = false;\r\n  out.mX[12] = false;\r\n  out.mX[13] = false;\r\n  out.mX[14] = false;\r\n  out.mX[15] = false;\r\n  out.mX[16] = false;\r\n  out.mX[17] = false;\r\n  out.mX[18] = false;\r\n  out.mX[19] = false;\r\n  out.mX[20] = false;\r\n  out.mX[21] = false;\r\n  out.mX[22] = false;\r\n  out.mX[23] = false;\r\n  out.mX[24] = false;\r\n  out.mX[25] = false;\r\n  out.mX[26] = false;\r\n  out.mX[27] = false;\r\n  out.mX[28] = false;\r\n  out.mX[29] = false;\r\n  out.mX[30] = false;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_y (const NeDynamicSystem *sys, const NeDynamicSystemInput *t3,\r\n                     NeDsMethodOutput *t4)\r\n{\r\n  PmRealVector out;\r\n  real_T X_idx_0;\r\n  real_T X_idx_15;\r\n  real_T X_idx_21;\r\n  real_T X_idx_9;\r\n  X_idx_0 = t3->mX.mX[0];\r\n  X_idx_9 = t3->mX.mX[9];\r\n  X_idx_15 = t3->mX.mX[15];\r\n  X_idx_21 = t3->mX.mX[21];\r\n  out = t4->mY;\r\n  out.mX[0] = X_idx_21 * 1.0E-6 + X_idx_9;\r\n  out.mX[1] = X_idx_15 * 0.002 + X_idx_0;\r\n  (void)sys;\r\n  (void)t4;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dxy (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t5, NeDsMethodOutput *t6)\r\n{\r\n  PmRealVector out;\r\n  (void)t5;\r\n  out = t6->mDXY;\r\n  out.mX[0] = 1.0;\r\n  out.mX[1] = 1.0;\r\n  out.mX[2] = 0.002;\r\n  out.mX[3] = 1.0E-6;\r\n  (void)sys;\r\n  (void)t6;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_duy (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_duy_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDUY_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 2ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_mduy_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mMDUY_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 2ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_mdxy_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mMDXY_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 2ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  out.mJc[5] = 0;\r\n  out.mJc[6] = 0;\r\n  out.mJc[7] = 0;\r\n  out.mJc[8] = 0;\r\n  out.mJc[9] = 0;\r\n  out.mJc[10] = 0;\r\n  out.mJc[11] = 0;\r\n  out.mJc[12] = 0;\r\n  out.mJc[13] = 0;\r\n  out.mJc[14] = 0;\r\n  out.mJc[15] = 0;\r\n  out.mJc[16] = 0;\r\n  out.mJc[17] = 0;\r\n  out.mJc[18] = 0;\r\n  out.mJc[19] = 0;\r\n  out.mJc[20] = 0;\r\n  out.mJc[21] = 0;\r\n  out.mJc[22] = 0;\r\n  out.mJc[23] = 0;\r\n  out.mJc[24] = 0;\r\n  out.mJc[25] = 0;\r\n  out.mJc[26] = 0;\r\n  out.mJc[27] = 0;\r\n  out.mJc[28] = 0;\r\n  out.mJc[29] = 0;\r\n  out.mJc[30] = 0;\r\n  out.mJc[31] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_tduy_p (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mTDUY_P;\r\n  out.mNumCol = 4ULL;\r\n  out.mNumRow = 2ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  out.mJc[2] = 0;\r\n  out.mJc[3] = 0;\r\n  out.mJc[4] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dty (const NeDynamicSystem *sys, const NeDynamicSystemInput\r\n  *t1, NeDsMethodOutput *t2)\r\n{\r\n  (void)t1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n\r\nstatic int32_T ds_dty_p (const NeDynamicSystem *sys, const NeDynamicSystemInput *\r\n  t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDTY_P;\r\n  out.mNumCol = 1ULL;\r\n  out.mNumRow = 2ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds.h - header for module DCDC_Buck_9d5357ce_1_ds */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_H      1\r\n\r\n  extern NeDynamicSystem *DCDC_Buck_9d5357ce_1_dae_ds(PmAllocator *allocator );\r\n\r\n#endif                                 /* #ifndef DCDC_BUCK_9D5357CE_1_DS_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_a.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_a.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_a(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t69, NeDsMethodOutput *t70)\r\n{\r\n  PmRealVector out;\r\n  real_T t0[83];\r\n  real_T t1[8];\r\n  real_T t13[8];\r\n  real_T t15[8];\r\n  real_T t17[7];\r\n  real_T t18[7];\r\n  real_T t16[6];\r\n  real_T t3[6];\r\n  real_T t5[5];\r\n  size_t t37;\r\n  (void)t69;\r\n  out = t70->mA;\r\n  t1[0ULL] = 0.6333333333333333;\r\n  t1[1ULL] = -0.0;\r\n  t1[2ULL] = 0.012195121951219513;\r\n  t1[3ULL] = 0.012195121951219513;\r\n  t1[4ULL] = 1.0;\r\n  t1[5ULL] = 1.0012666666666667;\r\n  t1[6ULL] = 1.000000012195122;\r\n  t1[7ULL] = 1.000000012195122;\r\n  t3[0ULL] = 0.00083333333333333339;\r\n  t3[1ULL] = -0.00083333333333333339;\r\n  t3[2ULL] = -0.0;\r\n  t3[3ULL] = 1.6666666666666669E-6;\r\n  t3[4ULL] = -8.3333333333333335E-10;\r\n  t3[5ULL] = 0.001;\r\n  t5[0ULL] = -1.0;\r\n  t5[1ULL] = -1.0;\r\n  t5[2ULL] = 0.0105;\r\n  t5[3ULL] = -1.0E-6;\r\n  t5[4ULL] = -1.0E-6;\r\n  t13[0ULL] = 1.0012666666666667;\r\n  t13[1ULL] = -1.0;\r\n  t13[2ULL] = 2.4390243902439026E-5;\r\n  t13[3ULL] = 2.4390243902439026E-5;\r\n  t13[4ULL] = 0.002;\r\n  t13[5ULL] = 0.004002533333333334;\r\n  t13[6ULL] = 0.0020000000243902438;\r\n  t13[7ULL] = 0.0020000000243902438;\r\n  t15[0ULL] = 1.0;\r\n  t15[1ULL] = -1.0;\r\n  t15[2ULL] = -1.0;\r\n  t15[3ULL] = -1.0;\r\n  t15[4ULL] = 0.002;\r\n  t15[5ULL] = -1.0E-6;\r\n  t15[6ULL] = -1.0E-6;\r\n  t15[7ULL] = -1.0E-6;\r\n  t16[0ULL] = 1.0000000008333334;\r\n  t16[1ULL] = -1.0000000008333334;\r\n  t16[2ULL] = -1.0;\r\n  t16[3ULL] = 0.0020000000016666668;\r\n  t16[4ULL] = -1.0000000008333334E-6;\r\n  t16[5ULL] = 9.9999999999999986E-10;\r\n  t17[0ULL] = -1.0;\r\n  t17[1ULL] = 1.0003658536585365;\r\n  t17[2ULL] = 0.99999999999999989;\r\n  t17[3ULL] = 0.03;\r\n  t17[4ULL] = -0.002;\r\n  t17[5ULL] = 0.030001000365853656;\r\n  t17[6ULL] = 9.9999999999999974E-7;\r\n  t18[0ULL] = -0.012195121951219513;\r\n  t18[1ULL] = -0.012195121951219513;\r\n  t18[2ULL] = 0.0008333333333333335;\r\n  t18[3ULL] = -1.000000012195122;\r\n  t18[4ULL] = -1.000000012195122;\r\n  t18[5ULL] = 1.0000000008333334;\r\n  t18[6ULL] = -0.001;\r\n  for (t37 = 0ULL; t37 < 8ULL; t37++) {\r\n    t0[t37] = t1[t37];\r\n  }\r\n\r\n  t0[8ULL] = -0.0;\r\n  t0[9ULL] = -1.0;\r\n  for (t37 = 0ULL; t37 < 6ULL; t37++) {\r\n    t0[t37 + 10ULL] = t3[t37];\r\n  }\r\n\r\n  t0[16ULL] = -0.0;\r\n  t0[17ULL] = -1.0;\r\n  for (t37 = 0ULL; t37 < 5ULL; t37++) {\r\n    t0[t37 + 18ULL] = t5[t37];\r\n  }\r\n\r\n  t0[23ULL] = -0.0;\r\n  t0[24ULL] = -1.0;\r\n  t0[25ULL] = -0.0;\r\n  t0[26ULL] = -1.0;\r\n  t0[27ULL] = -0.0;\r\n  t0[28ULL] = -1.0;\r\n  t0[29ULL] = -0.0;\r\n  t0[30ULL] = -1.0;\r\n  t0[31ULL] = -0.0;\r\n  t0[32ULL] = 0.001;\r\n  t0[33ULL] = -0.0;\r\n  t0[34ULL] = 1.0;\r\n  t0[35ULL] = -0.0;\r\n  t0[36ULL] = -0.0;\r\n  t0[37ULL] = -0.5;\r\n  t0[38ULL] = -0.001;\r\n  for (t37 = 0ULL; t37 < 8ULL; t37++) {\r\n    t0[t37 + 39ULL] = t13[t37];\r\n  }\r\n\r\n  t0[47ULL] = -1.0;\r\n  t0[48ULL] = -1.0E-6;\r\n  for (t37 = 0ULL; t37 < 8ULL; t37++) {\r\n    t0[t37 + 49ULL] = t15[t37];\r\n  }\r\n\r\n  for (t37 = 0ULL; t37 < 6ULL; t37++) {\r\n    t0[t37 + 57ULL] = t16[t37];\r\n  }\r\n\r\n  for (t37 = 0ULL; t37 < 7ULL; t37++) {\r\n    t0[t37 + 63ULL] = t17[t37];\r\n  }\r\n\r\n  for (t37 = 0ULL; t37 < 7ULL; t37++) {\r\n    t0[t37 + 70ULL] = t18[t37];\r\n  }\r\n\r\n  out.mX[0] = t0[0];\r\n  out.mX[1] = t0[1];\r\n  out.mX[2] = t0[2];\r\n  out.mX[3] = t0[3];\r\n  out.mX[4] = t0[4];\r\n  out.mX[5] = t0[5];\r\n  out.mX[6] = t0[6];\r\n  out.mX[7] = t0[7];\r\n  out.mX[8] = t0[8];\r\n  out.mX[9] = t0[9];\r\n  out.mX[10] = t0[10];\r\n  out.mX[11] = t0[11];\r\n  out.mX[12] = t0[12];\r\n  out.mX[13] = t0[13];\r\n  out.mX[14] = t0[14];\r\n  out.mX[15] = t0[15];\r\n  out.mX[16] = t0[16];\r\n  out.mX[17] = t0[17];\r\n  out.mX[18] = t0[18];\r\n  out.mX[19] = t0[19];\r\n  out.mX[20] = t0[20];\r\n  out.mX[21] = t0[21];\r\n  out.mX[22] = t0[22];\r\n  out.mX[23] = t0[23];\r\n  out.mX[24] = t0[24];\r\n  out.mX[25] = t0[25];\r\n  out.mX[26] = t0[26];\r\n  out.mX[27] = t0[27];\r\n  out.mX[28] = t0[28];\r\n  out.mX[29] = t0[29];\r\n  out.mX[30] = t0[30];\r\n  out.mX[31] = t0[31];\r\n  out.mX[32] = t0[32];\r\n  out.mX[33] = t0[33];\r\n  out.mX[34] = t0[34];\r\n  out.mX[35] = t0[35];\r\n  out.mX[36] = t0[36];\r\n  out.mX[37] = t0[37];\r\n  out.mX[38] = t0[38];\r\n  out.mX[39] = t0[39];\r\n  out.mX[40] = t0[40];\r\n  out.mX[41] = t0[41];\r\n  out.mX[42] = t0[42];\r\n  out.mX[43] = t0[43];\r\n  out.mX[44] = t0[44];\r\n  out.mX[45] = t0[45];\r\n  out.mX[46] = t0[46];\r\n  out.mX[47] = t0[47];\r\n  out.mX[48] = t0[48];\r\n  out.mX[49] = t0[49];\r\n  out.mX[50] = t0[50];\r\n  out.mX[51] = t0[51];\r\n  out.mX[52] = t0[52];\r\n  out.mX[53] = t0[53];\r\n  out.mX[54] = t0[54];\r\n  out.mX[55] = t0[55];\r\n  out.mX[56] = t0[56];\r\n  out.mX[57] = t0[57];\r\n  out.mX[58] = t0[58];\r\n  out.mX[59] = t0[59];\r\n  out.mX[60] = t0[60];\r\n  out.mX[61] = t0[61];\r\n  out.mX[62] = t0[62];\r\n  out.mX[63] = t0[63];\r\n  out.mX[64] = t0[64];\r\n  out.mX[65] = t0[65];\r\n  out.mX[66] = t0[66];\r\n  out.mX[67] = t0[67];\r\n  out.mX[68] = t0[68];\r\n  out.mX[69] = t0[69];\r\n  out.mX[70] = t0[70];\r\n  out.mX[71] = t0[71];\r\n  out.mX[72] = t0[72];\r\n  out.mX[73] = t0[73];\r\n  out.mX[74] = t0[74];\r\n  out.mX[75] = t0[75];\r\n  out.mX[76] = t0[76];\r\n  out.mX[77] = -1.0;\r\n  out.mX[78] = 1.000000001;\r\n  out.mX[79] = -1.0;\r\n  out.mX[80] = 1.0E-6;\r\n  out.mX[81] = -1.0;\r\n  out.mX[82] = -1.0;\r\n  (void)sys;\r\n  (void)t70;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_a.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_a.h - header for method DCDC_Buck_9d5357ce_1_ds_a */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_A_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_A_H    1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_a(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                                 /* #ifndef DCDC_BUCK_9D5357CE_1_DS_A_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_a_p.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_a_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_a_p(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mA_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 8;\r\n  out.mJc[2] = 10;\r\n  out.mJc[3] = 16;\r\n  out.mJc[4] = 18;\r\n  out.mJc[5] = 23;\r\n  out.mJc[6] = 25;\r\n  out.mJc[7] = 27;\r\n  out.mJc[8] = 29;\r\n  out.mJc[9] = 31;\r\n  out.mJc[10] = 33;\r\n  out.mJc[11] = 35;\r\n  out.mJc[12] = 36;\r\n  out.mJc[13] = 37;\r\n  out.mJc[14] = 39;\r\n  out.mJc[15] = 39;\r\n  out.mJc[16] = 47;\r\n  out.mJc[17] = 49;\r\n  out.mJc[18] = 57;\r\n  out.mJc[19] = 63;\r\n  out.mJc[20] = 70;\r\n  out.mJc[21] = 77;\r\n  out.mJc[22] = 79;\r\n  out.mJc[23] = 81;\r\n  out.mJc[24] = 81;\r\n  out.mJc[25] = 81;\r\n  out.mJc[26] = 82;\r\n  out.mJc[27] = 82;\r\n  out.mJc[28] = 82;\r\n  out.mJc[29] = 83;\r\n  out.mJc[30] = 83;\r\n  out.mJc[31] = 83;\r\n  out.mIr[0] = 1;\r\n  out.mIr[1] = 2;\r\n  out.mIr[2] = 3;\r\n  out.mIr[3] = 4;\r\n  out.mIr[4] = 12;\r\n  out.mIr[5] = 16;\r\n  out.mIr[6] = 17;\r\n  out.mIr[7] = 18;\r\n  out.mIr[8] = 0;\r\n  out.mIr[9] = 15;\r\n  out.mIr[10] = 1;\r\n  out.mIr[11] = 4;\r\n  out.mIr[12] = 7;\r\n  out.mIr[13] = 16;\r\n  out.mIr[14] = 18;\r\n  out.mIr[15] = 21;\r\n  out.mIr[16] = 1;\r\n  out.mIr[17] = 16;\r\n  out.mIr[18] = 3;\r\n  out.mIr[19] = 6;\r\n  out.mIr[20] = 12;\r\n  out.mIr[21] = 17;\r\n  out.mIr[22] = 20;\r\n  out.mIr[23] = 3;\r\n  out.mIr[24] = 17;\r\n  out.mIr[25] = 4;\r\n  out.mIr[26] = 18;\r\n  out.mIr[27] = 5;\r\n  out.mIr[28] = 19;\r\n  out.mIr[29] = 6;\r\n  out.mIr[30] = 20;\r\n  out.mIr[31] = 8;\r\n  out.mIr[32] = 21;\r\n  out.mIr[33] = 9;\r\n  out.mIr[34] = 12;\r\n  out.mIr[35] = 10;\r\n  out.mIr[36] = 11;\r\n  out.mIr[37] = 1;\r\n  out.mIr[38] = 16;\r\n  out.mIr[39] = 1;\r\n  out.mIr[40] = 2;\r\n  out.mIr[41] = 3;\r\n  out.mIr[42] = 4;\r\n  out.mIr[43] = 12;\r\n  out.mIr[44] = 16;\r\n  out.mIr[45] = 17;\r\n  out.mIr[46] = 18;\r\n  out.mIr[47] = 0;\r\n  out.mIr[48] = 15;\r\n  out.mIr[49] = 1;\r\n  out.mIr[50] = 4;\r\n  out.mIr[51] = 5;\r\n  out.mIr[52] = 6;\r\n  out.mIr[53] = 16;\r\n  out.mIr[54] = 18;\r\n  out.mIr[55] = 19;\r\n  out.mIr[56] = 20;\r\n  out.mIr[57] = 1;\r\n  out.mIr[58] = 4;\r\n  out.mIr[59] = 7;\r\n  out.mIr[60] = 16;\r\n  out.mIr[61] = 18;\r\n  out.mIr[62] = 21;\r\n  out.mIr[63] = 1;\r\n  out.mIr[64] = 3;\r\n  out.mIr[65] = 6;\r\n  out.mIr[66] = 12;\r\n  out.mIr[67] = 16;\r\n  out.mIr[68] = 17;\r\n  out.mIr[69] = 20;\r\n  out.mIr[70] = 3;\r\n  out.mIr[71] = 4;\r\n  out.mIr[72] = 6;\r\n  out.mIr[73] = 17;\r\n  out.mIr[74] = 18;\r\n  out.mIr[75] = 20;\r\n  out.mIr[76] = 21;\r\n  out.mIr[77] = 8;\r\n  out.mIr[78] = 21;\r\n  out.mIr[79] = 9;\r\n  out.mIr[80] = 12;\r\n  out.mIr[81] = 10;\r\n  out.mIr[82] = 11;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_a_p.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_a_p.h - header for method DCDC_Buck_9d5357ce_1_ds_a_p */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_A_P_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_A_P_H  1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_a_p(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                               /* #ifndef DCDC_BUCK_9D5357CE_1_DS_A_P_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_assert.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_assert.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_assert(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmIntVector out;\r\n  (void)t1;\r\n  out = t2->mASSERT;\r\n  out.mX[0] = 1;\r\n  out.mX[1] = 1;\r\n  out.mX[2] = 1;\r\n  out.mX[3] = 1;\r\n  out.mX[4] = 1;\r\n  out.mX[5] = 1;\r\n  out.mX[6] = 1;\r\n  out.mX[7] = 1;\r\n  out.mX[8] = 1;\r\n  out.mX[9] = 1;\r\n  out.mX[10] = 1;\r\n  out.mX[11] = 1;\r\n  out.mX[12] = 1;\r\n  out.mX[13] = 1;\r\n  out.mX[14] = 1;\r\n  out.mX[15] = 1;\r\n  out.mX[16] = 1;\r\n  out.mX[17] = 1;\r\n  out.mX[18] = 1;\r\n  out.mX[19] = 1;\r\n  out.mX[20] = 1;\r\n  out.mX[21] = 1;\r\n  out.mX[22] = 1;\r\n  out.mX[23] = 1;\r\n  out.mX[24] = 1;\r\n  out.mX[25] = 1;\r\n  out.mX[26] = 1;\r\n  out.mX[27] = 1;\r\n  out.mX[28] = 1;\r\n  out.mX[29] = 1;\r\n  out.mX[30] = 1;\r\n  out.mX[31] = 1;\r\n  out.mX[32] = 1;\r\n  out.mX[33] = 1;\r\n  out.mX[34] = 1;\r\n  out.mX[35] = 1;\r\n  out.mX[36] = 1;\r\n  out.mX[37] = 1;\r\n  out.mX[38] = 1;\r\n  out.mX[39] = 1;\r\n  out.mX[40] = 1;\r\n  out.mX[41] = 1;\r\n  out.mX[42] = 1;\r\n  out.mX[43] = 1;\r\n  out.mX[44] = 1;\r\n  out.mX[45] = 1;\r\n  out.mX[46] = 1;\r\n  out.mX[47] = 1;\r\n  out.mX[48] = 1;\r\n  out.mX[49] = 1;\r\n  out.mX[50] = 1;\r\n  out.mX[51] = 1;\r\n  out.mX[52] = 1;\r\n  out.mX[53] = 1;\r\n  out.mX[54] = 1;\r\n  out.mX[55] = 1;\r\n  out.mX[56] = 1;\r\n  out.mX[57] = 1;\r\n  out.mX[58] = 1;\r\n  out.mX[59] = 1;\r\n  out.mX[60] = 1;\r\n  out.mX[61] = 1;\r\n  out.mX[62] = 1;\r\n  out.mX[63] = 1;\r\n  out.mX[64] = 1;\r\n  out.mX[65] = 1;\r\n  out.mX[66] = 1;\r\n  out.mX[67] = 1;\r\n  out.mX[68] = 1;\r\n  out.mX[69] = 1;\r\n  out.mX[70] = 1;\r\n  out.mX[71] = 1;\r\n  out.mX[72] = 1;\r\n  out.mX[73] = 1;\r\n  out.mX[74] = 1;\r\n  out.mX[75] = 1;\r\n  out.mX[76] = 1;\r\n  out.mX[77] = 1;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_assert.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_assert.h - header for method DCDC_Buck_9d5357ce_1_ds_assert */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_ASSERT_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_ASSERT_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_assert(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                            /* #ifndef DCDC_BUCK_9D5357CE_1_DS_ASSERT_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_dxf.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_dxf.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_dxf(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t89, NeDsMethodOutput *t90)\r\n{\r\n  PmRealVector out;\r\n  real_T X_idx_10;\r\n  real_T X_idx_11;\r\n  real_T X_idx_12;\r\n  real_T X_idx_22;\r\n  real_T X_idx_25;\r\n  real_T X_idx_28;\r\n  real_T intrm_sf_mf_14;\r\n  real_T t12;\r\n  real_T t2;\r\n  real_T t3;\r\n  real_T t4;\r\n  real_T t6;\r\n  real_T t7;\r\n  real_T t8;\r\n  real_T t9;\r\n  int32_T M_idx_0;\r\n  int32_T M_idx_1;\r\n  int32_T M_idx_10;\r\n  int32_T M_idx_2;\r\n  int32_T M_idx_3;\r\n  int32_T M_idx_4;\r\n  int32_T M_idx_5;\r\n  int32_T M_idx_6;\r\n  int32_T M_idx_7;\r\n  int32_T M_idx_8;\r\n  int32_T M_idx_9;\r\n  M_idx_0 = t89->mM.mX[0];\r\n  M_idx_1 = t89->mM.mX[1];\r\n  M_idx_2 = t89->mM.mX[2];\r\n  M_idx_3 = t89->mM.mX[3];\r\n  M_idx_4 = t89->mM.mX[4];\r\n  M_idx_5 = t89->mM.mX[5];\r\n  M_idx_6 = t89->mM.mX[6];\r\n  M_idx_7 = t89->mM.mX[7];\r\n  M_idx_8 = t89->mM.mX[8];\r\n  M_idx_9 = t89->mM.mX[9];\r\n  M_idx_10 = t89->mM.mX[10];\r\n  X_idx_10 = t89->mX.mX[10];\r\n  X_idx_11 = t89->mX.mX[11];\r\n  X_idx_12 = t89->mX.mX[12];\r\n  X_idx_22 = t89->mX.mX[22];\r\n  X_idx_25 = t89->mX.mX[25];\r\n  X_idx_28 = t89->mX.mX[28];\r\n  out = t90->mDXF;\r\n  intrm_sf_mf_14 = (X_idx_28 * 1.0E-6 + X_idx_12) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  t8 = (X_idx_22 * 1.0E-6 + X_idx_10) * 1.602176487E-19 / 4.3497335432938027E-21;\r\n  X_idx_12 = (X_idx_25 * 1.0E-6 + X_idx_11) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  X_idx_28 = 1.602176487E-19;\r\n  X_idx_10 = X_idx_28 / 4.3497335432938027E-21;\r\n  X_idx_22 = 1.6021764869999998E-25;\r\n  X_idx_11 = X_idx_22 / 4.3497335432938027E-21;\r\n  X_idx_25 = X_idx_28 / 4.3497335432938027E-21;\r\n  t9 = X_idx_22 / 4.3497335432938027E-21;\r\n  t3 = X_idx_28 / 4.3497335432938027E-21;\r\n  X_idx_28 = X_idx_22 / 4.3497335432938027E-21;\r\n  if (t8 > 80.0) {\r\n    X_idx_22 = -(X_idx_25 * 3.4567260021088461E-12 * 5.54062238439351E+34);\r\n  } else if (M_idx_3 != 0) {\r\n    X_idx_22 = -(X_idx_25 * 3.4567260021088461E-12 * 4.9060947306492808E-35);\r\n  } else {\r\n    X_idx_22 = -(exp(t8) * X_idx_25 * 3.4567260021088461E-12);\r\n  }\r\n\r\n  if (M_idx_6 != 0) {\r\n    X_idx_25 = 1000.0;\r\n  } else {\r\n    X_idx_25 = 1.0E-5;\r\n  }\r\n\r\n  if (X_idx_12 > 80.0) {\r\n    t2 = -(t3 * 3.4567260021088461E-12 * 5.54062238439351E+34);\r\n  } else if (M_idx_4 != 0) {\r\n    t2 = -(t3 * 3.4567260021088461E-12 * 4.9060947306492808E-35);\r\n  } else {\r\n    t2 = -(exp(X_idx_12) * t3 * 3.4567260021088461E-12);\r\n  }\r\n\r\n  if (M_idx_8 != 0) {\r\n    t3 = 1000.0;\r\n  } else {\r\n    t3 = 1.0E-5;\r\n  }\r\n\r\n  if (intrm_sf_mf_14 > 80.0) {\r\n    t4 = -(X_idx_10 * 3.4567260021088461E-12 * 5.54062238439351E+34);\r\n  } else if (M_idx_5 != 0) {\r\n    t4 = -(X_idx_10 * 3.4567260021088461E-12 * 4.9060947306492808E-35);\r\n  } else {\r\n    t4 = -(exp(intrm_sf_mf_14) * X_idx_10 * 3.4567260021088461E-12);\r\n  }\r\n\r\n  if (M_idx_10 != 0) {\r\n    X_idx_10 = 1000.0;\r\n  } else {\r\n    X_idx_10 = 1.0E-5;\r\n  }\r\n\r\n  if (M_idx_0 != 0) {\r\n    t6 = 1000.5;\r\n  } else {\r\n    t6 = 0.50001;\r\n  }\r\n\r\n  if (t8 > 80.0) {\r\n    t7 = -1.0 - t9 * 3.4567260021088461E-12 * 5.54062238439351E+34;\r\n  } else if (M_idx_3 != 0) {\r\n    t7 = -1.0 - t9 * 3.4567260021088461E-12 * 4.9060947306492808E-35;\r\n  } else {\r\n    t7 = -1.0 - exp(t8) * t9 * 3.4567260021088461E-12;\r\n  }\r\n\r\n  if (M_idx_6 != 0) {\r\n    t8 = 0.001;\r\n  } else {\r\n    t8 = 1.0000000000000001E-11;\r\n  }\r\n\r\n  if (X_idx_12 > 80.0) {\r\n    t9 = -1.0 - X_idx_28 * 3.4567260021088461E-12 * 5.54062238439351E+34;\r\n  } else if (M_idx_4 != 0) {\r\n    t9 = -1.0 - X_idx_28 * 3.4567260021088461E-12 * 4.9060947306492808E-35;\r\n  } else {\r\n    t9 = -1.0 - exp(X_idx_12) * X_idx_28 * 3.4567260021088461E-12;\r\n  }\r\n\r\n  if (M_idx_8 != 0) {\r\n    X_idx_12 = 0.001;\r\n  } else {\r\n    X_idx_12 = 1.0000000000000001E-11;\r\n  }\r\n\r\n  if (intrm_sf_mf_14 > 80.0) {\r\n    X_idx_28 = -1.0 - X_idx_11 * 3.4567260021088461E-12 * 5.54062238439351E+34;\r\n  } else if (M_idx_5 != 0) {\r\n    X_idx_28 = -1.0 - X_idx_11 * 3.4567260021088461E-12 * 4.9060947306492808E-35;\r\n  } else {\r\n    X_idx_28 = -1.0 - exp(intrm_sf_mf_14) * X_idx_11 * 3.4567260021088461E-12;\r\n  }\r\n\r\n  if (M_idx_10 != 0) {\r\n    t12 = 0.001;\r\n  } else {\r\n    t12 = 1.0000000000000001E-11;\r\n  }\r\n\r\n  intrm_sf_mf_14 = 1.0E-6;\r\n  X_idx_11 = 1.0E-12;\r\n  out.mX[0] = -0.5;\r\n  out.mX[1] = 1.0;\r\n  out.mX[2] = X_idx_22;\r\n  out.mX[3] = X_idx_25;\r\n  out.mX[4] = intrm_sf_mf_14;\r\n  out.mX[5] = t2;\r\n  out.mX[6] = t3;\r\n  out.mX[7] = intrm_sf_mf_14;\r\n  out.mX[8] = t4;\r\n  out.mX[9] = X_idx_10;\r\n  out.mX[10] = intrm_sf_mf_14;\r\n  out.mX[11] = t6;\r\n  out.mX[12] = intrm_sf_mf_14;\r\n  out.mX[13] = 1.0;\r\n  out.mX[14] = (M_idx_1 != 0 ? -0.2 : -1.0E+6) / 1.0E+6;\r\n  out.mX[15] = -0.001;\r\n  out.mX[16] = t7;\r\n  out.mX[17] = t8;\r\n  out.mX[18] = X_idx_11;\r\n  out.mX[19] = 1.0;\r\n  out.mX[20] = 1.0;\r\n  out.mX[21] = -1.0;\r\n  out.mX[22] = (M_idx_7 != 0 ? -0.009 : -1.0E+6) / 1.0E+6;\r\n  out.mX[23] = t9;\r\n  out.mX[24] = X_idx_12;\r\n  out.mX[25] = X_idx_11;\r\n  out.mX[26] = 1.0;\r\n  out.mX[27] = 1.0;\r\n  out.mX[28] = -1.0;\r\n  out.mX[29] = (M_idx_9 != 0 ? -0.009 : -1.0E+6) / 1.0E+6;\r\n  out.mX[30] = X_idx_28;\r\n  out.mX[31] = t12;\r\n  out.mX[32] = X_idx_11;\r\n  out.mX[33] = 1.0;\r\n  out.mX[34] = 1.0;\r\n  out.mX[35] = -1.0;\r\n  out.mX[36] = (M_idx_2 != 0 ? -0.009 : -1.0E+6) / 1.0E+6;\r\n  (void)sys;\r\n  (void)t90;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_dxf.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_dxf.h - header for method DCDC_Buck_9d5357ce_1_ds_dxf */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_DXF_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_DXF_H  1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_dxf(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                               /* #ifndef DCDC_BUCK_9D5357CE_1_DS_DXF_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_dxf_p.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_dxf_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_dxf_p(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDXF_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 1;\r\n  out.mJc[2] = 1;\r\n  out.mJc[3] = 1;\r\n  out.mJc[4] = 1;\r\n  out.mJc[5] = 2;\r\n  out.mJc[6] = 2;\r\n  out.mJc[7] = 2;\r\n  out.mJc[8] = 2;\r\n  out.mJc[9] = 2;\r\n  out.mJc[10] = 2;\r\n  out.mJc[11] = 5;\r\n  out.mJc[12] = 8;\r\n  out.mJc[13] = 11;\r\n  out.mJc[14] = 13;\r\n  out.mJc[15] = 15;\r\n  out.mJc[16] = 16;\r\n  out.mJc[17] = 16;\r\n  out.mJc[18] = 16;\r\n  out.mJc[19] = 16;\r\n  out.mJc[20] = 16;\r\n  out.mJc[21] = 16;\r\n  out.mJc[22] = 16;\r\n  out.mJc[23] = 19;\r\n  out.mJc[24] = 21;\r\n  out.mJc[25] = 23;\r\n  out.mJc[26] = 26;\r\n  out.mJc[27] = 28;\r\n  out.mJc[28] = 30;\r\n  out.mJc[29] = 33;\r\n  out.mJc[30] = 35;\r\n  out.mJc[31] = 37;\r\n  out.mIr[0] = 13;\r\n  out.mIr[1] = 22;\r\n  out.mIr[2] = 22;\r\n  out.mIr[3] = 25;\r\n  out.mIr[4] = 26;\r\n  out.mIr[5] = 23;\r\n  out.mIr[6] = 27;\r\n  out.mIr[7] = 28;\r\n  out.mIr[8] = 24;\r\n  out.mIr[9] = 29;\r\n  out.mIr[10] = 30;\r\n  out.mIr[11] = 13;\r\n  out.mIr[12] = 14;\r\n  out.mIr[13] = 13;\r\n  out.mIr[14] = 14;\r\n  out.mIr[15] = 13;\r\n  out.mIr[16] = 22;\r\n  out.mIr[17] = 25;\r\n  out.mIr[18] = 26;\r\n  out.mIr[19] = 22;\r\n  out.mIr[20] = 25;\r\n  out.mIr[21] = 22;\r\n  out.mIr[22] = 26;\r\n  out.mIr[23] = 23;\r\n  out.mIr[24] = 27;\r\n  out.mIr[25] = 28;\r\n  out.mIr[26] = 23;\r\n  out.mIr[27] = 27;\r\n  out.mIr[28] = 23;\r\n  out.mIr[29] = 28;\r\n  out.mIr[30] = 24;\r\n  out.mIr[31] = 29;\r\n  out.mIr[32] = 30;\r\n  out.mIr[33] = 24;\r\n  out.mIr[34] = 29;\r\n  out.mIr[35] = 24;\r\n  out.mIr[36] = 30;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_dxf_p.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_dxf_p.h - header for method DCDC_Buck_9d5357ce_1_ds_dxf_p */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_DXF_P_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_DXF_P_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_dxf_p(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                             /* #ifndef DCDC_BUCK_9D5357CE_1_DS_DXF_P_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_dxy_p.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_dxy_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_dxy_p(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mDXY_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 2ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 1;\r\n  out.mJc[2] = 1;\r\n  out.mJc[3] = 1;\r\n  out.mJc[4] = 1;\r\n  out.mJc[5] = 1;\r\n  out.mJc[6] = 1;\r\n  out.mJc[7] = 1;\r\n  out.mJc[8] = 1;\r\n  out.mJc[9] = 1;\r\n  out.mJc[10] = 2;\r\n  out.mJc[11] = 2;\r\n  out.mJc[12] = 2;\r\n  out.mJc[13] = 2;\r\n  out.mJc[14] = 2;\r\n  out.mJc[15] = 2;\r\n  out.mJc[16] = 3;\r\n  out.mJc[17] = 3;\r\n  out.mJc[18] = 3;\r\n  out.mJc[19] = 3;\r\n  out.mJc[20] = 3;\r\n  out.mJc[21] = 3;\r\n  out.mJc[22] = 4;\r\n  out.mJc[23] = 4;\r\n  out.mJc[24] = 4;\r\n  out.mJc[25] = 4;\r\n  out.mJc[26] = 4;\r\n  out.mJc[27] = 4;\r\n  out.mJc[28] = 4;\r\n  out.mJc[29] = 4;\r\n  out.mJc[30] = 4;\r\n  out.mJc[31] = 4;\r\n  out.mIr[0] = 1;\r\n  out.mIr[1] = 0;\r\n  out.mIr[2] = 1;\r\n  out.mIr[3] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_dxy_p.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_dxy_p.h - header for method DCDC_Buck_9d5357ce_1_ds_dxy_p */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_DXY_P_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_DXY_P_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_dxy_p(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                             /* #ifndef DCDC_BUCK_9D5357CE_1_DS_DXY_P_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_external_struct.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#ifndef struct__ExternalFunctionStructTag\r\n#define struct__ExternalFunctionStructTag\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_externals.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_f.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_f.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_f(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t23, NeDsMethodOutput *t24)\r\n{\r\n  PmRealVector out;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_mosfet_equation_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_diode_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_mosfet_equation_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_diode_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_mosfet_equation_v;\r\n  real_T X_idx_0;\r\n  real_T X_idx_10;\r\n  real_T X_idx_11;\r\n  real_T X_idx_12;\r\n  real_T X_idx_13;\r\n  real_T X_idx_14;\r\n  real_T X_idx_15;\r\n  real_T X_idx_22;\r\n  real_T X_idx_23;\r\n  real_T X_idx_24;\r\n  real_T X_idx_25;\r\n  real_T X_idx_26;\r\n  real_T X_idx_27;\r\n  real_T X_idx_28;\r\n  real_T X_idx_29;\r\n  real_T X_idx_30;\r\n  real_T X_idx_4;\r\n  real_T t1;\r\n  real_T t10;\r\n  real_T t4;\r\n  real_T t7;\r\n  real_T t9;\r\n  int32_T M_idx_0;\r\n  int32_T M_idx_1;\r\n  int32_T M_idx_10;\r\n  int32_T M_idx_2;\r\n  int32_T M_idx_3;\r\n  int32_T M_idx_4;\r\n  int32_T M_idx_5;\r\n  int32_T M_idx_6;\r\n  int32_T M_idx_7;\r\n  int32_T M_idx_8;\r\n  int32_T M_idx_9;\r\n  M_idx_0 = t23->mM.mX[0];\r\n  M_idx_1 = t23->mM.mX[1];\r\n  M_idx_2 = t23->mM.mX[2];\r\n  M_idx_3 = t23->mM.mX[3];\r\n  M_idx_4 = t23->mM.mX[4];\r\n  M_idx_5 = t23->mM.mX[5];\r\n  M_idx_6 = t23->mM.mX[6];\r\n  M_idx_7 = t23->mM.mX[7];\r\n  M_idx_8 = t23->mM.mX[8];\r\n  M_idx_9 = t23->mM.mX[9];\r\n  M_idx_10 = t23->mM.mX[10];\r\n  X_idx_0 = t23->mX.mX[0];\r\n  X_idx_4 = t23->mX.mX[4];\r\n  X_idx_10 = t23->mX.mX[10];\r\n  X_idx_11 = t23->mX.mX[11];\r\n  X_idx_12 = t23->mX.mX[12];\r\n  X_idx_13 = t23->mX.mX[13];\r\n  X_idx_14 = t23->mX.mX[14];\r\n  X_idx_15 = t23->mX.mX[15];\r\n  X_idx_22 = t23->mX.mX[22];\r\n  X_idx_23 = t23->mX.mX[23];\r\n  X_idx_24 = t23->mX.mX[24];\r\n  X_idx_25 = t23->mX.mX[25];\r\n  X_idx_26 = t23->mX.mX[26];\r\n  X_idx_27 = t23->mX.mX[27];\r\n  X_idx_28 = t23->mX.mX[28];\r\n  X_idx_29 = t23->mX.mX[29];\r\n  X_idx_30 = t23->mX.mX[30];\r\n  out = t24->mF;\r\n  t1 = ((X_idx_0 * -0.5 + X_idx_13 * 0.5) + X_idx_15 * -0.001) + X_idx_14;\r\n  t4 = ((-X_idx_22 + -X_idx_24) + X_idx_4) + X_idx_23;\r\n  t7 = (-X_idx_25 + -X_idx_27) + X_idx_26;\r\n  t9 = (-X_idx_28 + -X_idx_30) + X_idx_29;\r\n  X_idx_0 = (-X_idx_10 + X_idx_22 * -1.0E-6) + -9.0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_mosfet_equation_v = (X_idx_22 * 1.0E-6 +\r\n    X_idx_10) + 9.0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_diode_v = (-X_idx_11 + X_idx_25 * -1.0E-6)\r\n    + -9.0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_mosfet_equation_v = (X_idx_25 * 1.0E-6 +\r\n    X_idx_11) + 9.0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_diode_v = (-X_idx_12 + X_idx_28 * -1.0E-6)\r\n    + -9.0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_mosfet_equation_v = (X_idx_28 * 1.0E-6 +\r\n    X_idx_12) + 9.0;\r\n  t10 = (X_idx_28 * 1.0E-6 + X_idx_12) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  X_idx_10 = (X_idx_22 * 1.0E-6 + X_idx_10) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  X_idx_12 = (X_idx_25 * 1.0E-6 + X_idx_11) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  if (M_idx_0 != 0) {\r\n    X_idx_28 = t1 - (-X_idx_13 - 1.599999984) / 0.001;\r\n  } else {\r\n    X_idx_28 = t1 - -X_idx_13 * 1.0E-5;\r\n  }\r\n\r\n  if (M_idx_1 != 0) {\r\n    t1 = X_idx_13 - X_idx_14 * 0.2;\r\n  } else {\r\n    t1 = X_idx_13 - X_idx_14 / 1.0E-6;\r\n  }\r\n\r\n  if (X_idx_10 > 80.0) {\r\n    X_idx_15 = t4 - ((X_idx_10 - 79.0) * 5.54062238439351E+34 - 1.0) *\r\n      3.4567260021088461E-12;\r\n  } else if (M_idx_3 != 0) {\r\n    X_idx_15 = t4 - ((X_idx_10 + 80.0) * 4.9060947306492808E-35 - 1.0) *\r\n      3.4567260021088461E-12;\r\n  } else {\r\n    X_idx_15 = t4 - (exp(X_idx_10) - 1.0) * 3.4567260021088461E-12;\r\n  }\r\n\r\n  if (X_idx_12 > 80.0) {\r\n    X_idx_4 = t7 - ((X_idx_12 - 79.0) * 5.54062238439351E+34 - 1.0) *\r\n      3.4567260021088461E-12;\r\n  } else if (M_idx_4 != 0) {\r\n    X_idx_4 = t7 - ((X_idx_12 + 80.0) * 4.9060947306492808E-35 - 1.0) *\r\n      3.4567260021088461E-12;\r\n  } else {\r\n    X_idx_4 = t7 - (exp(X_idx_12) - 1.0) * 3.4567260021088461E-12;\r\n  }\r\n\r\n  if (t10 > 80.0) {\r\n    t4 = t9 - ((t10 - 79.0) * 5.54062238439351E+34 - 1.0) *\r\n      3.4567260021088461E-12;\r\n  } else if (M_idx_5 != 0) {\r\n    t4 = t9 - ((t10 + 80.0) * 4.9060947306492808E-35 - 1.0) *\r\n      3.4567260021088461E-12;\r\n  } else {\r\n    t4 = t9 - (exp(t10) - 1.0) * 3.4567260021088461E-12;\r\n  }\r\n\r\n  if (M_idx_6 != 0) {\r\n    X_idx_0 = X_idx_23 - (X_idx_0 - 0.84999999149999994) / 0.001;\r\n  } else {\r\n    X_idx_0 = X_idx_23 - X_idx_0 * 1.0E-5;\r\n  }\r\n\r\n  if (M_idx_7 != 0) {\r\n    X_idx_10 = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_mosfet_equation_v - X_idx_24 *\r\n      0.009;\r\n  } else {\r\n    X_idx_10 = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_mosfet_equation_v - X_idx_24 /\r\n      1.0E-6;\r\n  }\r\n\r\n  if (M_idx_8 != 0) {\r\n    t7 = X_idx_26 - (DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_diode_v -\r\n                     0.84999999149999994) / 0.001;\r\n  } else {\r\n    t7 = X_idx_26 - DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_diode_v * 1.0E-5;\r\n  }\r\n\r\n  if (M_idx_9 != 0) {\r\n    X_idx_12 = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_mosfet_equation_v - X_idx_27 *\r\n      0.009;\r\n  } else {\r\n    X_idx_12 = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET2_mosfet_equation_v - X_idx_27 /\r\n      1.0E-6;\r\n  }\r\n\r\n  if (M_idx_10 != 0) {\r\n    t9 = X_idx_29 - (DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_diode_v -\r\n                     0.84999999149999994) / 0.001;\r\n  } else {\r\n    t9 = X_idx_29 - DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_diode_v * 1.0E-5;\r\n  }\r\n\r\n  if (M_idx_2 != 0) {\r\n    t10 = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_mosfet_equation_v - X_idx_30 *\r\n      0.009;\r\n  } else {\r\n    t10 = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET3_mosfet_equation_v - X_idx_30 /\r\n      1.0E-6;\r\n  }\r\n\r\n  out.mX[0] = -0.0;\r\n  out.mX[1] = -0.0;\r\n  out.mX[2] = -0.0;\r\n  out.mX[3] = -0.0;\r\n  out.mX[4] = -0.0;\r\n  out.mX[5] = -0.0;\r\n  out.mX[6] = -0.0;\r\n  out.mX[7] = -0.0;\r\n  out.mX[8] = -0.0;\r\n  out.mX[9] = -0.0;\r\n  out.mX[10] = -0.0;\r\n  out.mX[11] = -0.0;\r\n  out.mX[12] = -0.0;\r\n  out.mX[13] = X_idx_28;\r\n  out.mX[14] = t1 / 1.0E+6;\r\n  out.mX[15] = 9.0;\r\n  out.mX[16] = 0.0;\r\n  out.mX[17] = 0.0;\r\n  out.mX[18] = 0.0;\r\n  out.mX[19] = 0.0;\r\n  out.mX[20] = 0.0;\r\n  out.mX[21] = 0.0;\r\n  out.mX[22] = X_idx_15;\r\n  out.mX[23] = X_idx_4;\r\n  out.mX[24] = t4;\r\n  out.mX[25] = X_idx_0;\r\n  out.mX[26] = X_idx_10 / 1.0E+6;\r\n  out.mX[27] = t7;\r\n  out.mX[28] = X_idx_12 / 1.0E+6;\r\n  out.mX[29] = t9;\r\n  out.mX[30] = t10 / 1.0E+6;\r\n  (void)sys;\r\n  (void)t24;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_f.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_f.h - header for method DCDC_Buck_9d5357ce_1_ds_f */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_F_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_F_H    1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_f(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                                 /* #ifndef DCDC_BUCK_9D5357CE_1_DS_F_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_imax.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_imax.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_imax(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmRealVector out;\r\n  (void)t1;\r\n  out = t2->mIMAX;\r\n  out.mX[0] = pmf_get_inf();\r\n  out.mX[1] = pmf_get_inf();\r\n  out.mX[2] = pmf_get_inf();\r\n  out.mX[3] = pmf_get_inf();\r\n  out.mX[4] = pmf_get_inf();\r\n  out.mX[5] = pmf_get_inf();\r\n  out.mX[6] = pmf_get_inf();\r\n  out.mX[7] = pmf_get_inf();\r\n  out.mX[8] = pmf_get_inf();\r\n  out.mX[9] = pmf_get_inf();\r\n  out.mX[10] = pmf_get_inf();\r\n  out.mX[11] = pmf_get_inf();\r\n  out.mX[12] = pmf_get_inf();\r\n  out.mX[13] = pmf_get_inf();\r\n  out.mX[14] = pmf_get_inf();\r\n  out.mX[15] = pmf_get_inf();\r\n  out.mX[16] = pmf_get_inf();\r\n  out.mX[17] = pmf_get_inf();\r\n  out.mX[18] = pmf_get_inf();\r\n  out.mX[19] = pmf_get_inf();\r\n  out.mX[20] = pmf_get_inf();\r\n  out.mX[21] = pmf_get_inf();\r\n  out.mX[22] = pmf_get_inf();\r\n  out.mX[23] = pmf_get_inf();\r\n  out.mX[24] = pmf_get_inf();\r\n  out.mX[25] = pmf_get_inf();\r\n  out.mX[26] = pmf_get_inf();\r\n  out.mX[27] = pmf_get_inf();\r\n  out.mX[28] = pmf_get_inf();\r\n  out.mX[29] = pmf_get_inf();\r\n  out.mX[30] = pmf_get_inf();\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_imax.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_imax.h - header for method DCDC_Buck_9d5357ce_1_ds_imax */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_IMAX_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_IMAX_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_imax(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                              /* #ifndef DCDC_BUCK_9D5357CE_1_DS_IMAX_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_imin.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_imin.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_imin(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmRealVector out;\r\n  (void)t1;\r\n  out = t2->mIMIN;\r\n  out.mX[0] = -pmf_get_inf();\r\n  out.mX[1] = -pmf_get_inf();\r\n  out.mX[2] = -pmf_get_inf();\r\n  out.mX[3] = -pmf_get_inf();\r\n  out.mX[4] = -pmf_get_inf();\r\n  out.mX[5] = -pmf_get_inf();\r\n  out.mX[6] = -pmf_get_inf();\r\n  out.mX[7] = -pmf_get_inf();\r\n  out.mX[8] = -pmf_get_inf();\r\n  out.mX[9] = -pmf_get_inf();\r\n  out.mX[10] = -pmf_get_inf();\r\n  out.mX[11] = -pmf_get_inf();\r\n  out.mX[12] = -pmf_get_inf();\r\n  out.mX[13] = -pmf_get_inf();\r\n  out.mX[14] = -pmf_get_inf();\r\n  out.mX[15] = -pmf_get_inf();\r\n  out.mX[16] = -pmf_get_inf();\r\n  out.mX[17] = -pmf_get_inf();\r\n  out.mX[18] = -pmf_get_inf();\r\n  out.mX[19] = -pmf_get_inf();\r\n  out.mX[20] = -pmf_get_inf();\r\n  out.mX[21] = -pmf_get_inf();\r\n  out.mX[22] = -pmf_get_inf();\r\n  out.mX[23] = -pmf_get_inf();\r\n  out.mX[24] = -pmf_get_inf();\r\n  out.mX[25] = -pmf_get_inf();\r\n  out.mX[26] = -pmf_get_inf();\r\n  out.mX[27] = -pmf_get_inf();\r\n  out.mX[28] = -pmf_get_inf();\r\n  out.mX[29] = -pmf_get_inf();\r\n  out.mX[30] = -pmf_get_inf();\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_imin.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_imin.h - header for method DCDC_Buck_9d5357ce_1_ds_imin */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_IMIN_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_IMIN_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_imin(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                              /* #ifndef DCDC_BUCK_9D5357CE_1_DS_IMIN_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_log.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_log.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_log(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t18, NeDsMethodOutput *t19)\r\n{\r\n  PmRealVector out;\r\n  real_T t0[208];\r\n  real_T DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C11_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C13_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  real_T DC_DC_Buck_PLANT_PR2_i;\r\n  real_T U_idx_0;\r\n  real_T U_idx_1;\r\n  real_T U_idx_2;\r\n  real_T U_idx_3;\r\n  real_T X_idx_0;\r\n  real_T X_idx_1;\r\n  real_T X_idx_10;\r\n  real_T X_idx_11;\r\n  real_T X_idx_12;\r\n  real_T X_idx_13;\r\n  real_T X_idx_14;\r\n  real_T X_idx_15;\r\n  real_T X_idx_16;\r\n  real_T X_idx_17;\r\n  real_T X_idx_18;\r\n  real_T X_idx_19;\r\n  real_T X_idx_2;\r\n  real_T X_idx_20;\r\n  real_T X_idx_21;\r\n  real_T X_idx_22;\r\n  real_T X_idx_23;\r\n  real_T X_idx_24;\r\n  real_T X_idx_25;\r\n  real_T X_idx_26;\r\n  real_T X_idx_27;\r\n  real_T X_idx_28;\r\n  real_T X_idx_29;\r\n  real_T X_idx_3;\r\n  real_T X_idx_30;\r\n  real_T X_idx_4;\r\n  real_T X_idx_5;\r\n  real_T X_idx_6;\r\n  real_T X_idx_7;\r\n  real_T X_idx_8;\r\n  real_T X_idx_9;\r\n  real_T t10;\r\n  real_T t12;\r\n  real_T t13;\r\n  real_T t15;\r\n  real_T t17;\r\n  real_T t4;\r\n  real_T t5;\r\n  real_T t6;\r\n  real_T t9;\r\n  int32_T b;\r\n  U_idx_0 = t18->mU.mX[0];\r\n  U_idx_1 = t18->mU.mX[1];\r\n  U_idx_2 = t18->mU.mX[2];\r\n  U_idx_3 = t18->mU.mX[3];\r\n  X_idx_0 = t18->mX.mX[0];\r\n  X_idx_1 = t18->mX.mX[1];\r\n  X_idx_2 = t18->mX.mX[2];\r\n  X_idx_3 = t18->mX.mX[3];\r\n  X_idx_4 = t18->mX.mX[4];\r\n  X_idx_5 = t18->mX.mX[5];\r\n  X_idx_6 = t18->mX.mX[6];\r\n  X_idx_7 = t18->mX.mX[7];\r\n  X_idx_8 = t18->mX.mX[8];\r\n  X_idx_9 = t18->mX.mX[9];\r\n  X_idx_10 = t18->mX.mX[10];\r\n  X_idx_11 = t18->mX.mX[11];\r\n  X_idx_12 = t18->mX.mX[12];\r\n  X_idx_13 = t18->mX.mX[13];\r\n  X_idx_14 = t18->mX.mX[14];\r\n  X_idx_15 = t18->mX.mX[15];\r\n  X_idx_16 = t18->mX.mX[16];\r\n  X_idx_17 = t18->mX.mX[17];\r\n  X_idx_18 = t18->mX.mX[18];\r\n  X_idx_19 = t18->mX.mX[19];\r\n  X_idx_20 = t18->mX.mX[20];\r\n  X_idx_21 = t18->mX.mX[21];\r\n  X_idx_22 = t18->mX.mX[22];\r\n  X_idx_23 = t18->mX.mX[23];\r\n  X_idx_24 = t18->mX.mX[24];\r\n  X_idx_25 = t18->mX.mX[25];\r\n  X_idx_26 = t18->mX.mX[26];\r\n  X_idx_27 = t18->mX.mX[27];\r\n  X_idx_28 = t18->mX.mX[28];\r\n  X_idx_29 = t18->mX.mX[29];\r\n  X_idx_30 = t18->mX.mX[30];\r\n  out = t19->mLOG;\r\n  DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i = ((X_idx_0 * -0.5 + X_idx_13 *\r\n    0.5) + X_idx_15 * -0.001) + X_idx_14;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_i = (((((X_idx_0 * -0.6333333333333333 +\r\n    X_idx_2 * -0.00083333333333333339) + X_idx_13 * 0.5) + X_idx_15 *\r\n    -1.0012666666666667) + -X_idx_17) + X_idx_18 * -1.0000000008333334) +\r\n    X_idx_19;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v = X_idx_15 * 0.002 + X_idx_0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_i = (((X_idx_0 *\r\n    -0.012195121951219513 + X_idx_15 * -2.4390243902439026E-5) + X_idx_20 *\r\n    0.012195121951219513) + X_idx_19 * -1.0003658536585365) + X_idx_4;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v = (X_idx_15 * 0.002 +\r\n    X_idx_19 * 0.03) + X_idx_0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C11_i = ((((X_idx_0 *\r\n    -0.012195121951219513 + X_idx_2 * 0.00083333333333333339) + X_idx_15 *\r\n    -2.4390243902439026E-5) + X_idx_20 * 0.012195121951219513) + X_idx_18 *\r\n    1.0000000008333334) + X_idx_17;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C13_i = ((X_idx_20 *\r\n    -0.0008333333333333335 + X_idx_19 * -0.99999999999999989) + X_idx_17) +\r\n    X_idx_4;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v = (-X_idx_2 + X_idx_18 *\r\n    -1.0E-6) + X_idx_20;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v = X_idx_21 * 1.0E-6 +\r\n    X_idx_9;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i = X_idx_20 *\r\n    0.00083333333333333339;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i = X_idx_2 *\r\n    0.00083333333333333339 + X_idx_18 * 8.3333333333333335E-10;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i = ((X_idx_0 *\r\n    0.012195121951219513 + X_idx_15 * 2.4390243902439026E-5) + X_idx_20 *\r\n    -0.012195121951219513) + X_idx_19 * 0.00036585365853658537;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i = (X_idx_0 *\r\n    0.012195121951219513 + X_idx_15 * 2.4390243902439026E-5) + X_idx_20 *\r\n    -0.012195121951219513;\r\n  t4 = ((-X_idx_22 + -X_idx_24) + X_idx_4) + X_idx_23;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v = -X_idx_10 + X_idx_22 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v = X_idx_22 * 1.0E-6 + X_idx_10;\r\n  t5 = (-X_idx_25 + -X_idx_27) + X_idx_26;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v = -X_idx_11 + X_idx_25 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v = X_idx_25 * 1.0E-6 + X_idx_11;\r\n  t6 = (-X_idx_28 + -X_idx_30) + X_idx_29;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v = -X_idx_12 + X_idx_28 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v = X_idx_28 * 1.0E-6 + X_idx_12;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v = (-X_idx_10 + X_idx_22 * -1.0E-6)\r\n    + -9.0;\r\n  t9 = (X_idx_22 * 1.0E-6 + X_idx_10) + 9.0;\r\n  t10 = (-X_idx_11 + X_idx_25 * -1.0E-6) + -9.0;\r\n  t12 = (X_idx_25 * 1.0E-6 + X_idx_11) + 9.0;\r\n  t13 = (-X_idx_12 + X_idx_28 * -1.0E-6) + -9.0;\r\n  t15 = (X_idx_28 * 1.0E-6 + X_idx_12) + 9.0;\r\n  t17 = X_idx_0 * 0.13333333333333333 + X_idx_15 * 0.00026666666666666668;\r\n  DC_DC_Buck_PLANT_PR2_i = (X_idx_0 * 0.5 + X_idx_13 * -0.5) + X_idx_15 * 0.001;\r\n  t0[0ULL] = X_idx_13;\r\n  t0[1ULL] = U_idx_0;\r\n  t0[2ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  t0[3ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  t0[4ULL] = -X_idx_13;\r\n  t0[5ULL] = X_idx_13;\r\n  t0[6ULL] = X_idx_13;\r\n  t0[7ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i * -X_idx_13 * 0.001 *\r\n    1000.0;\r\n  t0[8ULL] = -X_idx_13;\r\n  t0[9ULL] = U_idx_0;\r\n  t0[10ULL] = X_idx_14;\r\n  t0[11ULL] = -(-U_idx_0 + 3.0);\r\n  t0[12ULL] = X_idx_13;\r\n  t0[13ULL] = X_idx_13;\r\n  t0[14ULL] = X_idx_14 * X_idx_13 * 0.001 * 1000.0;\r\n  t0[15ULL] = U_idx_0;\r\n  t0[16ULL] = X_idx_13;\r\n  t0[17ULL] = X_idx_16;\r\n  t0[18ULL] = X_idx_1;\r\n  t0[19ULL] = X_idx_16 * X_idx_16 * 1.0E-9;\r\n  t0[20ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_i;\r\n  t0[21ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[22ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[23ULL] = X_idx_3;\r\n  t0[24ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_i * 2.0E-6;\r\n  t0[25ULL] = X_idx_15;\r\n  t0[26ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[27ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[28ULL] = X_idx_0;\r\n  t0[29ULL] = X_idx_15 * X_idx_15 * 2.0E-6;\r\n  t0[30ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[31ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_i;\r\n  t0[32ULL] = X_idx_20;\r\n  t0[33ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[34ULL] = ((X_idx_15 * 0.002 + -X_idx_20) + X_idx_19 * 0.03) + X_idx_0;\r\n  t0[35ULL] = X_idx_5;\r\n  t0[36ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_i * 1.0E-9;\r\n  t0[37ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C11_i;\r\n  t0[38ULL] = X_idx_20;\r\n  t0[39ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[40ULL] = (X_idx_15 * 0.002 + -X_idx_20) + X_idx_0;\r\n  t0[41ULL] = X_idx_6;\r\n  t0[42ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C11_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C11_i * 1.0E-9;\r\n  t0[43ULL] = X_idx_17;\r\n  t0[44ULL] = X_idx_20;\r\n  t0[45ULL] = X_idx_20;\r\n  t0[46ULL] = X_idx_7;\r\n  t0[47ULL] = X_idx_17 * X_idx_17 * 1.0E-9;\r\n  t0[48ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C13_i;\r\n  t0[49ULL] = X_idx_20;\r\n  t0[50ULL] = X_idx_20;\r\n  t0[51ULL] = X_idx_8;\r\n  t0[52ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C13_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C13_i * 1.0E-9;\r\n  t0[53ULL] = X_idx_18;\r\n  t0[54ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[55ULL] = X_idx_20;\r\n  t0[56ULL] = X_idx_18 * 1.0E-6 + X_idx_2;\r\n  t0[57ULL] = X_idx_2;\r\n  t0[58ULL] = X_idx_18 * X_idx_18 * 1.0E-9;\r\n  t0[59ULL] = X_idx_21;\r\n  t0[60ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[61ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[62ULL] = X_idx_9;\r\n  t0[63ULL] = X_idx_21 * X_idx_21 * 1.0E-9;\r\n  t0[64ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[65ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[66ULL] = X_idx_20;\r\n  t0[67ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[68ULL] = (X_idx_2 * 0.00083333333333333339 + X_idx_18 * 1.0000000008333334)\r\n    + -X_idx_21;\r\n  t0[69ULL] = X_idx_20;\r\n  t0[70ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i;\r\n  t0[71ULL] = X_idx_20;\r\n  t0[72ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i * 1200.0;\r\n  t0[73ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i * 1200.0;\r\n  t0[74ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i;\r\n  t0[75ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[76ULL] = X_idx_20;\r\n  t0[77ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i * 1200.0;\r\n  t0[78ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i * 1200.0;\r\n  t0[79ULL] = X_idx_21;\r\n  t0[80ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[81ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[82ULL] = X_idx_21 * 1000.0;\r\n  t0[83ULL] = X_idx_21 * X_idx_21 * 1000.0;\r\n  t0[84ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i;\r\n  t0[85ULL] = X_idx_20;\r\n  t0[86ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[87ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i * 82.0;\r\n  t0[88ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i * 82.0;\r\n  t0[89ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i;\r\n  t0[90ULL] = X_idx_20;\r\n  t0[91ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[92ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i * 82.0;\r\n  t0[93ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i *\r\n    DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i * 82.0;\r\n  t0[94ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[95ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[96ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[97ULL] = X_idx_22;\r\n  t0[98ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[99ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[100ULL] = X_idx_10;\r\n  t0[101ULL] = t4;\r\n  t0[102ULL] = X_idx_22;\r\n  t0[103ULL] = t4;\r\n  t0[104ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[105ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[106ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[107ULL] = (-X_idx_24 + X_idx_4) + X_idx_23;\r\n  t0[108ULL] = t4 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v * 0.001 * 1000.0;\r\n  t0[109ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[110ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[111ULL] = X_idx_25;\r\n  t0[112ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[113ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[114ULL] = X_idx_11;\r\n  t0[115ULL] = t5;\r\n  t0[116ULL] = X_idx_25;\r\n  t0[117ULL] = t5;\r\n  t0[118ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[119ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[120ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[121ULL] = -X_idx_27 + X_idx_26;\r\n  t0[122ULL] = t5 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v * 0.001 * 1000.0;\r\n  t0[123ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[124ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[125ULL] = X_idx_28;\r\n  t0[126ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[127ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[128ULL] = X_idx_12;\r\n  t0[129ULL] = t6;\r\n  t0[130ULL] = X_idx_28;\r\n  t0[131ULL] = t6;\r\n  t0[132ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[133ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[134ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[135ULL] = -X_idx_30 + X_idx_29;\r\n  t0[136ULL] = t6 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v * 0.001 * 1000.0;\r\n  t0[137ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[138ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[139ULL] = X_idx_4;\r\n  t0[140ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[141ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[142ULL] = (((-X_idx_0 + -X_idx_10) + X_idx_15 * -0.002) + X_idx_22 *\r\n                -1.0E-6) + X_idx_19 * -0.03;\r\n  t0[143ULL] = X_idx_4;\r\n  t0[144ULL] = X_idx_4 * X_idx_4 * 1.0500000000000001E-5;\r\n  t0[145ULL] = U_idx_1;\r\n  t0[146ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[147ULL] = X_idx_23;\r\n  t0[148ULL] = X_idx_23;\r\n  t0[149ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  t0[150ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[151ULL] = X_idx_23 * DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v * 0.001 *\r\n    1000.0;\r\n  t0[152ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  t0[153ULL] = U_idx_1;\r\n  t0[154ULL] = X_idx_24;\r\n  t0[155ULL] = -(-U_idx_1 + 1.5);\r\n  t0[156ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[157ULL] = t9;\r\n  t0[158ULL] = X_idx_24 * t9 * 0.001 * 1000.0;\r\n  t0[159ULL] = U_idx_2;\r\n  t0[160ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[161ULL] = X_idx_26;\r\n  t0[162ULL] = X_idx_26;\r\n  t0[163ULL] = t10;\r\n  t0[164ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[165ULL] = X_idx_26 * t10 * 0.001 * 1000.0;\r\n  t0[166ULL] = t10;\r\n  t0[167ULL] = U_idx_2;\r\n  t0[168ULL] = X_idx_27;\r\n  t0[169ULL] = -(-U_idx_2 + 1.5);\r\n  t0[170ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[171ULL] = t12;\r\n  t0[172ULL] = X_idx_27 * t12 * 0.001 * 1000.0;\r\n  t0[173ULL] = U_idx_3;\r\n  t0[174ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[175ULL] = X_idx_29;\r\n  t0[176ULL] = X_idx_29;\r\n  t0[177ULL] = t13;\r\n  t0[178ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[179ULL] = X_idx_29 * t13 * 0.001 * 1000.0;\r\n  t0[180ULL] = t13;\r\n  t0[181ULL] = U_idx_3;\r\n  t0[182ULL] = X_idx_30;\r\n  t0[183ULL] = -(-U_idx_3 + 1.5);\r\n  t0[184ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[185ULL] = t15;\r\n  t0[186ULL] = X_idx_30 * t15 * 0.001 * 1000.0;\r\n  t0[187ULL] = X_idx_19;\r\n  t0[188ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[189ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[190ULL] = X_idx_19 * 0.03;\r\n  t0[191ULL] = X_idx_19 * X_idx_19 * 0.03;\r\n  t0[192ULL] = U_idx_1;\r\n  t0[193ULL] = U_idx_3;\r\n  t0[194ULL] = U_idx_2;\r\n  t0[195ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[196ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[197ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[198ULL] = t17;\r\n  t0[199ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[200ULL] = t17 * 7.5;\r\n  t0[201ULL] = t17 * t17 * 7.5;\r\n  t0[202ULL] = DC_DC_Buck_PLANT_PR2_i;\r\n  t0[203ULL] = X_idx_13;\r\n  t0[204ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[205ULL] = DC_DC_Buck_PLANT_PR2_i * 2.0;\r\n  t0[206ULL] = DC_DC_Buck_PLANT_PR2_i * DC_DC_Buck_PLANT_PR2_i * 2.0;\r\n  t0[207ULL] = (((((-X_idx_16 + -X_idx_24) + -X_idx_27) + -X_idx_30) + X_idx_23)\r\n                + X_idx_26) + X_idx_29;\r\n  for (b = 0; b < 208; b++) {\r\n    out.mX[b] = t0[b];\r\n  }\r\n\r\n  (void)sys;\r\n  (void)t19;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_log.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_log.h - header for method DCDC_Buck_9d5357ce_1_ds_log */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_LOG_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_LOG_H  1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_log(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                               /* #ifndef DCDC_BUCK_9D5357CE_1_DS_LOG_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_m_p.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_m_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_m_p(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mM_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 1;\r\n  out.mJc[2] = 2;\r\n  out.mJc[3] = 3;\r\n  out.mJc[4] = 4;\r\n  out.mJc[5] = 5;\r\n  out.mJc[6] = 6;\r\n  out.mJc[7] = 7;\r\n  out.mJc[8] = 8;\r\n  out.mJc[9] = 9;\r\n  out.mJc[10] = 10;\r\n  out.mJc[11] = 11;\r\n  out.mJc[12] = 12;\r\n  out.mJc[13] = 13;\r\n  out.mJc[14] = 13;\r\n  out.mJc[15] = 13;\r\n  out.mJc[16] = 13;\r\n  out.mJc[17] = 13;\r\n  out.mJc[18] = 13;\r\n  out.mJc[19] = 13;\r\n  out.mJc[20] = 13;\r\n  out.mJc[21] = 13;\r\n  out.mJc[22] = 13;\r\n  out.mJc[23] = 13;\r\n  out.mJc[24] = 13;\r\n  out.mJc[25] = 13;\r\n  out.mJc[26] = 13;\r\n  out.mJc[27] = 13;\r\n  out.mJc[28] = 13;\r\n  out.mJc[29] = 13;\r\n  out.mJc[30] = 13;\r\n  out.mJc[31] = 13;\r\n  out.mIr[0] = 2;\r\n  out.mIr[1] = 0;\r\n  out.mIr[2] = 7;\r\n  out.mIr[3] = 1;\r\n  out.mIr[4] = 12;\r\n  out.mIr[5] = 3;\r\n  out.mIr[6] = 4;\r\n  out.mIr[7] = 5;\r\n  out.mIr[8] = 6;\r\n  out.mIr[9] = 8;\r\n  out.mIr[10] = 9;\r\n  out.mIr[11] = 10;\r\n  out.mIr[12] = 11;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_m_p.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_m_p.h - header for method DCDC_Buck_9d5357ce_1_ds_m_p */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_M_P_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_M_P_H  1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_m_p(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                               /* #ifndef DCDC_BUCK_9D5357CE_1_DS_M_P_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_mode.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_mode.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_mode(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t3, NeDsMethodOutput *t4)\r\n{\r\n  PmIntVector out;\r\n  real_T U_idx_0;\r\n  real_T U_idx_1;\r\n  real_T U_idx_2;\r\n  real_T U_idx_3;\r\n  real_T X_idx_10;\r\n  real_T X_idx_11;\r\n  real_T X_idx_12;\r\n  real_T X_idx_13;\r\n  real_T X_idx_22;\r\n  real_T X_idx_25;\r\n  real_T X_idx_28;\r\n  U_idx_0 = t3->mU.mX[0];\r\n  U_idx_1 = t3->mU.mX[1];\r\n  U_idx_2 = t3->mU.mX[2];\r\n  U_idx_3 = t3->mU.mX[3];\r\n  X_idx_10 = t3->mX.mX[10];\r\n  X_idx_11 = t3->mX.mX[11];\r\n  X_idx_12 = t3->mX.mX[12];\r\n  X_idx_13 = t3->mX.mX[13];\r\n  X_idx_22 = t3->mX.mX[22];\r\n  X_idx_25 = t3->mX.mX[25];\r\n  X_idx_28 = t3->mX.mX[28];\r\n  out = t4->mMODE;\r\n  out.mX[0] = (int32_T)(-X_idx_13 > 1.6);\r\n  out.mX[1] = (int32_T)(U_idx_0 > 3.0);\r\n  out.mX[2] = (int32_T)(U_idx_3 > 1.5);\r\n  out.mX[3] = (int32_T)((X_idx_22 * 1.0E-6 + X_idx_10) * 1.602176487E-19 /\r\n                        4.3497335432938027E-21 < -79.0);\r\n  out.mX[4] = (int32_T)((X_idx_25 * 1.0E-6 + X_idx_11) * 1.602176487E-19 /\r\n                        4.3497335432938027E-21 < -79.0);\r\n  out.mX[5] = (int32_T)((X_idx_28 * 1.0E-6 + X_idx_12) * 1.602176487E-19 /\r\n                        4.3497335432938027E-21 < -79.0);\r\n  out.mX[6] = (int32_T)((-X_idx_10 + X_idx_22 * -1.0E-6) + -9.0 > 0.85);\r\n  out.mX[7] = (int32_T)(U_idx_1 > 1.5);\r\n  out.mX[8] = (int32_T)((-X_idx_11 + X_idx_25 * -1.0E-6) + -9.0 > 0.85);\r\n  out.mX[9] = (int32_T)(U_idx_2 > 1.5);\r\n  out.mX[10] = (int32_T)((-X_idx_12 + X_idx_28 * -1.0E-6) + -9.0 > 0.85);\r\n  (void)sys;\r\n  (void)t4;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_mode.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_mode.h - header for method DCDC_Buck_9d5357ce_1_ds_mode */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_MODE_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_MODE_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_mode(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                              /* #ifndef DCDC_BUCK_9D5357CE_1_DS_MODE_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_act.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_act.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_obs_act(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t18, NeDsMethodOutput *t19)\r\n{\r\n  PmRealVector out;\r\n  real_T t0[260];\r\n  real_T DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  real_T DC_DC_Buck_PLANT_PR2_i;\r\n  real_T U_idx_0;\r\n  real_T U_idx_1;\r\n  real_T U_idx_2;\r\n  real_T U_idx_3;\r\n  real_T X_idx_0;\r\n  real_T X_idx_1;\r\n  real_T X_idx_10;\r\n  real_T X_idx_11;\r\n  real_T X_idx_12;\r\n  real_T X_idx_13;\r\n  real_T X_idx_14;\r\n  real_T X_idx_15;\r\n  real_T X_idx_16;\r\n  real_T X_idx_17;\r\n  real_T X_idx_18;\r\n  real_T X_idx_19;\r\n  real_T X_idx_2;\r\n  real_T X_idx_20;\r\n  real_T X_idx_21;\r\n  real_T X_idx_22;\r\n  real_T X_idx_23;\r\n  real_T X_idx_24;\r\n  real_T X_idx_25;\r\n  real_T X_idx_26;\r\n  real_T X_idx_27;\r\n  real_T X_idx_28;\r\n  real_T X_idx_29;\r\n  real_T X_idx_3;\r\n  real_T X_idx_30;\r\n  real_T X_idx_4;\r\n  real_T X_idx_5;\r\n  real_T X_idx_6;\r\n  real_T X_idx_7;\r\n  real_T X_idx_8;\r\n  real_T X_idx_9;\r\n  real_T t10;\r\n  real_T t12;\r\n  real_T t13;\r\n  real_T t15;\r\n  real_T t17;\r\n  real_T t4;\r\n  real_T t5;\r\n  real_T t6;\r\n  real_T t9;\r\n  int32_T b;\r\n  U_idx_0 = t18->mU.mX[0];\r\n  U_idx_1 = t18->mU.mX[1];\r\n  U_idx_2 = t18->mU.mX[2];\r\n  U_idx_3 = t18->mU.mX[3];\r\n  X_idx_0 = t18->mX.mX[0];\r\n  X_idx_1 = t18->mX.mX[1];\r\n  X_idx_2 = t18->mX.mX[2];\r\n  X_idx_3 = t18->mX.mX[3];\r\n  X_idx_4 = t18->mX.mX[4];\r\n  X_idx_5 = t18->mX.mX[5];\r\n  X_idx_6 = t18->mX.mX[6];\r\n  X_idx_7 = t18->mX.mX[7];\r\n  X_idx_8 = t18->mX.mX[8];\r\n  X_idx_9 = t18->mX.mX[9];\r\n  X_idx_10 = t18->mX.mX[10];\r\n  X_idx_11 = t18->mX.mX[11];\r\n  X_idx_12 = t18->mX.mX[12];\r\n  X_idx_13 = t18->mX.mX[13];\r\n  X_idx_14 = t18->mX.mX[14];\r\n  X_idx_15 = t18->mX.mX[15];\r\n  X_idx_16 = t18->mX.mX[16];\r\n  X_idx_17 = t18->mX.mX[17];\r\n  X_idx_18 = t18->mX.mX[18];\r\n  X_idx_19 = t18->mX.mX[19];\r\n  X_idx_20 = t18->mX.mX[20];\r\n  X_idx_21 = t18->mX.mX[21];\r\n  X_idx_22 = t18->mX.mX[22];\r\n  X_idx_23 = t18->mX.mX[23];\r\n  X_idx_24 = t18->mX.mX[24];\r\n  X_idx_25 = t18->mX.mX[25];\r\n  X_idx_26 = t18->mX.mX[26];\r\n  X_idx_27 = t18->mX.mX[27];\r\n  X_idx_28 = t18->mX.mX[28];\r\n  X_idx_29 = t18->mX.mX[29];\r\n  X_idx_30 = t18->mX.mX[30];\r\n  out = t19->mOBS_ACT;\r\n  DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i = ((X_idx_0 * -0.5 + X_idx_13 *\r\n    0.5) + X_idx_15 * -0.001) + X_idx_14;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v = X_idx_15 * 0.002 + X_idx_0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v = (X_idx_15 * 0.002 +\r\n    X_idx_19 * 0.03) + X_idx_0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v = (-X_idx_2 + X_idx_18 *\r\n    -1.0E-6) + X_idx_20;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v = X_idx_21 * 1.0E-6 +\r\n    X_idx_9;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i = X_idx_20 *\r\n    0.00083333333333333339;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i = X_idx_2 *\r\n    0.00083333333333333339 + X_idx_18 * 8.3333333333333335E-10;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i = ((X_idx_0 *\r\n    0.012195121951219513 + X_idx_15 * 2.4390243902439026E-5) + X_idx_20 *\r\n    -0.012195121951219513) + X_idx_19 * 0.00036585365853658537;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i = (X_idx_0 *\r\n    0.012195121951219513 + X_idx_15 * 2.4390243902439026E-5) + X_idx_20 *\r\n    -0.012195121951219513;\r\n  t4 = ((-X_idx_22 + -X_idx_24) + X_idx_4) + X_idx_23;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v = -X_idx_10 + X_idx_22 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v = X_idx_22 * 1.0E-6 + X_idx_10;\r\n  t5 = (-X_idx_25 + -X_idx_27) + X_idx_26;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v = -X_idx_11 + X_idx_25 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v = X_idx_25 * 1.0E-6 + X_idx_11;\r\n  t6 = (-X_idx_28 + -X_idx_30) + X_idx_29;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v = -X_idx_12 + X_idx_28 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v = X_idx_28 * 1.0E-6 + X_idx_12;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v = (-X_idx_10 + X_idx_22 * -1.0E-6)\r\n    + -9.0;\r\n  t9 = (X_idx_22 * 1.0E-6 + X_idx_10) + 9.0;\r\n  t10 = (-X_idx_11 + X_idx_25 * -1.0E-6) + -9.0;\r\n  t12 = (X_idx_25 * 1.0E-6 + X_idx_11) + 9.0;\r\n  t13 = (-X_idx_12 + X_idx_28 * -1.0E-6) + -9.0;\r\n  t15 = (X_idx_28 * 1.0E-6 + X_idx_12) + 9.0;\r\n  t17 = X_idx_0 * 0.13333333333333333 + X_idx_15 * 0.00026666666666666668;\r\n  DC_DC_Buck_PLANT_PR2_i = (X_idx_0 * 0.5 + X_idx_13 * -0.5) + X_idx_15 * 0.001;\r\n  t0[0ULL] = X_idx_13;\r\n  t0[1ULL] = U_idx_0;\r\n  t0[2ULL] = 0.0;\r\n  t0[3ULL] = 298.15;\r\n  t0[4ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  t0[5ULL] = 0.0;\r\n  t0[6ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  t0[7ULL] = -X_idx_13;\r\n  t0[8ULL] = X_idx_13;\r\n  t0[9ULL] = X_idx_13;\r\n  t0[10ULL] = 0.0;\r\n  t0[11ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i * -X_idx_13 * 0.001 *\r\n    1000.0;\r\n  t0[12ULL] = -X_idx_13;\r\n  t0[13ULL] = 0.0;\r\n  t0[14ULL] = U_idx_0;\r\n  t0[15ULL] = X_idx_14;\r\n  t0[16ULL] = -(-U_idx_0 + 3.0);\r\n  t0[17ULL] = 0.0;\r\n  t0[18ULL] = X_idx_13;\r\n  t0[19ULL] = X_idx_13;\r\n  t0[20ULL] = X_idx_14 * X_idx_13 * 0.001 * 1000.0;\r\n  t0[21ULL] = U_idx_0;\r\n  t0[22ULL] = X_idx_13;\r\n  t0[23ULL] = 0.0;\r\n  t0[24ULL] = X_idx_16;\r\n  t0[25ULL] = 0.0;\r\n  t0[26ULL] = 9.0;\r\n  t0[27ULL] = 9.0;\r\n  t0[28ULL] = X_idx_1;\r\n  t0[29ULL] = (((((X_idx_0 * -0.6333333333333333 + X_idx_2 *\r\n                   -0.00083333333333333339) + X_idx_13 * 0.5) + X_idx_15 *\r\n                 -1.0012666666666667) + -X_idx_17) + X_idx_18 *\r\n               -1.0000000008333334) + X_idx_19;\r\n  t0[30ULL] = 0.0;\r\n  t0[31ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[32ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[33ULL] = X_idx_3;\r\n  t0[34ULL] = X_idx_15;\r\n  t0[35ULL] = 0.0;\r\n  t0[36ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[37ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[38ULL] = X_idx_0;\r\n  t0[39ULL] = 9.0;\r\n  t0[40ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[41ULL] = 0.0;\r\n  t0[42ULL] = (((X_idx_0 * -0.012195121951219513 + X_idx_15 *\r\n                 -2.4390243902439026E-5) + X_idx_20 * 0.012195121951219513) +\r\n               X_idx_19 * -1.0003658536585365) + X_idx_4;\r\n  t0[43ULL] = X_idx_20;\r\n  t0[44ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[45ULL] = ((X_idx_15 * 0.002 + -X_idx_20) + X_idx_19 * 0.03) + X_idx_0;\r\n  t0[46ULL] = X_idx_5;\r\n  t0[47ULL] = ((((X_idx_0 * -0.012195121951219513 + X_idx_2 *\r\n                  0.00083333333333333339) + X_idx_15 * -2.4390243902439026E-5) +\r\n                X_idx_20 * 0.012195121951219513) + X_idx_18 * 1.0000000008333334)\r\n    + X_idx_17;\r\n  t0[48ULL] = X_idx_20;\r\n  t0[49ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[50ULL] = (X_idx_15 * 0.002 + -X_idx_20) + X_idx_0;\r\n  t0[51ULL] = X_idx_6;\r\n  t0[52ULL] = X_idx_17;\r\n  t0[53ULL] = X_idx_20;\r\n  t0[54ULL] = X_idx_20;\r\n  t0[55ULL] = 0.0;\r\n  t0[56ULL] = X_idx_7;\r\n  t0[57ULL] = ((X_idx_20 * -0.0008333333333333335 + X_idx_19 *\r\n                -0.99999999999999989) + X_idx_17) + X_idx_4;\r\n  t0[58ULL] = 0.0;\r\n  t0[59ULL] = X_idx_20;\r\n  t0[60ULL] = X_idx_20;\r\n  t0[61ULL] = X_idx_8;\r\n  t0[62ULL] = X_idx_18;\r\n  t0[63ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[64ULL] = X_idx_20;\r\n  t0[65ULL] = X_idx_18 * 1.0E-6 + X_idx_2;\r\n  t0[66ULL] = X_idx_2;\r\n  t0[67ULL] = X_idx_21;\r\n  t0[68ULL] = 0.0;\r\n  t0[69ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[70ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[71ULL] = X_idx_9;\r\n  t0[72ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[73ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[74ULL] = 0.0;\r\n  t0[75ULL] = 0.0;\r\n  t0[76ULL] = X_idx_20;\r\n  t0[77ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[78ULL] = (X_idx_2 * 0.00083333333333333339 + X_idx_18 * 1.0000000008333334)\r\n    + -X_idx_21;\r\n  t0[79ULL] = X_idx_20;\r\n  t0[80ULL] = 0.0;\r\n  t0[81ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i;\r\n  t0[82ULL] = 0.0;\r\n  t0[83ULL] = X_idx_20;\r\n  t0[84ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i * 1200.0;\r\n  t0[85ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i;\r\n  t0[86ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[87ULL] = X_idx_20;\r\n  t0[88ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i * 1200.0;\r\n  t0[89ULL] = X_idx_21;\r\n  t0[90ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[91ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[92ULL] = X_idx_21 * 1000.0;\r\n  t0[93ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i;\r\n  t0[94ULL] = X_idx_20;\r\n  t0[95ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[96ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i * 82.0;\r\n  t0[97ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i;\r\n  t0[98ULL] = X_idx_20;\r\n  t0[99ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[100ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i * 82.0;\r\n  t0[101ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[102ULL] = 0.0;\r\n  t0[103ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[104ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[105ULL] = X_idx_22;\r\n  t0[106ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[107ULL] = 0.0;\r\n  t0[108ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[109ULL] = X_idx_10;\r\n  t0[110ULL] = 298.15;\r\n  t0[111ULL] = t4;\r\n  t0[112ULL] = X_idx_22;\r\n  t0[113ULL] = t4;\r\n  t0[114ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[115ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[116ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[117ULL] = (-X_idx_24 + X_idx_4) + X_idx_23;\r\n  t0[118ULL] = 0.0;\r\n  t0[119ULL] = 0.0;\r\n  t0[120ULL] = 0.0;\r\n  t0[121ULL] = 0.0;\r\n  t0[122ULL] = 0.0;\r\n  t0[123ULL] = t4 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v * 0.001 * 1000.0;\r\n  t0[124ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[125ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[126ULL] = X_idx_25;\r\n  t0[127ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[128ULL] = 0.0;\r\n  t0[129ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[130ULL] = X_idx_11;\r\n  t0[131ULL] = 298.15;\r\n  t0[132ULL] = t5;\r\n  t0[133ULL] = X_idx_25;\r\n  t0[134ULL] = t5;\r\n  t0[135ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[136ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[137ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[138ULL] = -X_idx_27 + X_idx_26;\r\n  t0[139ULL] = 0.0;\r\n  t0[140ULL] = 0.0;\r\n  t0[141ULL] = 0.0;\r\n  t0[142ULL] = 0.0;\r\n  t0[143ULL] = 0.0;\r\n  t0[144ULL] = t5 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v * 0.001 * 1000.0;\r\n  t0[145ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[146ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[147ULL] = X_idx_28;\r\n  t0[148ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[149ULL] = 0.0;\r\n  t0[150ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[151ULL] = X_idx_12;\r\n  t0[152ULL] = 298.15;\r\n  t0[153ULL] = t6;\r\n  t0[154ULL] = X_idx_28;\r\n  t0[155ULL] = t6;\r\n  t0[156ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[157ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[158ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[159ULL] = -X_idx_30 + X_idx_29;\r\n  t0[160ULL] = 0.0;\r\n  t0[161ULL] = 0.0;\r\n  t0[162ULL] = 0.0;\r\n  t0[163ULL] = 0.0;\r\n  t0[164ULL] = 0.0;\r\n  t0[165ULL] = t6 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v * 0.001 * 1000.0;\r\n  t0[166ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[167ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[168ULL] = X_idx_4;\r\n  t0[169ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[170ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[171ULL] = (((-X_idx_0 + -X_idx_10) + X_idx_15 * -0.002) + X_idx_22 *\r\n                -1.0E-6) + X_idx_19 * -0.03;\r\n  t0[172ULL] = X_idx_4;\r\n  t0[173ULL] = 9.0;\r\n  t0[174ULL] = U_idx_1;\r\n  t0[175ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[176ULL] = 298.15;\r\n  t0[177ULL] = X_idx_23;\r\n  t0[178ULL] = 0.0;\r\n  t0[179ULL] = X_idx_23;\r\n  t0[180ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  t0[181ULL] = 9.0;\r\n  t0[182ULL] = 9.0;\r\n  t0[183ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[184ULL] = X_idx_23 * DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v * 0.001 *\r\n    1000.0;\r\n  t0[185ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  t0[186ULL] = 0.0;\r\n  t0[187ULL] = U_idx_1;\r\n  t0[188ULL] = X_idx_24;\r\n  t0[189ULL] = -(-U_idx_1 + 1.5);\r\n  t0[190ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[191ULL] = 9.0;\r\n  t0[192ULL] = t9;\r\n  t0[193ULL] = X_idx_24 * t9 * 0.001 * 1000.0;\r\n  t0[194ULL] = 9.0;\r\n  t0[195ULL] = U_idx_2;\r\n  t0[196ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[197ULL] = 298.15;\r\n  t0[198ULL] = X_idx_26;\r\n  t0[199ULL] = 0.0;\r\n  t0[200ULL] = X_idx_26;\r\n  t0[201ULL] = t10;\r\n  t0[202ULL] = 9.0;\r\n  t0[203ULL] = 9.0;\r\n  t0[204ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[205ULL] = X_idx_26 * t10 * 0.001 * 1000.0;\r\n  t0[206ULL] = t10;\r\n  t0[207ULL] = 0.0;\r\n  t0[208ULL] = U_idx_2;\r\n  t0[209ULL] = X_idx_27;\r\n  t0[210ULL] = -(-U_idx_2 + 1.5);\r\n  t0[211ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[212ULL] = 9.0;\r\n  t0[213ULL] = t12;\r\n  t0[214ULL] = X_idx_27 * t12 * 0.001 * 1000.0;\r\n  t0[215ULL] = 9.0;\r\n  t0[216ULL] = U_idx_3;\r\n  t0[217ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[218ULL] = 298.15;\r\n  t0[219ULL] = X_idx_29;\r\n  t0[220ULL] = 0.0;\r\n  t0[221ULL] = X_idx_29;\r\n  t0[222ULL] = t13;\r\n  t0[223ULL] = 9.0;\r\n  t0[224ULL] = 9.0;\r\n  t0[225ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[226ULL] = X_idx_29 * t13 * 0.001 * 1000.0;\r\n  t0[227ULL] = t13;\r\n  t0[228ULL] = 0.0;\r\n  t0[229ULL] = U_idx_3;\r\n  t0[230ULL] = X_idx_30;\r\n  t0[231ULL] = -(-U_idx_3 + 1.5);\r\n  t0[232ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[233ULL] = 9.0;\r\n  t0[234ULL] = t15;\r\n  t0[235ULL] = X_idx_30 * t15 * 0.001 * 1000.0;\r\n  t0[236ULL] = X_idx_19;\r\n  t0[237ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[238ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[239ULL] = X_idx_19 * 0.03;\r\n  t0[240ULL] = U_idx_1;\r\n  t0[241ULL] = U_idx_3;\r\n  t0[242ULL] = U_idx_2;\r\n  t0[243ULL] = 0.0;\r\n  t0[244ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[245ULL] = 0.0;\r\n  t0[246ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[247ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[248ULL] = t17;\r\n  t0[249ULL] = 0.0;\r\n  t0[250ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[251ULL] = t17 * 7.5;\r\n  t0[252ULL] = DC_DC_Buck_PLANT_PR2_i;\r\n  t0[253ULL] = X_idx_13;\r\n  t0[254ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[255ULL] = DC_DC_Buck_PLANT_PR2_i * 2.0;\r\n  t0[256ULL] = (((((-X_idx_16 + -X_idx_24) + -X_idx_27) + -X_idx_30) + X_idx_23)\r\n                + X_idx_26) + X_idx_29;\r\n  t0[257ULL] = 0.0;\r\n  t0[258ULL] = 9.0;\r\n  t0[259ULL] = 9.0;\r\n  for (b = 0; b < 260; b++) {\r\n    out.mX[b] = t0[b];\r\n  }\r\n\r\n  (void)sys;\r\n  (void)t19;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_act.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_obs_act.h - header for method DCDC_Buck_9d5357ce_1_ds_obs_act */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_ACT_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_OBS_ACT_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_obs_act(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                           /* #ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_ACT_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_all.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_all.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_obs_all(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t18, NeDsMethodOutput *t19)\r\n{\r\n  PmRealVector out;\r\n  real_T t0[260];\r\n  real_T DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  real_T DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  real_T DC_DC_Buck_PLANT_PR2_i;\r\n  real_T U_idx_0;\r\n  real_T U_idx_1;\r\n  real_T U_idx_2;\r\n  real_T U_idx_3;\r\n  real_T X_idx_0;\r\n  real_T X_idx_1;\r\n  real_T X_idx_10;\r\n  real_T X_idx_11;\r\n  real_T X_idx_12;\r\n  real_T X_idx_13;\r\n  real_T X_idx_14;\r\n  real_T X_idx_15;\r\n  real_T X_idx_16;\r\n  real_T X_idx_17;\r\n  real_T X_idx_18;\r\n  real_T X_idx_19;\r\n  real_T X_idx_2;\r\n  real_T X_idx_20;\r\n  real_T X_idx_21;\r\n  real_T X_idx_22;\r\n  real_T X_idx_23;\r\n  real_T X_idx_24;\r\n  real_T X_idx_25;\r\n  real_T X_idx_26;\r\n  real_T X_idx_27;\r\n  real_T X_idx_28;\r\n  real_T X_idx_29;\r\n  real_T X_idx_3;\r\n  real_T X_idx_30;\r\n  real_T X_idx_4;\r\n  real_T X_idx_5;\r\n  real_T X_idx_6;\r\n  real_T X_idx_7;\r\n  real_T X_idx_8;\r\n  real_T X_idx_9;\r\n  real_T t10;\r\n  real_T t12;\r\n  real_T t13;\r\n  real_T t15;\r\n  real_T t17;\r\n  real_T t4;\r\n  real_T t5;\r\n  real_T t6;\r\n  real_T t9;\r\n  int32_T b;\r\n  U_idx_0 = t18->mU.mX[0];\r\n  U_idx_1 = t18->mU.mX[1];\r\n  U_idx_2 = t18->mU.mX[2];\r\n  U_idx_3 = t18->mU.mX[3];\r\n  X_idx_0 = t18->mX.mX[0];\r\n  X_idx_1 = t18->mX.mX[1];\r\n  X_idx_2 = t18->mX.mX[2];\r\n  X_idx_3 = t18->mX.mX[3];\r\n  X_idx_4 = t18->mX.mX[4];\r\n  X_idx_5 = t18->mX.mX[5];\r\n  X_idx_6 = t18->mX.mX[6];\r\n  X_idx_7 = t18->mX.mX[7];\r\n  X_idx_8 = t18->mX.mX[8];\r\n  X_idx_9 = t18->mX.mX[9];\r\n  X_idx_10 = t18->mX.mX[10];\r\n  X_idx_11 = t18->mX.mX[11];\r\n  X_idx_12 = t18->mX.mX[12];\r\n  X_idx_13 = t18->mX.mX[13];\r\n  X_idx_14 = t18->mX.mX[14];\r\n  X_idx_15 = t18->mX.mX[15];\r\n  X_idx_16 = t18->mX.mX[16];\r\n  X_idx_17 = t18->mX.mX[17];\r\n  X_idx_18 = t18->mX.mX[18];\r\n  X_idx_19 = t18->mX.mX[19];\r\n  X_idx_20 = t18->mX.mX[20];\r\n  X_idx_21 = t18->mX.mX[21];\r\n  X_idx_22 = t18->mX.mX[22];\r\n  X_idx_23 = t18->mX.mX[23];\r\n  X_idx_24 = t18->mX.mX[24];\r\n  X_idx_25 = t18->mX.mX[25];\r\n  X_idx_26 = t18->mX.mX[26];\r\n  X_idx_27 = t18->mX.mX[27];\r\n  X_idx_28 = t18->mX.mX[28];\r\n  X_idx_29 = t18->mX.mX[29];\r\n  X_idx_30 = t18->mX.mX[30];\r\n  out = t19->mOBS_ALL;\r\n  DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i = ((X_idx_0 * -0.5 + X_idx_13 *\r\n    0.5) + X_idx_15 * -0.001) + X_idx_14;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v = X_idx_15 * 0.002 + X_idx_0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v = (X_idx_15 * 0.002 +\r\n    X_idx_19 * 0.03) + X_idx_0;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v = (-X_idx_2 + X_idx_18 *\r\n    -1.0E-6) + X_idx_20;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v = X_idx_21 * 1.0E-6 +\r\n    X_idx_9;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i = X_idx_20 *\r\n    0.00083333333333333339;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i = X_idx_2 *\r\n    0.00083333333333333339 + X_idx_18 * 8.3333333333333335E-10;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i = ((X_idx_0 *\r\n    0.012195121951219513 + X_idx_15 * 2.4390243902439026E-5) + X_idx_20 *\r\n    -0.012195121951219513) + X_idx_19 * 0.00036585365853658537;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i = (X_idx_0 *\r\n    0.012195121951219513 + X_idx_15 * 2.4390243902439026E-5) + X_idx_20 *\r\n    -0.012195121951219513;\r\n  t4 = ((-X_idx_22 + -X_idx_24) + X_idx_4) + X_idx_23;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v = -X_idx_10 + X_idx_22 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v = X_idx_22 * 1.0E-6 + X_idx_10;\r\n  t5 = (-X_idx_25 + -X_idx_27) + X_idx_26;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v = -X_idx_11 + X_idx_25 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v = X_idx_25 * 1.0E-6 + X_idx_11;\r\n  t6 = (-X_idx_28 + -X_idx_30) + X_idx_29;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v = -X_idx_12 + X_idx_28 * -1.0E-6;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v = X_idx_28 * 1.0E-6 + X_idx_12;\r\n  DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v = (-X_idx_10 + X_idx_22 * -1.0E-6)\r\n    + -9.0;\r\n  t9 = (X_idx_22 * 1.0E-6 + X_idx_10) + 9.0;\r\n  t10 = (-X_idx_11 + X_idx_25 * -1.0E-6) + -9.0;\r\n  t12 = (X_idx_25 * 1.0E-6 + X_idx_11) + 9.0;\r\n  t13 = (-X_idx_12 + X_idx_28 * -1.0E-6) + -9.0;\r\n  t15 = (X_idx_28 * 1.0E-6 + X_idx_12) + 9.0;\r\n  t17 = X_idx_0 * 0.13333333333333333 + X_idx_15 * 0.00026666666666666668;\r\n  DC_DC_Buck_PLANT_PR2_i = (X_idx_0 * 0.5 + X_idx_13 * -0.5) + X_idx_15 * 0.001;\r\n  t0[0ULL] = X_idx_13;\r\n  t0[1ULL] = U_idx_0;\r\n  t0[2ULL] = 0.0;\r\n  t0[3ULL] = 298.15;\r\n  t0[4ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  t0[5ULL] = 0.0;\r\n  t0[6ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i;\r\n  t0[7ULL] = -X_idx_13;\r\n  t0[8ULL] = X_idx_13;\r\n  t0[9ULL] = X_idx_13;\r\n  t0[10ULL] = 0.0;\r\n  t0[11ULL] = DC_DC_Buck_PLANT_Active_Load_MOSFET_diode_i * -X_idx_13 * 0.001 *\r\n    1000.0;\r\n  t0[12ULL] = -X_idx_13;\r\n  t0[13ULL] = 0.0;\r\n  t0[14ULL] = U_idx_0;\r\n  t0[15ULL] = X_idx_14;\r\n  t0[16ULL] = -(-U_idx_0 + 3.0);\r\n  t0[17ULL] = 0.0;\r\n  t0[18ULL] = X_idx_13;\r\n  t0[19ULL] = X_idx_13;\r\n  t0[20ULL] = X_idx_14 * X_idx_13 * 0.001 * 1000.0;\r\n  t0[21ULL] = U_idx_0;\r\n  t0[22ULL] = X_idx_13;\r\n  t0[23ULL] = 0.0;\r\n  t0[24ULL] = X_idx_16;\r\n  t0[25ULL] = 0.0;\r\n  t0[26ULL] = 9.0;\r\n  t0[27ULL] = 9.0;\r\n  t0[28ULL] = X_idx_1;\r\n  t0[29ULL] = (((((X_idx_0 * -0.6333333333333333 + X_idx_2 *\r\n                   -0.00083333333333333339) + X_idx_13 * 0.5) + X_idx_15 *\r\n                 -1.0012666666666667) + -X_idx_17) + X_idx_18 *\r\n               -1.0000000008333334) + X_idx_19;\r\n  t0[30ULL] = 0.0;\r\n  t0[31ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[32ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[33ULL] = X_idx_3;\r\n  t0[34ULL] = X_idx_15;\r\n  t0[35ULL] = 0.0;\r\n  t0[36ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[37ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[38ULL] = X_idx_0;\r\n  t0[39ULL] = 9.0;\r\n  t0[40ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[41ULL] = 0.0;\r\n  t0[42ULL] = (((X_idx_0 * -0.012195121951219513 + X_idx_15 *\r\n                 -2.4390243902439026E-5) + X_idx_20 * 0.012195121951219513) +\r\n               X_idx_19 * -1.0003658536585365) + X_idx_4;\r\n  t0[43ULL] = X_idx_20;\r\n  t0[44ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[45ULL] = ((X_idx_15 * 0.002 + -X_idx_20) + X_idx_19 * 0.03) + X_idx_0;\r\n  t0[46ULL] = X_idx_5;\r\n  t0[47ULL] = ((((X_idx_0 * -0.012195121951219513 + X_idx_2 *\r\n                  0.00083333333333333339) + X_idx_15 * -2.4390243902439026E-5) +\r\n                X_idx_20 * 0.012195121951219513) + X_idx_18 * 1.0000000008333334)\r\n    + X_idx_17;\r\n  t0[48ULL] = X_idx_20;\r\n  t0[49ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[50ULL] = (X_idx_15 * 0.002 + -X_idx_20) + X_idx_0;\r\n  t0[51ULL] = X_idx_6;\r\n  t0[52ULL] = X_idx_17;\r\n  t0[53ULL] = X_idx_20;\r\n  t0[54ULL] = X_idx_20;\r\n  t0[55ULL] = 0.0;\r\n  t0[56ULL] = X_idx_7;\r\n  t0[57ULL] = ((X_idx_20 * -0.0008333333333333335 + X_idx_19 *\r\n                -0.99999999999999989) + X_idx_17) + X_idx_4;\r\n  t0[58ULL] = 0.0;\r\n  t0[59ULL] = X_idx_20;\r\n  t0[60ULL] = X_idx_20;\r\n  t0[61ULL] = X_idx_8;\r\n  t0[62ULL] = X_idx_18;\r\n  t0[63ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[64ULL] = X_idx_20;\r\n  t0[65ULL] = X_idx_18 * 1.0E-6 + X_idx_2;\r\n  t0[66ULL] = X_idx_2;\r\n  t0[67ULL] = X_idx_21;\r\n  t0[68ULL] = 0.0;\r\n  t0[69ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[70ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[71ULL] = X_idx_9;\r\n  t0[72ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[73ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[74ULL] = 0.0;\r\n  t0[75ULL] = 0.0;\r\n  t0[76ULL] = X_idx_20;\r\n  t0[77ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[78ULL] = (X_idx_2 * 0.00083333333333333339 + X_idx_18 * 1.0000000008333334)\r\n    + -X_idx_21;\r\n  t0[79ULL] = X_idx_20;\r\n  t0[80ULL] = 0.0;\r\n  t0[81ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i;\r\n  t0[82ULL] = 0.0;\r\n  t0[83ULL] = X_idx_20;\r\n  t0[84ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R10_i * 1200.0;\r\n  t0[85ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i;\r\n  t0[86ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[87ULL] = X_idx_20;\r\n  t0[88ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R11_i * 1200.0;\r\n  t0[89ULL] = X_idx_21;\r\n  t0[90ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[91ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C14_n_v;\r\n  t0[92ULL] = X_idx_21 * 1000.0;\r\n  t0[93ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i;\r\n  t0[94ULL] = X_idx_20;\r\n  t0[95ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[96ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R8_i * 82.0;\r\n  t0[97ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i;\r\n  t0[98ULL] = X_idx_20;\r\n  t0[99ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[100ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_R9_i * 82.0;\r\n  t0[101ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[102ULL] = 0.0;\r\n  t0[103ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[104ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C22_p_v;\r\n  t0[105ULL] = X_idx_22;\r\n  t0[106ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[107ULL] = 0.0;\r\n  t0[108ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[109ULL] = X_idx_10;\r\n  t0[110ULL] = 298.15;\r\n  t0[111ULL] = t4;\r\n  t0[112ULL] = X_idx_22;\r\n  t0[113ULL] = t4;\r\n  t0[114ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[115ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[116ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[117ULL] = (-X_idx_24 + X_idx_4) + X_idx_23;\r\n  t0[118ULL] = 0.0;\r\n  t0[119ULL] = 0.0;\r\n  t0[120ULL] = 0.0;\r\n  t0[121ULL] = 0.0;\r\n  t0[122ULL] = 0.0;\r\n  t0[123ULL] = t4 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v * 0.001 * 1000.0;\r\n  t0[124ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[125ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_v;\r\n  t0[126ULL] = X_idx_25;\r\n  t0[127ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[128ULL] = 0.0;\r\n  t0[129ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[130ULL] = X_idx_11;\r\n  t0[131ULL] = 298.15;\r\n  t0[132ULL] = t5;\r\n  t0[133ULL] = X_idx_25;\r\n  t0[134ULL] = t5;\r\n  t0[135ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[136ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[137ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[138ULL] = -X_idx_27 + X_idx_26;\r\n  t0[139ULL] = 0.0;\r\n  t0[140ULL] = 0.0;\r\n  t0[141ULL] = 0.0;\r\n  t0[142ULL] = 0.0;\r\n  t0[143ULL] = 0.0;\r\n  t0[144ULL] = t5 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v * 0.001 * 1000.0;\r\n  t0[145ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[146ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_v;\r\n  t0[147ULL] = X_idx_28;\r\n  t0[148ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[149ULL] = 0.0;\r\n  t0[150ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[151ULL] = X_idx_12;\r\n  t0[152ULL] = 298.15;\r\n  t0[153ULL] = t6;\r\n  t0[154ULL] = X_idx_28;\r\n  t0[155ULL] = t6;\r\n  t0[156ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[157ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[158ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[159ULL] = -X_idx_30 + X_idx_29;\r\n  t0[160ULL] = 0.0;\r\n  t0[161ULL] = 0.0;\r\n  t0[162ULL] = 0.0;\r\n  t0[163ULL] = 0.0;\r\n  t0[164ULL] = 0.0;\r\n  t0[165ULL] = t6 * DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v * 0.001 * 1000.0;\r\n  t0[166ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[167ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_v;\r\n  t0[168ULL] = X_idx_4;\r\n  t0[169ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[170ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[171ULL] = (((-X_idx_0 + -X_idx_10) + X_idx_15 * -0.002) + X_idx_22 *\r\n                -1.0E-6) + X_idx_19 * -0.03;\r\n  t0[172ULL] = X_idx_4;\r\n  t0[173ULL] = 9.0;\r\n  t0[174ULL] = U_idx_1;\r\n  t0[175ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[176ULL] = 298.15;\r\n  t0[177ULL] = X_idx_23;\r\n  t0[178ULL] = 0.0;\r\n  t0[179ULL] = X_idx_23;\r\n  t0[180ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  t0[181ULL] = 9.0;\r\n  t0[182ULL] = 9.0;\r\n  t0[183ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[184ULL] = X_idx_23 * DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v * 0.001 *\r\n    1000.0;\r\n  t0[185ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_MOSFET1_diode_v;\r\n  t0[186ULL] = 0.0;\r\n  t0[187ULL] = U_idx_1;\r\n  t0[188ULL] = X_idx_24;\r\n  t0[189ULL] = -(-U_idx_1 + 1.5);\r\n  t0[190ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode_n_v;\r\n  t0[191ULL] = 9.0;\r\n  t0[192ULL] = t9;\r\n  t0[193ULL] = X_idx_24 * t9 * 0.001 * 1000.0;\r\n  t0[194ULL] = 9.0;\r\n  t0[195ULL] = U_idx_2;\r\n  t0[196ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[197ULL] = 298.15;\r\n  t0[198ULL] = X_idx_26;\r\n  t0[199ULL] = 0.0;\r\n  t0[200ULL] = X_idx_26;\r\n  t0[201ULL] = t10;\r\n  t0[202ULL] = 9.0;\r\n  t0[203ULL] = 9.0;\r\n  t0[204ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[205ULL] = X_idx_26 * t10 * 0.001 * 1000.0;\r\n  t0[206ULL] = t10;\r\n  t0[207ULL] = 0.0;\r\n  t0[208ULL] = U_idx_2;\r\n  t0[209ULL] = X_idx_27;\r\n  t0[210ULL] = -(-U_idx_2 + 1.5);\r\n  t0[211ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode1_n_v;\r\n  t0[212ULL] = 9.0;\r\n  t0[213ULL] = t12;\r\n  t0[214ULL] = X_idx_27 * t12 * 0.001 * 1000.0;\r\n  t0[215ULL] = 9.0;\r\n  t0[216ULL] = U_idx_3;\r\n  t0[217ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[218ULL] = 298.15;\r\n  t0[219ULL] = X_idx_29;\r\n  t0[220ULL] = 0.0;\r\n  t0[221ULL] = X_idx_29;\r\n  t0[222ULL] = t13;\r\n  t0[223ULL] = 9.0;\r\n  t0[224ULL] = 9.0;\r\n  t0[225ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[226ULL] = X_idx_29 * t13 * 0.001 * 1000.0;\r\n  t0[227ULL] = t13;\r\n  t0[228ULL] = 0.0;\r\n  t0[229ULL] = U_idx_3;\r\n  t0[230ULL] = X_idx_30;\r\n  t0[231ULL] = -(-U_idx_3 + 1.5);\r\n  t0[232ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Diode2_n_v;\r\n  t0[233ULL] = 9.0;\r\n  t0[234ULL] = t15;\r\n  t0[235ULL] = X_idx_30 * t15 * 0.001 * 1000.0;\r\n  t0[236ULL] = X_idx_19;\r\n  t0[237ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[238ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_Current_Sensor_C10_p_v;\r\n  t0[239ULL] = X_idx_19 * 0.03;\r\n  t0[240ULL] = U_idx_1;\r\n  t0[241ULL] = U_idx_3;\r\n  t0[242ULL] = U_idx_2;\r\n  t0[243ULL] = 0.0;\r\n  t0[244ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[245ULL] = 0.0;\r\n  t0[246ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[247ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[248ULL] = t17;\r\n  t0[249ULL] = 0.0;\r\n  t0[250ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[251ULL] = t17 * 7.5;\r\n  t0[252ULL] = DC_DC_Buck_PLANT_PR2_i;\r\n  t0[253ULL] = X_idx_13;\r\n  t0[254ULL] = DC_DC_Buck_PLANT_DC_DC_Buck_C4C5C6_p_v;\r\n  t0[255ULL] = DC_DC_Buck_PLANT_PR2_i * 2.0;\r\n  t0[256ULL] = (((((-X_idx_16 + -X_idx_24) + -X_idx_27) + -X_idx_30) + X_idx_23)\r\n                + X_idx_26) + X_idx_29;\r\n  t0[257ULL] = 0.0;\r\n  t0[258ULL] = 9.0;\r\n  t0[259ULL] = 9.0;\r\n  for (b = 0; b < 260; b++) {\r\n    out.mX[b] = t0[b];\r\n  }\r\n\r\n  (void)sys;\r\n  (void)t19;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_all.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_obs_all.h - header for method DCDC_Buck_9d5357ce_1_ds_obs_all */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_ALL_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_OBS_ALL_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_obs_all(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                           /* #ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_ALL_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_exp.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_exp.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_obs_exp(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  static real_T _cg_const_1[260] = { 0.0, 0.0, 0.0, 298.15, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 298.15, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 298.15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 298.15, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 298.15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 298.15, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    298.15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\r\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };\r\n\r\n  PmRealVector out;\r\n  real_T t0[260];\r\n  int32_T b;\r\n  (void)t1;\r\n  out = t2->mOBS_EXP;\r\n  for (b = 0; b < 260; b++) {\r\n    t0[b] = _cg_const_1[b];\r\n  }\r\n\r\n  for (b = 0; b < 260; b++) {\r\n    out.mX[b] = t0[b];\r\n  }\r\n\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_exp.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_obs_exp.h - header for method DCDC_Buck_9d5357ce_1_ds_obs_exp */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_EXP_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_OBS_EXP_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_obs_exp(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                           /* #ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_EXP_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_il.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_obs_il.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_obs_il(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  static boolean_T _cg_const_1[260] = { true, false, true, true, true, true,\r\n    true, true, true, true, true, false, true, true, false, true, false, true,\r\n    true, true, false, false, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, false, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, true, true, true, true, false,\r\n    true, true, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true, true, false, true, true, true, true,\r\n    true, true, true, true, false, true, true, true, true, true, true, true,\r\n    true, true, false, true, true, false, true, false, true, true, true, false,\r\n    true, false, true, true, true, true, true, true, true, true, true, false,\r\n    true, true, false, true, false, true, true, true, false, true, false, true,\r\n    true, true, true, true, true, true, true, true, false, true, true, false,\r\n    true, false, true, true, true, false, true, true, true, true, false, false,\r\n    false, true, true, true, true, true, true, true, true, true, true, true,\r\n    true, true, true, true, true, true };\r\n\r\n  PmBoolVector out;\r\n  int32_T b;\r\n  boolean_T t0[260];\r\n  (void)t1;\r\n  out = t2->mOBS_IL;\r\n  for (b = 0; b < 260; b++) {\r\n    t0[b] = _cg_const_1[b];\r\n  }\r\n\r\n  for (b = 0; b < 260; b++) {\r\n    out.mX[b] = t0[b];\r\n  }\r\n\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_obs_il.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_obs_il.h - header for method DCDC_Buck_9d5357ce_1_ds_obs_il */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_IL_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_OBS_IL_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_obs_il(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                            /* #ifndef DCDC_BUCK_9D5357CE_1_DS_OBS_IL_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_sys_struct.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#ifndef struct__NeDynamicSystemTag\r\n#define struct__NeDynamicSystemTag\r\n\r\ntypedef struct _NeDynamicSystemTag {\r\n  NeDynamicSystem mBase;\r\n  int32_T mRefCnt;\r\n  PmAllocator mAlloc;\r\n} _NeDynamicSystem;\r\n\r\n#else\r\n\r\ntypedef struct _NeDynamicSystemTag _NeDynamicSystem;\r\n\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_tdxf_p.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_tdxf_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_tdxf_p(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  static int32_T _cg_const_2[120] = { 1, 2, 3, 4, 12, 13, 16, 17, 18, 0, 15, 1,\r\n    4, 7, 16, 18, 21, 1, 16, 3, 6, 12, 17, 20, 22, 3, 17, 4, 18, 5, 19, 6, 20, 8,\r\n    21, 9, 12, 22, 25, 26, 10, 23, 27, 28, 11, 24, 29, 30, 1, 13, 14, 16, 13, 14,\r\n    1, 2, 3, 4, 12, 13, 16, 17, 18, 0, 15, 1, 4, 5, 6, 16, 18, 19, 20, 1, 4, 7,\r\n    16, 18, 21, 1, 3, 6, 12, 16, 17, 20, 3, 4, 6, 17, 18, 20, 21, 8, 21, 9, 12,\r\n    22, 25, 26, 22, 25, 22, 26, 10, 23, 27, 28, 23, 27, 23, 28, 11, 24, 29, 30,\r\n    24, 29, 24, 30 };\r\n\r\n  PmSparsityPattern out;\r\n  int32_T b;\r\n  (void)t1;\r\n  out = t2->mTDXF_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 31ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 9;\r\n  out.mJc[2] = 11;\r\n  out.mJc[3] = 17;\r\n  out.mJc[4] = 19;\r\n  out.mJc[5] = 25;\r\n  out.mJc[6] = 27;\r\n  out.mJc[7] = 29;\r\n  out.mJc[8] = 31;\r\n  out.mJc[9] = 33;\r\n  out.mJc[10] = 35;\r\n  out.mJc[11] = 40;\r\n  out.mJc[12] = 44;\r\n  out.mJc[13] = 48;\r\n  out.mJc[14] = 52;\r\n  out.mJc[15] = 54;\r\n  out.mJc[16] = 63;\r\n  out.mJc[17] = 65;\r\n  out.mJc[18] = 73;\r\n  out.mJc[19] = 79;\r\n  out.mJc[20] = 86;\r\n  out.mJc[21] = 93;\r\n  out.mJc[22] = 95;\r\n  out.mJc[23] = 100;\r\n  out.mJc[24] = 102;\r\n  out.mJc[25] = 104;\r\n  out.mJc[26] = 108;\r\n  out.mJc[27] = 110;\r\n  out.mJc[28] = 112;\r\n  out.mJc[29] = 116;\r\n  out.mJc[30] = 118;\r\n  out.mJc[31] = 120;\r\n  for (b = 0; b < 120; b++) {\r\n    out.mIr[b] = _cg_const_2[b];\r\n  }\r\n\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_tdxf_p.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_tdxf_p.h - header for method DCDC_Buck_9d5357ce_1_ds_tdxf_p */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_TDXF_P_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_TDXF_P_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_tdxf_p(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                            /* #ifndef DCDC_BUCK_9D5357CE_1_DS_TDXF_P_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_tdxy_p.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_tdxy_p.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_tdxy_p(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t1, NeDsMethodOutput *t2)\r\n{\r\n  PmSparsityPattern out;\r\n  (void)t1;\r\n  out = t2->mTDXY_P;\r\n  out.mNumCol = 31ULL;\r\n  out.mNumRow = 2ULL;\r\n  out.mJc[0] = 0;\r\n  out.mJc[1] = 1;\r\n  out.mJc[2] = 1;\r\n  out.mJc[3] = 1;\r\n  out.mJc[4] = 1;\r\n  out.mJc[5] = 1;\r\n  out.mJc[6] = 1;\r\n  out.mJc[7] = 1;\r\n  out.mJc[8] = 1;\r\n  out.mJc[9] = 1;\r\n  out.mJc[10] = 2;\r\n  out.mJc[11] = 2;\r\n  out.mJc[12] = 2;\r\n  out.mJc[13] = 2;\r\n  out.mJc[14] = 2;\r\n  out.mJc[15] = 2;\r\n  out.mJc[16] = 3;\r\n  out.mJc[17] = 3;\r\n  out.mJc[18] = 3;\r\n  out.mJc[19] = 3;\r\n  out.mJc[20] = 3;\r\n  out.mJc[21] = 3;\r\n  out.mJc[22] = 4;\r\n  out.mJc[23] = 4;\r\n  out.mJc[24] = 4;\r\n  out.mJc[25] = 4;\r\n  out.mJc[26] = 4;\r\n  out.mJc[27] = 4;\r\n  out.mJc[28] = 4;\r\n  out.mJc[29] = 4;\r\n  out.mJc[30] = 4;\r\n  out.mJc[31] = 4;\r\n  out.mIr[0] = 1;\r\n  out.mIr[1] = 0;\r\n  out.mIr[2] = 1;\r\n  out.mIr[3] = 0;\r\n  (void)sys;\r\n  (void)t2;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_tdxy_p.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_tdxy_p.h - header for method DCDC_Buck_9d5357ce_1_ds_tdxy_p */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_TDXY_P_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_TDXY_P_H 1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_tdxy_p(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                            /* #ifndef DCDC_BUCK_9D5357CE_1_DS_TDXY_P_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_zc.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#include \"ne_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_sys_struct.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_zc.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_externals.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_ds_external_struct.h\"\r\n#include \"ssc_ml_fun.h\"\r\n\r\nint32_T DCDC_Buck_9d5357ce_1_ds_zc(const NeDynamicSystem *sys, const\r\n  NeDynamicSystemInput *t3, NeDsMethodOutput *t4)\r\n{\r\n  PmRealVector out;\r\n  real_T U_idx_0;\r\n  real_T U_idx_1;\r\n  real_T U_idx_2;\r\n  real_T U_idx_3;\r\n  real_T X_idx_10;\r\n  real_T X_idx_11;\r\n  real_T X_idx_12;\r\n  real_T X_idx_13;\r\n  real_T X_idx_22;\r\n  real_T X_idx_25;\r\n  real_T X_idx_28;\r\n  U_idx_0 = t3->mU.mX[0];\r\n  U_idx_1 = t3->mU.mX[1];\r\n  U_idx_2 = t3->mU.mX[2];\r\n  U_idx_3 = t3->mU.mX[3];\r\n  X_idx_10 = t3->mX.mX[10];\r\n  X_idx_11 = t3->mX.mX[11];\r\n  X_idx_12 = t3->mX.mX[12];\r\n  X_idx_13 = t3->mX.mX[13];\r\n  X_idx_22 = t3->mX.mX[22];\r\n  X_idx_25 = t3->mX.mX[25];\r\n  X_idx_28 = t3->mX.mX[28];\r\n  out = t4->mZC;\r\n  out.mX[0] = -X_idx_13 - 1.6;\r\n  out.mX[1] = -79.0 - (X_idx_22 * 1.0E-6 + X_idx_10) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  out.mX[2] = -79.0 - (X_idx_25 * 1.0E-6 + X_idx_11) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  out.mX[3] = -79.0 - (X_idx_28 * 1.0E-6 + X_idx_12) * 1.602176487E-19 /\r\n    4.3497335432938027E-21;\r\n  out.mX[4] = ((-X_idx_10 + X_idx_22 * -1.0E-6) + -9.0) - 0.85;\r\n  out.mX[5] = ((-X_idx_11 + X_idx_25 * -1.0E-6) + -9.0) - 0.85;\r\n  out.mX[6] = ((-X_idx_12 + X_idx_28 * -1.0E-6) + -9.0) - 0.85;\r\n  out.mX[7] = U_idx_0 - 3.0;\r\n  out.mX[8] = U_idx_1 - 1.5;\r\n  out.mX[9] = U_idx_2 - 1.5;\r\n  out.mX[10] = U_idx_3 - 1.5;\r\n  (void)sys;\r\n  (void)t4;\r\n  return 0;\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_ds_zc.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n/* DCDC_Buck_9d5357ce_1_ds_zc.h - header for method DCDC_Buck_9d5357ce_1_ds_zc */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef DCDC_BUCK_9D5357CE_1_DS_ZC_H\r\n#define DCDC_BUCK_9D5357CE_1_DS_ZC_H   1\r\n\r\n  int32_T DCDC_Buck_9d5357ce_1_ds_zc(const NeDynamicSystem *sys, const\r\n    NeDynamicSystemInput *Q, NeDsMethodOutput *M);\r\n\r\n#endif                                /* #ifndef DCDC_BUCK_9D5357CE_1_DS_ZC_H */\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n"},{"name":"DCDC_Buck_9d5357ce_1_gateway.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#ifdef MATLAB_MEX_FILE\r\n#include \"tmwtypes.h\"\r\n#else\r\n#include \"rtwtypes.h\"\r\n#endif\r\n\r\n#include \"nesl_rtw.h\"\r\n#include \"DCDC_Buck_9d5357ce_1.h\"\r\n#include \"DCDC_Buck_9d5357ce_1_gateway.h\"\r\n\r\nvoid DCDC_Buck_9d5357ce_1_gateway(void)\r\n{\r\n  NeModelParameters modelparams = { (NeSolverType) 0, 0.001, 0, 0, 0.001, 0, 0,\r\n    0, 0, (SscLoggingSetting) 0, 632502036, 0, };\r\n\r\n  NeSolverParameters solverparams = { 0, 0, 1, 0, 0, 0.001, 1e-06, 1e-09, 0, 0,\r\n    100, 0, 1, 0, 1e-08, 0, (NeLocalSolverChoice) 1, 5e-09, 0, 3, 2, 0, 2,\r\n    (NeLinearAlgebraChoice) 1, (NeEquationFormulationChoice) 0, 1024, 1, 0.001,\r\n    (NePartitionStorageMethod) 0, 1024, (NePartitionMethod) 1, };\r\n\r\n  const NeOutputParameters* outputparameters = NULL;\r\n  NeDae* dae;\r\n  size_t numOutputs = 0;\r\n  int* rtpDaes = NULL;\r\n  int* rtwLogDaes = NULL;\r\n\r\n  {\r\n    static const NeOutputParameters outputparameters_init[] = { { 0, 0, }, };\r\n\r\n    outputparameters = outputparameters_init;\r\n    numOutputs = sizeof(outputparameters_init)/sizeof(outputparameters_init[0]);\r\n  }\r\n\r\n  DCDC_Buck_9d5357ce_1_dae(&dae,\r\n    &modelparams,\r\n    &solverparams);\r\n  nesl_register_simulator_group(\r\n    \"DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration_1\",\r\n    1,\r\n    &dae,\r\n    &solverparams,\r\n    &modelparams,\r\n    numOutputs,\r\n    outputparameters,\r\n    0,\r\n    rtpDaes,\r\n    0,\r\n    rtwLogDaes);\r\n}\r\n"},{"name":"DCDC_Buck_9d5357ce_1_gateway.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#ifndef __DCDC_Buck_9d5357ce_1_gateway_h__\r\n#define __DCDC_Buck_9d5357ce_1_gateway_h__\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n  extern void DCDC_Buck_9d5357ce_1_gateway(void);\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n#endif                          /* #ifndef __DCDC_Buck_9d5357ce_1_gateway_h__ */\r\n"},{"name":"pm_printf.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\n * Abstract:\n *\n *    Conditionally include implementations for wrappers of printf\n *    functionality.\n *\n * Copyright 2015-2016 The MathWorks, Inc.\n */\n\n/* only Visual compile printf implementations */\n\n#if defined(_MSC_VER)\n#include \"pm_printf.h\"\n\n#else\n/*\n * included to avoid empty translation unit\n */\ntypedef int pm_printf_dummy;\n#endif\n"},{"name":"rt_backsubrr_dbl.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Copyright 1994-2010 The MathWorks, Inc.\r\n *\r\n * File: rt_backsubrr_dbl.c     \r\n *\r\n * Abstract:\r\n *      Simulink Coder support routine which performs\r\n *      backward substitution: solving Ux=b for real\r\n *      double precision float operands.\r\n *\r\n */\r\n\r\n#include \"rt_matrixlib.h\"\r\n\r\n/* Function: rt_BackwardSubstitutionRR_Dbl =====================================\r\n * Abstract: Backward substitution: Solving Ux=b \r\n *           U: real, double\r\n *           b: real, double\r\n *           U is an upper (or unit upper) triangular full matrix.\r\n *           The entries in the lower triangle are ignored.\r\n *           U is a NxN matrix\r\n *           X is a NxP matrix\r\n *           B is a NxP matrix\r\n */\r\nvoid rt_BackwardSubstitutionRR_Dbl(real_T          *pU,\r\n                                   const real_T    *pb,\r\n                                   real_T          *x,\r\n                                   int_T            N,\r\n                                   int_T            P,\r\n                                   boolean_T        unit_upper)\r\n{\r\n  int_T i,k;\r\n  for(k=P; k>0; k--) {\r\n    real_T *pUcol = pU;\r\n    for(i=0; i<N; i++) {\r\n      real_T *xj = x + k*N-1;\r\n      real_T s = 0.0;\r\n      real_T *pUrow = pUcol--;          /* access current row of U */\r\n\r\n      {\r\n        int_T j = i;\r\n        while(j-- > 0) {\r\n          s += *pUrow * *xj--;\r\n          pUrow -= N;\r\n        }\r\n      }\r\n\r\n      if (unit_upper) {\r\n        *xj = *pb-- - s;\r\n      } else {\r\n        *xj = (*pb-- - s) / *pUrow;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* [EOF] rt_backsubrr_dbl.c */\r\n"},{"name":"rt_forwardsubrr_dbl.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Copyright 1994-2010 The MathWorks, Inc.\r\n *\r\n * File: rt_forwardsubrr_dbl.c     \r\n *\r\n * Abstract:\r\n *      Simulink Coder support routine which performs\r\n *      forward substitution: solving Lx=b\r\n *\r\n */\r\n\r\n#include \"rt_matrixlib.h\"\r\n\r\n/* Function: rt_ForwardSubstitutionRR_Dbl ======================================\r\n * Abstract: Forward substitution: solving Lx=b \r\n *           L: Real, double\r\n *           b: Real, double\r\n *           L is a lower (or unit lower) triangular full matrix.\r\n *           The entries in the upper triangle are ignored.\r\n *           L is a NxN matrix\r\n *           X is a NxP matrix\r\n *           B is a NxP matrix\r\n */\r\nvoid rt_ForwardSubstitutionRR_Dbl(real_T        *pL,\r\n                                  const real_T  *pb,\r\n                                  real_T        *x,\r\n                                  int_T          N,\r\n                                  int_T          P,\r\n                                  const int32_T *piv,\r\n                                  boolean_T      unit_lower)\r\n{  \r\n  /* Real inputs: */\r\n  int_T i, k;\r\n  for(k=0; k<P; k++) {\r\n    real_T *pLcol = pL;\r\n    for(i=0; i<N; i++) {\r\n      real_T *xj = x + k*N;\r\n      real_T s = 0.0;\r\n      real_T *pLrow = pLcol++;          /* access current row of L */\r\n\r\n      {\r\n        int_T j = i;\r\n        while(j-- > 0) {\r\n          s += *pLrow * *xj;\r\n          pLrow += N;\r\n          xj++;\r\n        }\r\n      }\r\n\r\n      if (unit_lower) {\r\n        *xj = pb[piv[i]] - s;\r\n      } else {\r\n        *xj = (pb[piv[i]] - s) / *pLrow;\r\n      }\r\n    }\r\n    pb += N;\r\n  }\r\n}\r\n\r\n/* [EOF] rt_forwardsubrr_dbl.c */\r\n"},{"name":"rt_lu_real.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Copyright 1994-2010 The MathWorks, Inc.\r\n *\r\n * File: rt_lu_real.c     \r\n *\r\n * Abstract:\r\n *      Real-Time Workshop support routine for lu_real\r\n *\r\n */\r\n\r\n#include <math.h>\r\n#include \"rt_matrixlib.h\"\r\n\r\n/* Function: rt_lu_real  =======================================================\r\n * Abstract: A is real.\r\n *\r\n */\r\nvoid rt_lu_real(real_T      *A,    /* in and out                         */\r\n                const int_T n,     /* number or rows = number of columns */\r\n                int32_T     *piv)  /* pivote vector                      */\r\n{\r\n  int_T k;\r\n\r\n  /* initialize row-pivot indices: */\r\n  for (k = 0; k < n; k++) {\r\n    piv[k] = k;\r\n  }\r\n\r\n  /* Loop over each column: */\r\n  for (k = 0; k < n; k++) {\r\n    const int_T kn = k*n;\r\n    int_T p = k;\r\n\r\n    /* Scan the lower triangular part of this column only\r\n     * Record row of largest value\r\n     */\r\n    {\r\n      int_T i;\r\n      real_T Amax = fabs(A[p+kn]);      /* assume diag is max */\r\n      for (i = k+1; i < n; i++) {\r\n        real_T q = fabs(A[i+kn]);\r\n        if (q > Amax) {p = i; Amax = q;}\r\n      }\r\n    }\r\n\r\n    /* swap rows if required */\r\n    if (p != k) {\r\n      int_T j;\r\n      int32_T t1;\r\n      for (j = 0; j < n; j++) {\r\n        real_T t;\r\n        const int_T j_n = j*n;\r\n        t = A[p+j_n]; A[p+j_n] = A[k+j_n]; A[k+j_n] = t;\r\n      }\r\n      /* swap pivot row indices */\r\n      t1 = piv[p]; piv[p] = piv[k]; piv[k] = t1;\r\n    }\r\n\r\n    /* column reduction */\r\n    {\r\n      real_T Adiag = A[k+kn];\r\n      int_T i,j;\r\n      if (Adiag != 0.0) {               /* non-zero diagonal entry */\r\n\r\n        /* divide lower triangular part of column by max */\r\n        Adiag = 1.0/Adiag;\r\n        for (i = k+1; i < n; i++) {\r\n          A[i+kn] *= Adiag;\r\n        }\r\n\r\n        /* subtract multiple of column from remaining columns */\r\n        for (j = k+1; j < n; j++) {\r\n          int_T j_n = j*n;\r\n          for (i = k+1; i < n; i++) {\r\n            A[i+j_n] -= A[i+kn]*A[k+j_n];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* [EOF] rt_lu_real.c */\r\n"},{"name":"rt_matrixlib.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef rt_matrixlib_h\r\n#define rt_matrixlib_h\r\n\r\n/* Copyright 2007-2013 The MathWorks, Inc.\r\n *\r\n * File    : rt_matrixlib.h\r\n * Abstract:\r\n *     Function prototypes for .c sources in rtw/c/src/matrixmath.\r\n *\r\n */\r\n\r\n\r\n/*==========*\r\n * Includes *\r\n *==========*/\r\n\r\n#include \"rtwtypes.h\"\r\n#include <limits.h>\r\n\r\n#ifdef __cplusplus\r\nextern \"C\" {\r\n#endif\r\n\r\n/* Matrix Multiplication Utility Functions */\r\nextern void rt_MatMultRR_Dbl(real_T         *y, \r\n                             const real_T   *A, \r\n                             const real_T   *B, \r\n                             const int_T dims[3]);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_MatMultRC_Dbl(creal_T       *y,\r\n                             const real_T  *A,\r\n                             const creal_T *B,\r\n                             const int_T dims[3]);\r\n\r\nextern void rt_MatMultCR_Dbl(creal_T       *y,\r\n                             const creal_T *A,\r\n                             const real_T  *B,\r\n                             const int_T dims[3]);\r\n\r\nextern void rt_MatMultCC_Dbl(creal_T       *y,\r\n                             const creal_T *A,\r\n                             const creal_T *B,\r\n                             const int_T dims[3]);\r\n#endif\r\n\r\nextern void rt_MatMultRR_Sgl(real32_T       *y,\r\n                             const real32_T *A,\r\n                             const real32_T *B,\r\n                             const int_T  dims[3]);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_MatMultRC_Sgl(creal32_T       *y,\r\n                             const real32_T  *A,\r\n                             const creal32_T *B,\r\n                             const int_T   dims[3]);\r\n\r\nextern void rt_MatMultCR_Sgl(creal32_T       *y,\r\n                             const creal32_T *A,\r\n                             const real32_T  *B,\r\n                             const int_T   dims[3]);\r\n\r\nextern void rt_MatMultCC_Sgl(creal32_T       *y,\r\n                             const creal32_T *A,\r\n                             const creal32_T *B,\r\n                             const int_T   dims[3]);\r\n#endif\r\n\r\nextern void rt_MatMultAndIncRR_Dbl(real_T       *y,\r\n                                   const real_T *A,\r\n                                   const real_T *B,\r\n                                   const int_T dims[3]);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_MatMultAndIncRC_Dbl(creal_T       *y,\r\n                                   const real_T  *A,\r\n                                   const creal_T *B,\r\n                                   const int_T dims[3]);\r\n\r\nextern void rt_MatMultAndIncCR_Dbl(creal_T       *y,\r\n                                   const creal_T *A,\r\n                                   const real_T  *B,\r\n                                   const int_T dims[3]);\r\n\r\nextern void rt_MatMultAndIncCC_Dbl(creal_T       *y,\r\n                                   const creal_T *A,\r\n                                   const creal_T *B,\r\n                                   const int_T dims[3]);\r\n#endif\r\nextern void rt_MatMultAndIncRR_Sgl(real32_T       *y,\r\n                                   const real32_T *A,\r\n                                   const real32_T *B,\r\n                                   const int_T  dims[3]);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_MatMultAndIncRC_Sgl(creal32_T       *y,\r\n                                   const real32_T  *A,\r\n                                   const creal32_T *B,\r\n                                   const int_T   dims[3]);\r\n\r\nextern void rt_MatMultAndIncCR_Sgl(creal32_T       *y,\r\n                                   const creal32_T *A,\r\n                                   const real32_T  *B,\r\n                                   const int_T   dims[3]);\r\n\r\nextern void rt_MatMultAndIncCC_Sgl(creal32_T       *y,\r\n                                   const creal32_T *A,\r\n                                   const creal32_T *B,\r\n                                   const int_T   dims[3]);\r\n#endif \r\n\r\n/* Matrix Inversion Utility Functions */\r\nextern void rt_lu_real(real_T      *A,\r\n                       const int_T n,\r\n                       int32_T     *piv);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_lu_cplx(creal_T *A,\r\n                       const int_T n,\r\n                       int32_T *piv);\r\n#endif\r\n\r\nextern void rt_lu_real_sgl(real32_T      *A,\r\n                           const int_T n,\r\n                           int32_T     *piv);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_lu_cplx_sgl(creal32_T *A,\r\n                           const int_T n,\r\n                           int32_T *piv);\r\n#endif\r\n\r\nextern void rt_BackwardSubstitutionRR_Dbl(real_T          *pU,\r\n                                          const real_T    *pb,\r\n                                          real_T          *x,\r\n                                          int_T            N,\r\n                                          int_T            P,\r\n                                          boolean_T        unit_upper);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_BackwardSubstitutionRC_Dbl(real_T          *pU,\r\n                                          const creal_T   *pb,\r\n                                          creal_T         *x,\r\n                                          int_T            N,\r\n                                          int_T            P,\r\n                                          boolean_T        unit_upper);\r\n\r\nextern void rt_BackwardSubstitutionCC_Dbl(creal_T         *pU,\r\n                                          const creal_T   *pb,\r\n                                          creal_T         *x,\r\n                                          int_T            N,\r\n                                          int_T            P,\r\n                                          boolean_T        unit_upper);\r\n#endif\r\n\r\nextern void rt_ForwardSubstitutionRR_Dbl(real_T        *pL,\r\n                                         const real_T  *pb,\r\n                                         real_T        *x,\r\n                                         int_T          N,\r\n                                         int_T          P,\r\n                                         const int32_T *piv,\r\n                                         boolean_T      unit_lower);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_ForwardSubstitutionRC_Dbl(real_T        *pL,\r\n                                         const creal_T   *pb,\r\n                                         creal_T   *x,\r\n                                         int_T     N,\r\n                                         int_T     P,\r\n                                         const int32_T   *piv,\r\n                                         boolean_T unit_lower);\r\n\r\nextern void rt_ForwardSubstitutionCR_Dbl(creal_T   *pL,\r\n                                         const real_T    *pb,\r\n                                         creal_T   *x,\r\n                                         int_T     N,\r\n                                         int_T     P,\r\n                                         const int32_T   *piv,\r\n                                         boolean_T unit_lower);\r\n\r\nextern void rt_ForwardSubstitutionCC_Dbl(creal_T   *pL,\r\n                                         const creal_T   *pb,\r\n                                         creal_T   *x,\r\n                                         int_T     N,\r\n                                         int_T     P,\r\n                                         const int32_T   *piv,\r\n                                         boolean_T unit_lower);\r\n#endif\r\n\r\nextern void rt_BackwardSubstitutionRR_Sgl(real32_T          *pU,\r\n                                          const real32_T    *pb,\r\n                                          real32_T          *x,\r\n                                          int_T              N,\r\n                                          int_T              P,\r\n                                          boolean_T          unit_upper);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_BackwardSubstitutionRC_Sgl(real32_T          *pU,\r\n                                          const creal32_T   *pb,\r\n                                          creal32_T         *x,\r\n                                          int_T              N,\r\n                                          int_T              P,\r\n                                          boolean_T          unit_upper);\r\n\r\nextern void rt_BackwardSubstitutionCC_Sgl(creal32_T         *pU,\r\n                                          const creal32_T   *pb,\r\n                                          creal32_T         *x,\r\n                                          int_T              N,\r\n                                          int_T              P,\r\n                                          boolean_T          unit_upper);\r\n#endif\r\n\r\nextern void rt_ForwardSubstitutionRR_Sgl(real32_T    *pL,\r\n                                         const real32_T    *pb,\r\n                                         real32_T    *x,\r\n                                         int_T     N,\r\n                                         int_T     P,\r\n                                         const int32_T   *piv,\r\n                                         boolean_T unit_lower);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_ForwardSubstitutionRC_Sgl(real32_T    *pL,\r\n                                         const creal32_T   *pb,\r\n                                         creal32_T   *x,\r\n                                         int_T     N,\r\n                                         int_T     P,\r\n                                         const int32_T   *piv,\r\n                                         boolean_T unit_lower);\r\n\r\nextern void rt_ForwardSubstitutionCR_Sgl(creal32_T   *pL,\r\n                                         const real32_T    *pb,\r\n                                         creal32_T   *x,\r\n                                         int_T     N,\r\n                                         int_T     P,\r\n                                         const int32_T   *piv,\r\n                                         boolean_T unit_lower);\r\n\r\nextern void rt_ForwardSubstitutionCC_Sgl(creal32_T   *pL,\r\n                                         const creal32_T   *pb,\r\n                                         creal32_T   *x,\r\n                                         int_T     N,\r\n                                         int_T     P,\r\n                                         const int32_T   *piv,\r\n                                         boolean_T unit_lower);\r\n#endif\r\n\r\n\r\nextern void rt_MatDivRR_Dbl(real_T        *Out,\r\n                            const real_T  *In1,\r\n                            const real_T  *In2,\r\n                            real_T        *lu,\r\n                            int32_T       *piv,\r\n                            real_T        *x,\r\n                            const int_T    dims[3]);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_MatDivRC_Dbl(creal_T       *Out,\r\n                            const real_T  *In1,\r\n                            const creal_T *In2,\r\n                            real_T        *lu,\r\n                            int32_T       *piv,\r\n                            creal_T       *x,\r\n                            const int_T    dims[3]);\r\n\r\nextern void rt_MatDivCR_Dbl(creal_T       *Out,\r\n                            const creal_T *In1,\r\n                            const real_T  *In2,\r\n                            creal_T       *lu,\r\n                            int32_T       *piv,\r\n                            creal_T       *x,\r\n                            const int_T    dims[3]);\r\n\r\nextern void rt_MatDivCC_Dbl(creal_T       *Out,\r\n                            const creal_T *In1,\r\n                            const creal_T *In2,\r\n                            creal_T       *lu,\r\n                            int32_T       *piv,\r\n                            creal_T       *x,\r\n                            const int_T    dims[3]);\r\n#endif\r\n\r\nextern void rt_MatDivRR_Sgl(real32_T        *Out,\r\n                            const real32_T  *In1,\r\n                            const real32_T  *In2,\r\n                            real32_T        *lu,\r\n                            int32_T         *piv,\r\n                            real32_T        *x,\r\n                            const int_T      dims[3]);\r\n\r\n#ifdef CREAL_T\r\nextern void rt_MatDivRC_Sgl(creal32_T       *Out,\r\n                            const real32_T  *In1,\r\n                            const creal32_T *In2,\r\n                            real32_T        *lu,\r\n                            int32_T         *piv,\r\n                            creal32_T       *x,\r\n                            const int_T      dims[3]);\r\n\r\nextern void rt_MatDivCR_Sgl(creal32_T       *Out,\r\n                            const creal32_T *In1,\r\n                            const real32_T  *In2,\r\n                            creal32_T       *lu,\r\n                            int32_T         *piv,\r\n                            creal32_T       *x,\r\n                            const int_T      dims[3]);\r\n\r\nextern void rt_MatDivCC_Sgl(creal32_T       *Out,\r\n                            const creal32_T *In1,\r\n                            const creal32_T *In2,\r\n                            creal32_T       *lu,\r\n                            int32_T         *piv,\r\n                            creal32_T       *x,\r\n                            const int_T      dims[3]);\r\n#endif\r\n\r\n\r\n/* Matrix multiplication defines */\r\n\r\n/* Quick (approximate) complex absolute value: */\r\n#define CQABS(X) (fabs((X).re) + fabs((X).im))\r\n\r\n/* Quick (approximate) complex absolute value for singles: */\r\n#define CQABSSGL(X) (real32_T)(fabs( (real_T) (X).re) + fabs( (real_T) (X).im)) \r\n\r\n#ifdef CREAL_T\r\nextern void rt_ComplexTimes_Dbl(creal_T       *Out,\r\n                                const creal_T In1,\r\n                                const creal_T In2);\r\n\r\nextern void rt_ComplexRDivide_Dbl(creal_T       *Out,\r\n                                  const creal_T In1,\r\n                                  const creal_T In2);\r\n\r\nextern void rt_ComplexReciprocal_Dbl(creal_T       *Out,\r\n                                     const creal_T In1);\r\n\r\nextern void rt_ComplexTimes_Sgl(creal32_T       *Out,\r\n                                const creal32_T In1,\r\n                                const creal32_T In2);\r\n\r\nextern void rt_ComplexRDivide_Sgl(creal32_T       *Out,\r\n                                  const creal32_T In1,\r\n                                  const creal32_T In2);\r\n\r\nextern void rt_ComplexReciprocal_Sgl(creal32_T       *Out,\r\n                                     const creal32_T In1);\r\n\r\n#endif\r\n\r\nextern real_T rt_Hypot_Dbl(real_T In1,\r\n                           real_T In2);\r\n\r\nextern real32_T rt_Hypot_Sgl(real32_T In1,\r\n                             real32_T In2);\r\n\r\n#ifdef __cplusplus\r\n}\r\n#endif\r\n\r\n#endif /* rt_matrixlib_h */\r\n"},{"name":"rt_matrixlib_dbl.c","type":"source","group":"legacy","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Copyright 1994-2013 The MathWorks, Inc.\r\n *\r\n * File: rt_matrixlib_dbl.c\r\n *\r\n * Abstract:\r\n *      Simulink Coder utility functions\r\n *\r\n */\r\n\r\n#include <math.h>\r\n#include \"rt_matrixlib.h\"\r\n\r\n#ifdef CREAL_T\r\nvoid rt_ComplexTimes_Dbl(creal_T* c,\r\n                         const creal_T a,\r\n                         const creal_T b)\r\n{\r\n    if (a.im == 0.0) {\r\n        c->re = a.re * b.re;\r\n        c->im = a.re * b.im;\r\n        if (b.im == 0.0) {\r\n            c->im = 0.0;\r\n        } else if (b.re == 0.0 || a.re == 0.0) {\r\n            c->re = 0.0;\r\n        }\r\n    } else if (b.im == 0.0) {\r\n        c->re = a.re * b.re;\r\n        c->im = a.im * b.re;\r\n        if (b.re == 0.0 || a.re == 0.0) { \r\n            c->re = 0.0;\r\n        }\r\n    } else if (a.re == 0.0) {\r\n        c->re = -a.im * b.im;\r\n        c->im = a.im * b.re;\r\n        if (b.re == 0.0) {\r\n            c->im = 0.0;\r\n        }\r\n    } else if (b.re == 0.0) {\r\n        c->re = -a.im * b.im;\r\n        c->im = a.re * b.im;\r\n    } else {\r\n        c->re = a.re * b.re - a.im * b.im;\r\n        c->im = a.re * b.im + a.im * b.re;\r\n    }\r\n}\r\n\r\nvoid rt_ComplexRDivide_Dbl(creal_T* c,\r\n                           const creal_T a,\r\n                           const creal_T b)\r\n{\r\n    if (b.im == 0.0) {\r\n        c->re = a.re / b.re;\r\n        if (a.im == 0.0) {\r\n            c->im = 0.0;\r\n        } else { /* a.im != 0.0 */\r\n            c->im = a.im / b.re;\r\n            if (a.re == 0.0) {\r\n                c->re = 0.0;\r\n            }\r\n        }\r\n    } else if (b.re == 0.0) { /* b.im != 0.0 */\r\n        c->re = a.im / b.im;\r\n        c->im = -a.re / b.im;\r\n        if (a.re == 0.0) {\r\n            c->im = 0.0;\r\n        } else if (a.im == 0.0) {\r\n            c->re = 0.0;\r\n        }\r\n    } else {\r\n        real_T brm = fabs(b.re);\r\n        real_T bim = fabs(b.im);\r\n        if (brm > bim) {\r\n            real_T s = b.im / b.re;\r\n            real_T d = b.re + s * b.im;\r\n            c->im = (a.im - s * a.re) / d;\r\n            c->re = (a.re + s * a.im) / d;\r\n        } else if (brm == bim) {\r\n            real_T half = 0.5;\r\n            real_T sgnbr = b.re > 0.0 ? half : -half;\r\n            real_T sgnbi = b.im > 0.0 ? half : -half;\r\n            c->im = (a.im*sgnbr - a.re*sgnbi)/brm;\r\n            c->re = (a.re*sgnbr + a.im*sgnbi)/brm;\r\n        } else {\r\n            real_T s = b.re / b.im;\r\n            real_T d = b.im + s * b.re;\r\n            c->im = (s * a.im - a.re) / d;\r\n            c->re = (s * a.re + a.im) / d;\r\n        }\r\n    }\r\n}\r\n\r\nvoid rt_ComplexReciprocal_Dbl(creal_T* Out,\r\n                              const creal_T In1)\r\n{\r\n    creal_T y;\r\n    y.re = 1.0;\r\n    y.im = 0.0;\r\n\r\n    rt_ComplexRDivide_Dbl(Out, y, In1);\r\n}\r\n\r\n#endif\r\n\r\n\r\nreal_T rt_Hypot_Dbl(real_T a, real_T b)\r\n{\r\n    real_T y;\r\n    if (a != a || b != b) {\r\n        y = a + b;\r\n    } else {\r\n        real_T t;\r\n        if (fabs(a) > fabs(b)) {\r\n            t = b/a;\r\n            y = fabs(a)*sqrt(1.0 + t*t);\r\n        } else {\r\n            if (b == 0.0) {\r\n                y = 0.0;\r\n            } else {\r\n                t = a/b;\r\n                y = fabs(b)*sqrt(1.0 + t*t);\r\n            }\r\n        }\r\n    }\r\n    \r\n    return y;\r\n}\r\n"},{"name":"ssc_ml_fun.h","type":"header","group":"other","path":"C:\\Users\\win\\Desktop\\GitHub\\Modelling\\Modelling\\07_Interleaved_Buck\\DCDC_Buck_grt_rtw","tag":"","groupDisplay":"Other files","code":"/* Simscape target specific file.\r\n * This file is generated for the Simscape network associated with the solver block 'DCDC_Buck/DC//DC_Buck_PLANT/Solver Configuration'.\r\n */\r\n\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n#ifndef SSC_ML_FUN_H\r\n#define SSC_ML_FUN_H                   1\r\n#endif\r\n\r\n#ifdef __cplusplus\r\n\r\n};\r\n\r\n#endif\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};